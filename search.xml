<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Zookeeper、Dubbo-Admin管理平台的搭建]]></title>
      <url>%2F2017%2F04%2F26%2FZookeeper%E3%80%81Dubbo-Admin%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
      <content type="text"><![CDATA[ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。 ZooKeeper官网为：http://zookeeper.apache.org/ Dubbo是Alibaba开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。关于注册中心、协议支持、服务监控等内容。 Dubbo官网为：http://dubbo.io/ 一、zookeeper安装与启动首先需要安装JdK，从Oracle的Java网站下载，安装很简单，就不再详述。zookeeper的下载地址 1http://www.apache.org/dyn/closer.cgi/zookeeper/ 下载后直接解压，不用安装 1[root@object1 home]# tar zxvf zookeeper-3.4.10.tar.gz 修改默认配置 1[root@object1 conf]# cp zoo_sample.cfg zoo.cfg 参数说明: tickTime：zookeeper中使用的基本时间单位, 毫秒值这个时间是作为Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。 dataDir：数据目录. 可以是任意目录，默认情况下，Zookeeper 将写数据 的日志文件也保存在这个目录里。 clientPort：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。 至此, zookeeper的单机模式已经配置好了，启动ZooKeeper 1[root@object1 zookeeper-3.4.10]# sh bin/zkServer.sh start 二、Dubbo-admin管理平台的安装因为zookeeper只是一个黑框，我们无法看到是否存在了什么提供者或消费者，这时就要借助Dubbo-Admin管理平台来实时的查看，也可以通过这个平台来管理提者和消费者。制作了基于jdk1.8打包的dubbo-admin.war 下载地址 1http://hyman.shop/uploads/dubbo-admin-2.5.4.war dubbo源码 1https://github.com/alibaba/dubbo 下载好dubbo-admin.war后，我们就可以按常用的web部署方式进行部署即可，把war包放到tomcat的webapps目录下，启动tomcat，后再部署下相应的参数。 启动tomcat 1[root@object1 apache-tomcat-7.0.62]# sh bin/startup.sh 访问项目地址即可 1http: //ip地址:端口号/dubbo-admin-2.5.4/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL自带压力测试工具mysqlslap的使用方法]]></title>
      <url>%2F2017%2F04%2F26%2FMySQL%E8%87%AA%E5%B8%A6%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7mysqlslap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[mysqlslap是从5.1.4版开始的一个MySQL官方提供的压力测试工具。通过模拟多个并发客户端访问MySQL来执行压力测试，并输出计时信息。并且能很好的对比多个存储引擎在相同环境下的并发压力性能差别。可以指定SQL语句。如果没有指定SQL语句，mysqlslap会自动生成查询schema的SELECT语句。 1、查看帮助信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126[root@object1 local]# mysqlslap --helpmysqlslap Ver 1.0 Distrib 5.7.18, for Linux (x86_64)Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Run a query multiple times against the server.Usage: mysqlslap [OPTIONS]Default options are read from the following files in the given order:/etc/my.cnf /etc/mysql/my.cnf /usr/etc/my.cnf ~/.my.cnf The following groups are read: mysqlslap clientThe following options may be given as the first argument:--print-defaults Print the program argument list and exit.--no-defaults Don&apos;t read default options from any option file, except for login file.--defaults-file=# Only read default options from the given file #.--defaults-extra-file=# Read this file after the global files are read.--defaults-group-suffix=# Also read groups with concat(group, suffix)--login-path=# Read this path from the login file. -?, --help Display this help and exit. -a, --auto-generate-sql 自动生成测试表和数据 Generate SQL where not supplied by file or command line. --auto-generate-sql-add-autoincrement 增加auto_increment一列 Add an AUTO_INCREMENT column to auto-generated tables. --auto-generate-sql-execute-number=# 自动生成的查询的个数 Set this number to generate a set number of queries to run. --auto-generate-sql-guid-primary 增加基于GUID的主键 Add GUID based primary keys to auto-generated tables. --auto-generate-sql-load-type=name 测试语句的类型。取值包括：read，key，write，update和mixed(默认) Specify test load type: mixed, update, write, key, or read; default is mixed. --auto-generate-sql-secondary-indexes=# 增加二级索引的个数，默认是0 Number of secondary indexes to add to auto-generated tables. --auto-generate-sql-unique-query-number=# 不同查询的数量，默认值是10 Number of unique queries to generate for automatic tests. --auto-generate-sql-unique-write-number=# 不同插入的数量，默认是100 Number of unique queries to generate for auto-generate-sql-write-number. --auto-generate-sql-write-number=# Number of row inserts to perform for each thread (default is 100). --commit=# 多少条DML后提交一次 Commit records every X number of statements. -C, --compress 如果服务器和客户端支持都压缩，则压缩信息传递 Use compression in server/client protocol. -c, --concurrency=name 模拟N个客户端并发执行select。可指定多个值，以逗号或者 --delimiter 参数指定的值做为分隔符 Number of clients to simulate for query to run. --create=name 指定用于创建表的.sql文件或者字串 File or string to use create tables. --create-schema=name 指定待测试的数据库名，MySQL中schema也就是database，默认是mysqlslap Schema to run tests in. --csv[=name] Generate CSV output to named file or to stdout if no file is named. -#, --debug[=#] This is a non-debug version. Catch this and exit. --debug-check This is a non-debug version. Catch this and exit. -T, --debug-info 打印内存和CPU的信息 This is a non-debug version. Catch this and exit. --default-auth=name Default authentication client-side plugin to use. -F, --delimiter=name 文件中的SQL语句使用分割符号 Delimiter to use in SQL statements supplied in file or command line. --detach=# 每执行完N个语句，先断开再重新打开连接 Detach (close and reopen) connections after X number of requests. --enable-cleartext-plugin Enable/disable the clear text authentication plugin. -e, --engine=name 创建测试表所使用的存储引擎，可指定多个 Storage engine to use for creating the table. -h, --host=name Connect to host. -i, --iterations=# 迭代执行的次数 Number of times to run the tests. --no-drop Do not drop the schema after the test. -x, --number-char-cols=name 自动生成的测试表中包含多少个字符类型的列，默认1 Number of VARCHAR columns to create in table if specifying --auto-generate-sql. -y, --number-int-cols=name 自动生成的测试表中包含多少个数字类型的列，默认1 Number of INT columns to create in table if specifying --auto-generate-sql. --number-of-queries=# 总的测试查询次数(并发客户数×每客户查询次数) Limit each client to this number of queries (this is not exact). --only-print 只输出模拟执行的结果，不实际执行Do not connect to the databases, but instead print out what would have been done. -p, --password[=name] Password to use when connecting to server. If password is not given it&apos;s asked from the tty. --plugin-dir=name Directory for client-side plugins. -P, --port=# Port number to use for connection. --post-query=name 测试完成以后执行的SQL语句的文件或者字符串 这个过程不影响时间计算Query to run or file containing query to execute after tests have completed. --post-system=name 测试完成以后执行的系统语句 这个过程不影响时间计算system() string to execute after tests have completed. --pre-query=name 测试执行之前执行的SQL语句的文件或者字符串 这个过程不影响时间计算Query to run or file containing query to execute before running tests. --pre-system=name 测试执行之前执行的系统语句 这个过程不影响时间计算system() string to execute before running tests. --protocol=name The protocol to use for connection (tcp, socket, pipe, memory). -q, --query=name 指定自定义.sql脚本执行测试。例如可以调用自定义的一个存储过程或者sql语句来执行测试Query to run or file containing query to run. --secure-auth Refuse client connecting to server if it uses old (pre-4.1.1) protocol. Deprecated. Always TRUE -s, --silent 不输出Run program in silent mode - no output. -S, --socket=name The socket file to use for connection. --sql-mode=name Specify sql-mode to run mysqlslap tool. --ssl-mode=name SSL connection mode. --ssl Deprecated. Use --ssl-mode instead. (Defaults to on; use --skip-ssl to disable.) --ssl-verify-server-cert Deprecated. Use --ssl-mode=VERIFY_IDENTITY instead. --ssl-ca=name CA file in PEM format. --ssl-capath=name CA directory. --ssl-cert=name X509 cert in PEM format. --ssl-cipher=name SSL cipher to use. --ssl-key=name X509 key in PEM format. --ssl-crl=name Certificate revocation list. --ssl-crlpath=name Certificate revocation list path. --tls-version=name TLS version to use, permitted values are: TLSv1, TLSv1.1 -u, --user=name User for login if not current user. -v, --verbose 输出更多的信息More verbose output; you can use this multiple times to get even more verbose output. -V, --version Output version information and exit. 2、以自动生成测试表和数据的形式，分别模拟 50 和 100 个客户端并发连接处理 1000 个 query 的情况。 123456789101112131415[root@object1 local]# mysqlslap -uroot -p&apos;CAOcao123~!@&apos; -a --concurrency=50,100 --number-of-queries=1000 mysqlslap: [Warning] Using a password on the command line interface can be insecure.Benchmark Average number of seconds to run all queries: 0.605 seconds Minimum number of seconds to run all queries: 0.605 seconds Maximum number of seconds to run all queries: 0.605 seconds Number of clients running queries: 50 Average number of queries per client: 20Benchmark Average number of seconds to run all queries: 0.534 seconds Minimum number of seconds to run all queries: 0.534 seconds Maximum number of seconds to run all queries: 0.534 seconds Number of clients running queries: 100 Average number of queries per client: 10 3、增加 –debug-info 选项，可以输出内存和CPU信息。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CentOS7通过yum安装最新版本MySQL]]></title>
      <url>%2F2017%2F04%2F26%2FCentOS7%20yum%E5%AE%89%E8%A3%85MySQL%2F</url>
      <content type="text"><![CDATA[CentOS 7之后的版本yum的默认源中使用MariaDB替代原先MySQL，因此安装方式较为以往有一些改变： 卸载原来的MariaDB 1yum remove -y mariadb-config-3:10.1.17-1.el7.x86_64 下载mysql的源 1wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm 安装yum库 1yum localinstall -y mysql57-community-release-el7-7.noarch.rpm 安装MySQL 1yum install -y mysql-community-server 启动MySQL服务 1systemctl start mysqld.service MySQL5.7加强了root用户的安全性，因此在第一次安装后会初始化一个随机密码，以下为查看初始随机密码的方式 1grep &apos;temporary password&apos; /var/log/mysqld.log 使用初始随机密码登录后MySQL会强制要求修改密码，否则无法正常使用，（密码必须包含小写、大写字母及特殊字符，当然也有其他方法不受此限制，再次不多做描述），修改方法如下： 123SET PASSWORD = PASSWORD(&apos;your new password&apos;);ALTER USER &apos;root&apos;@&apos;localhost&apos; PASSWORD EXPIRE NEVER;flush privileges; 然后退出后即可用新密码登录。 远程连接授权： 1GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;your password&apos; WITH GRANT OPTION;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo+github+next搭建的blog]]></title>
      <url>%2F2017%2F01%2F13%2FHexo-github-next%E6%90%AD%E5%BB%BA%E7%9A%84blog%2F</url>
      <content type="text"><![CDATA[搭建环境：Windows 10 软件工具：git、node.js、hexo、Markdownpad2 一、环境搭建 安装git git官网(http://git-scm.com) 安装Node.js node.js官网(https://nodejs.org/en/) 二、安装和配置Hexo 执行cmd命令 npm install -g hexo-cli 本地创建Hexo文件夹，本目录下执行cmd命令 hexo init npm install 启动Hexo hexo server 更改hexo主题，在Hexo目录下载next主题 git clone https://github.com/iissnan/hexo-theme-next themes/next 修改Hexo配置文件_config.yml theme: next 重启Hexo，基本更改过来了，其他修改具体查看GITBUB 创建文章，执行cmd命令 hexo new 文章主题 执行命令后，在文件下的source_posts，自动生成以后缀为md的文件，修改md内容 生成html文件，执行cmd命令 hexo d -g 自动会生存静态文件在public文件夹下，把里面的文件全部上传至自己的github下即可]]></content>
    </entry>

    
  
  
</search>
