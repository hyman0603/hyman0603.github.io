<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>解决mysql配置文件my.cnf添加max_connections不生效</title>
      <link href="/2019/01/26/update-mysql-max-connections-not-userful.html"/>
      <url>/2019/01/26/update-mysql-max-connections-not-userful.html</url>
      <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>新增项目环境，通过mysql官方指定的yum源安装了mysql5.6.43，由于项目启动提示too many connections，于是修改mysql的配置文件my.cnf添加max_connections=1000后，重启mysql后发现不生效，但是如果通过交互端的命令行可以更改生效。</p><a id="more"></a><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>如果采用的是yum源安装，至少需要修改一个地方：</p><h2 id="添加LimitNOFILE-65535至mysql服务文件mysqld-service中的-Service-段下面（必选项）："><a href="#添加LimitNOFILE-65535至mysql服务文件mysqld-service中的-Service-段下面（必选项）：" class="headerlink" title="添加LimitNOFILE=65535至mysql服务文件mysqld.service中的[Service]段下面（必选项）："></a>添加LimitNOFILE=65535至mysql服务文件mysqld.service中的[Service]段下面（必选项）：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~]# echo &quot;LimitNOFILE = 65535&quot; &gt;&gt;  /usr/lib/systemd/system/mysqld.service</span><br><span class="line">~]# systemctl  daemon-reload</span><br><span class="line">~]# vim /etc/my.cnf　　　　// 添加max_connections = 期望值</span><br><span class="line">~]# systemctl  restart  mysqld</span><br></pre></td></tr></table></figure><h2 id="在系统级别修改mysql打开最大文件数（非必选项，最好修改）"><a href="#在系统级别修改mysql打开最大文件数（非必选项，最好修改）" class="headerlink" title="在系统级别修改mysql打开最大文件数（非必选项，最好修改）"></a>在系统级别修改mysql打开最大文件数（非必选项，最好修改）</h2><p>在/etc/security/limits.conf末尾添加以下两行（需要reboot）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql hard nofile 65535</span><br><span class="line">mysql soft nofile 65535</span><br></pre></td></tr></table></figure></p><p>然后就可以在my.cnf中修改较大值的max_connections了</p>]]></content>
      
      <categories>
          
          <category> 日常问题处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>视频语音实时可视化部署记录</title>
      <link href="/2019/01/24/project-deploy.html"/>
      <url>/2019/01/24/project-deploy.html</url>
      <content type="html"><![CDATA[<p>  公司项目所需要安装的一些软件，以作记录，方便后期新增环境操作。</p><ol><li>SRS定位是运营级的互联网直播服务器集群，追求更好的概念完整性和最简单实现的代码。<a href="https://github.com/ossrs/srs" target="_blank" rel="noopener">https://github.com/ossrs/srs</a><a id="more"></a></li><li><p>FFmpeg是一个自由软件，可以运行音频和视频多种格式的录影、转换、流功能1，包含了libavcodec ─这是一个用于多个项目中音频和视频的解码器库，以及libavformat——一个音频与视频格式转换库。<a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">https://www.ffmpeg.org/</a></p></li><li><p>ImageMagick：免费的创建、编辑、合成图片的软件。它可以读取、转换、写入多种格式的图片。图片切割、颜色替换、各种效果的应用，图片的旋转、组合，文本，直线，多边形，椭圆，曲线，附加到图片伸展旋转。<a href="http://www.imagemagick.org/download/" target="_blank" rel="noopener">http://www.imagemagick.org/download/</a></p></li><li><p>GraphicsMagick号称图像处理领域的瑞士军刀。 短小精悍的代码却提供了一个鲁棒、高效的工具和库集合,来处理图像的读取、写入和操作,支持超过88中图像格式,包括重要的DPX、GIF、JPEG、JPEG-2000、PNG、PDF、PNM和TIFF。GraphicsMagick是从 ImageMagick 5.5.2 分支出来的,但是现在他变得更稳定和优秀,GM更小更容易安装、GM更有效率、GM的手册非常丰富GraphicsMagick的命令与ImageMagick基本是一样的。<a href="http://www.graphicsmagick.org/" target="_blank" rel="noopener">http://www.graphicsmagick.org/</a></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.裁切</span><br><span class="line">gm convert -crop 100x100+20+50 xdr.png xdr1.png </span><br><span class="line">100x100:指要裁切图片的大小;这里不要用*,要用字母X</span><br><span class="line"></span><br><span class="line">20+50:裁切的坐标,xy</span><br><span class="line"></span><br><span class="line">xdr.png:要裁切图片的名字;</span><br><span class="line"></span><br><span class="line">xdr1.png:裁切后图片的名字;</span><br><span class="line"></span><br><span class="line">2.格式转换</span><br><span class="line"></span><br><span class="line">gm convert a.bmp a.jpg </span><br><span class="line">由a.bmp图片转换为a.jpg.</span><br><span class="line"></span><br><span class="line">3.缩略图(640x480)</span><br><span class="line"></span><br><span class="line">gm convert a.jpg -geometry 640x480^ -gravity center -extent 640x480 b.jpg </span><br><span class="line">由a.jpg转换为640x480的b.jpg</span><br><span class="line"></span><br><span class="line">4.追加文字水印</span><br><span class="line"></span><br><span class="line">gm convert a.jpg -font Aricl -fill red -pointsize 33 -draw &quot;text 1600,50 &apos;wenzi&apos;&quot; b.jpg </span><br><span class="line">a.jpg图片用 Aricl字体 红色 大小33 文字从1600 50 坐标开始 内容为wnezi 转换为b.jpg</span><br></pre></td></tr></table></figure><ol start="3"><li>jpegsrc：jpegsrc是用软件实现JPEG图像编码、解码、转码。<a href="https://fossies.org/linux/misc/jpegsrc.v9c.tar.gz/" target="_blank" rel="noopener">https://fossies.org/linux/misc/jpegsrc.v9c.tar.gz/</a></li></ol><h1 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h1><p>下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>添加环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#注意jdk版本可能不一致，需修改</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_181/</span><br><span class="line">export JRE_HOME=/usr/local/jdk1.8.0_181/jre/</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br></pre></td></tr></table></figure></p><h1 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h1><p>可参考这里：<a href="https://www.ywthings.com/2018/10/23/ffmpeg-install-static-release.html">https://www.ywthings.com/2018/10/23/ffmpeg-install-static-release.html</a><br>下载地址：<a href="https://www.johnvansickle.com/ffmpeg/" target="_blank" rel="noopener">https://www.johnvansickle.com/ffmpeg/</a></p><p>添加环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/usr/local/ffmpeg/bin:$PATH&quot;</span><br></pre></td></tr></table></figure></p><h1 id="srs"><a href="#srs" class="headerlink" title="srs"></a>srs</h1><p>下载地址：<a href="https://github.com/ossrs/srs" target="_blank" rel="noopener">https://github.com/ossrs/srs</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#安装</span><br><span class="line">git clone https://github.com/ossrs/srs</span><br><span class="line">cd srs/trunk</span><br><span class="line">./configure  --full &amp;&amp; make</span><br><span class="line"></span><br><span class="line">#复制</span><br><span class="line">mkdir /usr/local/srs</span><br><span class="line">cp -a /usr/local/srs/trunk/&#123;conf,etc,objs&#125; /usr/local/srs/</span><br><span class="line"></span><br><span class="line">#修改启动配置文件路径</span><br><span class="line">ln -s /usr/local/srs/etc/init.d/srs /etc/init.d/srs</span><br><span class="line">vim /etc/init.d/srs</span><br><span class="line">ROOT=&quot;/usr/local/srs/&quot;</span><br></pre></td></tr></table></figure><p>srs配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">listen              1935;</span><br><span class="line">max_connections     1000;</span><br><span class="line">srs_log_tank        file;</span><br><span class="line">srs_log_file        ./objs/srs.log;</span><br><span class="line">http_api &#123;</span><br><span class="line">    enabled         on;</span><br><span class="line">    listen          1985;</span><br><span class="line">&#125;</span><br><span class="line">http_server &#123;</span><br><span class="line">    enabled         on;</span><br><span class="line">    listen          8080;</span><br><span class="line">    dir             ./objs/nginx/html;</span><br><span class="line">&#125;</span><br><span class="line">stats &#123;</span><br><span class="line">    network         0;</span><br><span class="line">    disk            sda sdb xvda xvdb;</span><br><span class="line">&#125;</span><br><span class="line">vhost __defaultVhost__ &#123;</span><br><span class="line">    http_remux &#123;</span><br><span class="line">        enabled     on;</span><br><span class="line">        mount       [vhost]/[app]/[stream].flv;</span><br><span class="line">        hstrs       on;</span><br><span class="line">    &#125;</span><br><span class="line">#mix_correcton;</span><br><span class="line">        http_hooks &#123;</span><br><span class="line">                enabled         on;</span><br><span class="line">                on_publish      http://10.10.0.10:1241/callbackOnPublish;</span><br><span class="line">                on_unpublish    http://10.10.0.10:1241/callbackOnUnpublish;</span><br><span class="line">                on_play         http://10.10.0.10:1241/callbackOnPlay;</span><br><span class="line">                on_stop         http://10.10.0.10:1241/callbackOnStop;</span><br><span class="line">                on_dvr          http://10.10.0.10:1241/callbackOnDvr;</span><br><span class="line">        &#125;</span><br><span class="line">dvr &#123;</span><br><span class="line">        enabled         on;</span><br><span class="line">        dvr_path        /mnt/mov/[stream]-[timestamp].flv;</span><br><span class="line">        dvr_plan        session;</span><br><span class="line">         dvr_duration    30;</span><br><span class="line">         dvr_wait_keyframe       on;</span><br><span class="line">         time_jitter             full;</span><br><span class="line">&#125;</span><br><span class="line">hls &#123;</span><br><span class="line">        enabled         on;</span><br><span class="line">        hls_path        /mnt/mov;</span><br><span class="line">        hls_m3u8_file   [stream].m3u8;</span><br><span class="line">        hls_ts_file     [stream]-[seq].ts;</span><br><span class="line">        hls_fragment    10;</span><br><span class="line">hls_window      60000;</span><br><span class="line">#hls_on_errordisconnect;</span><br><span class="line">&#125;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vhost bandcheck.srs.com &#123;</span><br><span class="line">    enabled         on;</span><br><span class="line">    chunk_size      65000;</span><br><span class="line">    bandcheck &#123;</span><br><span class="line">        enabled         on;</span><br><span class="line">        key             &quot;35c9b402c12a7246868752e2878f7e0e&quot;;</span><br><span class="line">        interval        30;</span><br><span class="line">        limit_kbps      4000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jpegsrc"><a href="#jpegsrc" class="headerlink" title="jpegsrc"></a>jpegsrc</h1><p>下载地址：<a href="http://www.ijg.org/files/jpegsrc.v9c.tar.gz" target="_blank" rel="noopener">http://www.ijg.org/files/jpegsrc.v9c.tar.gz</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#编译安装</span><br><span class="line"></span><br><span class="line">tar xf jpegsrc.v9c.tar.gz</span><br><span class="line">cd jpeg-9c</span><br><span class="line">./configure</span><br><span class="line">make libdir=/usr/lib64</span><br><span class="line">make libdir=/usr/lib64 install</span><br></pre></td></tr></table></figure><h1 id="ImageMagick-可不安装？"><a href="#ImageMagick-可不安装？" class="headerlink" title="ImageMagick(可不安装？)"></a>ImageMagick(可不安装？)</h1><p>下载地址：<a href="https://imagemagick.org/download/ImageMagick.tar.gz" target="_blank" rel="noopener">https://imagemagick.org/download/ImageMagick.tar.gz</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#编译安装</span><br><span class="line"></span><br><span class="line">tar zxvf ImageMagick.tar.gz</span><br><span class="line">cd ImageMagick-7.0.8-24</span><br><span class="line">./configure --prefix=/usr/local/imagemagick</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h1 id="GraphicsMagick"><a href="#GraphicsMagick" class="headerlink" title="GraphicsMagick"></a>GraphicsMagick</h1><p>下载地址：<a href="https://nchc.dl.sourceforge.net/project/graphicsmagick/graphicsmagick/1.3.31/GraphicsMagick-1.3.31.tar.xz" target="_blank" rel="noopener">https://nchc.dl.sourceforge.net/project/graphicsmagick/graphicsmagick/1.3.31/GraphicsMagick-1.3.31.tar.xz</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#编译安装</span><br><span class="line"></span><br><span class="line">tar xf GraphicsMagick-1.3.31.tar.xz</span><br><span class="line">cd GraphicsMagick-1.3.31</span><br><span class="line">./configure --prefix=/usr/local/gm --with-jpeg=yes --with-png=yes </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><p>参考这里：<a href="https://www.ywthings.com/2018/11/24/yum-install-mysql5-6.html">https://www.ywthings.com/2018/11/24/yum-install-mysql5-6.html</a></p><h1 id="memcached"><a href="#memcached" class="headerlink" title="memcached"></a>memcached</h1><p>下载地址：<a href="http://www.memcached.org/files/memcached-1.5.12.tar.gz" target="_blank" rel="noopener">http://www.memcached.org/files/memcached-1.5.12.tar.gz</a></p><p>安装 libevent<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/libevent/libevent/releases/download/release-2.1.8-stable/libevent-2.1.8-stable.tar.gz </span><br><span class="line">tar -zxvf libevent-2.1.8-stable.tar.gz </span><br><span class="line">cd libevent-2.1.8-stable</span><br><span class="line">./configure --prefix=/usr/local/libevent </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>安装 Memcached<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.memcached.org/files/memcached-1.5.12.tar.gz</span><br><span class="line">tar -zxvf memcached-1.5.12.tar.gz </span><br><span class="line">cd memcached-1.5.12</span><br><span class="line">./configure --prefix=/usr/local/memcached --with-libevent=/usr/local/libevent/</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>启动 Memcached<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-d是启动一个守护进程；</span><br><span class="line">-m是分配给Memcache使用的内存数量，单位是MB；</span><br><span class="line">-u是运行Memcache的用户；</span><br><span class="line">-l是监听的服务器IP地址，可以有多个地址；</span><br><span class="line">-p是设置Memcache监听的端口，，最好是1024以上的端口；</span><br><span class="line">-c是最大运行的并发连接数，默认是1024；</span><br><span class="line">-P是设置保存Memcache的pid文件。</span><br><span class="line"></span><br><span class="line">/usr/local/memcached/bin/memcached -d -m 1024 -u root -l 192.168.1.44 -p 11211 -c 1024 -P /tmp/memcached.pid</span><br></pre></td></tr></table></figure></p><h1 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h1><p>阿里云 天翼云 mongodb 2<br>华为云 腾讯云 mongodb &gt;=3</p><h2 id="mongodb2"><a href="#mongodb2" class="headerlink" title="mongodb2"></a>mongodb2</h2><p>mongodb 2 配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dbpath = /data/mongodb/db/</span><br><span class="line">logpath = /data/mongodb/logs/mongodb.log</span><br><span class="line">port = 5566</span><br><span class="line">fork = true</span><br><span class="line">nohttpinterface = true</span><br><span class="line">logappend = true</span><br><span class="line">auth = true</span><br></pre></td></tr></table></figure></p><p>mongodb 2 启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/mongodb.conf</span><br></pre></td></tr></table></figure><p>mongodb 2 添加帐号密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongodb/bin/mongo 127.0.0.1:5566/admin</span><br><span class="line">&gt;use admin</span><br><span class="line">&gt;db.addUser(&apos;test&apos;,&apos;123456&apos;)</span><br></pre></td></tr></table></figure></p><p><strong>备注：本地连接不上，防火墙关了就可以？</strong></p><h2 id="mongodb3"><a href="#mongodb3" class="headerlink" title="mongodb3"></a>mongodb3</h2><p>mongodb 3 配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">port=27017</span><br><span class="line">dbpath=/data/mongodb/</span><br><span class="line">logpath=/data/mongodb/mongod1.log</span><br><span class="line">fork=true</span><br><span class="line">bind_ip=0.0.0.0   </span><br><span class="line">logappend=true</span><br><span class="line">auth=true 第一次启动不要添加，添加认证后才启用</span><br></pre></td></tr></table></figure></p><p>mongodb 3 启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/mongodb.conf</span><br></pre></td></tr></table></figure><p>mongodb 3 添加帐号密码认证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mongodb/bin/mongo 127.0.0.1:27017/admin</span><br><span class="line">&gt;use admin</span><br><span class="line">&gt; db.createUser(&#123; user: &apos;root&apos;, pwd: &apos;test123&apos;, roles: [ &#123; role:&quot;root&quot;, db: &quot;admin&quot; &#125; ] &#125;);</span><br></pre></td></tr></table></figure></p><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>需开放端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">16400 文件服务</span><br><span class="line">1241 1238 通信服务</span><br><span class="line">1935 1985 srs服务</span><br><span class="line">因srs占用8080，web需更改端口18080 web服务</span><br></pre></td></tr></table></figure></p><h1 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h1><p>通信服务需拷贝/lib64/libudx.so<br>两个数据库，一个全局数据库修改数据库连接表，另数据库修改流媒体信息表，一个通信信息表<br>web服务修改文件服务地址、mongodb地址、数据库地址<br>tcp服务修改memcache地址、mongodb地址、数据库地址</p>]]></content>
      
      <categories>
          
          <category> 运维部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
            <tag> srs </tag>
            
            <tag> ImageMagick </tag>
            
            <tag> GraphicsMagick </tag>
            
            <tag> jpegsrc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用 kubeadm 部署 Kubernetes v1.13.x HA 集群</title>
      <link href="/2019/01/07/kubernetes-master-install-for-kubeadm-1-13-x.html"/>
      <url>/2019/01/07/kubernetes-master-install-for-kubeadm-1-13-x.html</url>
      <content type="html"><![CDATA[<p>官方文档：<a href="https://kubernetes.io/docs/setup/independent/high-availability/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/high-availability/</a></p><h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="禁用selinux"><a href="#禁用selinux" class="headerlink" title="禁用selinux"></a>禁用selinux</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Set SELinux in permissive mode (effectively disabling it)</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &apos;s/^SELINUX=enforcing$/SELINUX=permissive/&apos; /etc/selinux/config</span><br></pre></td></tr></table></figure><h1 id="启用net-bridge-bridge-nf-call-ip6tables和net-bridge-bridge-nf-call-iptables"><a href="#启用net-bridge-bridge-nf-call-ip6tables和net-bridge-bridge-nf-call-iptables" class="headerlink" title="启用net.bridge.bridge-nf-call-ip6tables和net.bridge.bridge-nf-call-iptables"></a>启用net.bridge.bridge-nf-call-ip6tables和net.bridge.bridge-nf-call-iptables</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h1 id="禁用swap"><a href="#禁用swap" class="headerlink" title="禁用swap"></a>禁用swap</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line">修改/etc/fstab 文件，注释掉 SWAP 的自动挂载. </span><br><span class="line">使用free -m确认swap已经关闭。</span><br></pre></td></tr></table></figure><h1 id="加载ipvs相关模块"><a href="#加载ipvs相关模块" class="headerlink" title="加载ipvs相关模块"></a>加载ipvs相关模块</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line">#!/bin/bash</span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br></pre></td></tr></table></figure><p>上面脚本创建了的/etc/sysconfig/modules/ipvs.modules文件，保证在节点重启后能自动加载所需模块。 使用lsmod | grep -e ip_vs -e nf_conntrack_ipv4命令查看是否已经正确加载所需的内核模块。接下来还需要确保各个节点上已经安装了ipset软件包。 为了便于查看ipvs的代理规则，最好安装一下管理工具ipvsadm。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ipset ipvsadm -y</span><br></pre></td></tr></table></figure></p><h1 id="安装-docke"><a href="#安装-docke" class="headerlink" title="安装 docke"></a>安装 docke</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 安装docker</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y docker-ce-18.06*</span><br><span class="line"></span><br><span class="line"># 增加加速器</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://bv55mwyn.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动docker</span><br><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure><h1 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 添加阿里云仓库</span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 安装kubeadm</span><br><span class="line">yum install -y kubelet-1.13.1 kubeadm-1.13.1 kubectl-1.13.1</span><br><span class="line"></span><br><span class="line"># 启动kubectl</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><h1 id="部署master节点"><a href="#部署master节点" class="headerlink" title="部署master节点"></a>部署master节点</h1><p>注意这里执行初始化用到了- -image-repository选项，指定初始化需要的镜像源从阿里云镜像仓库拉取。<br>Kubenetes默认Registries地址是 k8s.gcr.io，在国内并不能访问 gcr.io，在1.13版本中我们可以增加–image-repository参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">    --image-repository registry.cn-shenzhen.aliyuncs.com/hyman0603 \</span><br><span class="line">    --kubernetes-version v1.13.1 \</span><br><span class="line">    --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>新增阿里云ECS服务器作为TCP负载均衡访问失败</title>
      <link href="/2019/01/02/aliyun-no-access-lb.html"/>
      <url>/2019/01/02/aliyun-no-access-lb.html</url>
      <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>由于需要扩大业务访问量，新增ECS服务器，作为TCP负载均衡，添加到阿里云负载均衡下，添加成功后，业务总是会出现发送不了消息，登陆不成功。<br><a id="more"></a>如图所示<br><img src="/images/729984945541266907.jpg" width="100%" height="100%"></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>初步找遍了防火墙、业务配置问题都没发现问题，单独调用一台服务器作为开发调试，也是正常，在负载均衡器里面，只添加一台新增服务器也是正常的，添加两台后就立马不行。最后无奈只能提交给工单，给阿里云客服处理，结果反馈是需要在ECS服务器上需要添加内核参数。是因为rp_filter特性和负载均衡底层LVS的策略路由产生冲突，导致访问出现异常。改成0,是因为从mac层面接受数据包 拆包到ip层 对应lo后 会以其他网卡发送数据包 ，由于rp_filter参数为1  所以 不允许从非此网卡接受的数据从该网卡发出 导致了 大量的syn超时。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>具体参照阿里云TCP负载均衡不能访问解决方案：<a href="https://help.aliyun.com/knowledge_detail/55206.html" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/55206.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#编辑/etc/sysctl.conf文件，将系统配置文件中的以下三个参数值设置为0。</span><br><span class="line"></span><br><span class="line">net.ipv4.conf.default.rp_filter = 0</span><br><span class="line">net.ipv4.conf.all.rp_filter = 0</span><br><span class="line">net.ipv4.conf.eth0.rp_filter = 0</span><br><span class="line">net.ipv4.conf.eth1.rp_filter = 0 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#执行sysctl -p命令，使配置生效。</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 日常问题处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tcp </tag>
            
            <tag> lb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建Docker私有仓库Harbor</title>
      <link href="/2018/12/28/install-harbor.html"/>
      <url>/2018/12/28/install-harbor.html</url>
      <content type="html"><![CDATA[<p>官网：<a href="https://goharbor.io/" target="_blank" rel="noopener">https://goharbor.io/</a><br>安装介绍：<a href="https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md" target="_blank" rel="noopener">https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md</a></p><h1 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h1><p>docker 17.03.0-ce +<br>docker-compose 1.10.0+<br><a id="more"></a></p><h1 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h1><p>docker-compose安装：<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">https://docs.docker.com/compose/install/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h1 id="安装harbor"><a href="#安装harbor" class="headerlink" title="安装harbor"></a>安装harbor</h1><p>下载地址：<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">https://github.com/goharbor/harbor/releases</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#下载的是offline离线包</span><br><span class="line">wget https://storage.googleapis.com/harbor-releases/release-1.7.0/harbor-offline-installer-v1.7.0.tgz</span><br><span class="line"></span><br><span class="line">#解压，配置harbor</span><br><span class="line">tar zxvf harbor-offline-installer-v1.7.0.tgz</span><br><span class="line">cd harbor/</span><br><span class="line"></span><br><span class="line">#vim harbor.cfg</span><br><span class="line">hostname = 192.168.100.120</span><br><span class="line"></span><br><span class="line">#安装</span><br><span class="line">./install.sh</span><br><span class="line"></span><br><span class="line">#Harbor的启动和停止</span><br><span class="line">启动Harbor</span><br><span class="line"># docker-compose start</span><br><span class="line">停止Harbor</span><br><span class="line"># docker-comose stop</span><br><span class="line">重启Harbor</span><br><span class="line"># docker-compose restart</span><br><span class="line"></span><br><span class="line">#配置docker(https错误)</span><br><span class="line">#vim /usr/lib/systemd/system/docker.service</span><br><span class="line">ExecStart=/usr/bin/dockerd --insecure-registry=192.168.100.120</span><br><span class="line">#只加上--insecure-registry这个参数即可</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">创建/etc/docker/daemon.json文件，在文件中指定仓库地址</span><br><span class="line"># cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line">&#123; </span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://bv55mwyn.mirror.aliyuncs.com&quot;],</span><br><span class="line">&quot;insecure-registries&quot;:[&quot;192.168.100.120&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">然后重启docker</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Harbor </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>systemd-logind导致ssh登录缓慢</title>
      <link href="/2018/12/11/systemd-causes-high-CPU-load.html"/>
      <url>/2018/12/11/systemd-causes-high-CPU-load.html</url>
      <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>通过SSH登录服务器CentOS7时异常缓慢，发现机上systemd-logind进程导致cpu占满100%的问题，使得并且消耗资源。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>systemd-logind主要功能是为每一个登陆session创建一个systemd角度的cgroup管理对象，更方便对session使用cgroup，也是一个systemd BUG<br>详情1：<a href="https://github.com/systemd/systemd/issues/1961" target="_blank" rel="noopener">https://github.com/systemd/systemd/issues/1961</a><br>详情2：<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1439989" target="_blank" rel="noopener">https://bugzilla.redhat.com/show_bug.cgi?id=1439989</a></p><a id="more"></a><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>清除/清除所有范围文件和已加载的活动已放弃会话：</p><p>清理systemd中已放弃的会话：</p><p>删除会话文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /run/systemd/system -name &quot;session-*.scope&quot; -delete</span><br></pre></td></tr></table></figure></p><p>删除会话目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /run/systemd/system/session*scope*</span><br></pre></td></tr></table></figure></p><p>删除已放弃的会话<br>此命令可能会终止会话范围内的进程，因此请小心使用此命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl | grep &quot;abandoned&quot; | grep -e &quot;-[[:digit:]]&quot; | sed &quot;s/\.scope.*/.scope/&quot; | xargs systemctl stop</span><br></pre></td></tr></table></figure></p><p>脚本形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vi /root/cleanup_systemd_sessions.sh</span><br><span class="line"></span><br><span class="line">#!/bin/bash</span><br><span class="line">## cleanup_systemd_sessions.sh </span><br><span class="line"></span><br><span class="line">echo &quot;Stopping abandoned sessions&quot; </span><br><span class="line">systemctl | grep abandoned | grep -e &quot;[[:digit:]]&quot; | sed &quot;s/.scope.*/.scope/&quot; | xargs --no-run-if-empty systemctl stop </span><br><span class="line"></span><br><span class="line">cd /run/systemd/system/ || exit 1 </span><br><span class="line">for i in session-*.scope; do </span><br><span class="line">! systemctl status &quot;$i&quot; &gt;/dev/null 2&gt;&amp;1 || continue </span><br><span class="line">echo &quot;Removing /run/systemd/system/$&#123;i&#125;*&quot; &gt;&amp;2 </span><br><span class="line">rm -rf &quot;$&#123;i&#125;&quot; &quot;$&#123;i&#125;.d&quot; </span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chmod +x /root/cleanup_systemd_sessions.sh</span><br><span class="line">0 * * * * /root/cleanup_systemd_sessions.sh</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 日常问题处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> systemd-logind </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7 yum 安装mysql 5.6</title>
      <link href="/2018/11/24/yum-install-mysql5-6.html"/>
      <url>/2018/11/24/yum-install-mysql5-6.html</url>
      <content type="html"><![CDATA[<h1 id="下载-MySQL-Yum-Repository"><a href="#下载-MySQL-Yum-Repository" class="headerlink" title="下载 MySQL Yum Repository"></a>下载 MySQL Yum Repository</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="添加-MySQL-Yum-Repository"><a href="#添加-MySQL-Yum-Repository" class="headerlink" title="添加 MySQL Yum Repository"></a>添加 MySQL Yum Repository</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure><h1 id="验证下是否添加成功"><a href="#验证下是否添加成功" class="headerlink" title="验证下是否添加成功"></a>验证下是否添加成功</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br></pre></td></tr></table></figure><h1 id="选择要启用-MySQL-版本"><a href="#选择要启用-MySQL-版本" class="headerlink" title="选择要启用 MySQL 版本"></a>选择要启用 MySQL 版本</h1><p>查看 MySQL 版本，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist all | grep mysql</span><br></pre></td></tr></table></figure></p><p>可以看到 5.5， 5.7 版本是默认禁用的，因为现在最新的稳定版是 5.6</p><p>可以通过类似下面的语句来启动某些版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --disable mysql56-community</span><br><span class="line">yum-config-manager --enable mysql57-community-dmr</span><br></pre></td></tr></table></figure></p><p>或者通过修改 /etc/yum.repos.d/mysql-community.repo 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Enable to use MySQL 5.6</span><br><span class="line">[mysql56-community]</span><br><span class="line">name=MySQL 5.6 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:/etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure></p><p>其中 enabled=0 是指禁用，enabled=1 指启用。<br>注意： 任何时候，只能启用一个版本。</p><h1 id="通过-Yum-来安装-MySQL"><a href="#通过-Yum-来安装-MySQL" class="headerlink" title="通过 Yum 来安装 MySQL"></a>通过 Yum 来安装 MySQL</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><h1 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><h1 id="MySQL-安全设置（设置密码）"><a href="#MySQL-安全设置（设置密码）" class="headerlink" title="MySQL 安全设置（设置密码）"></a>MySQL 安全设置（设置密码）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><h1 id="远程访问设置"><a href="#远程访问设置" class="headerlink" title="远程访问设置"></a>远程访问设置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;use mysql;  </span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO root@&quot;%&quot; IDENTIFIED BY &quot;root&quot;;    //为root添加远程连接的能力  </span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><h1 id="数据存储位置更改"><a href="#数据存储位置更改" class="headerlink" title="数据存储位置更改"></a>数据存储位置更改</h1><p>先关闭数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -rp /var/lib/mysql /data/</span><br><span class="line"></span><br><span class="line">-p：源目录或者文件的属性保留</span><br></pre></td></tr></table></figure><p>修改/etc/my.cnf文件</p>]]></content>
      
      <categories>
          
          <category> 运维部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>平滑升级nginx1.14.1以支持http2.0</title>
      <link href="/2018/11/20/nginx-gcc-http2-0.html"/>
      <url>/2018/11/20/nginx-gcc-http2-0.html</url>
      <content type="html"><![CDATA[<h1 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h1><p>HTTP/2也被称为HTTP 2.0，是最新的HTTP协议。目前，Chrome、 IE11、Safari以及Firefox 等主流浏览器已经支持 HTTP/2协议。HTTP/2优化了性能，兼容了HTTP/1.1的语义，与SPDY相似，与HTTP/1.1有巨大区别。</p><p>SPDY是Google开发的基于TCP的应用层协议，用以最小化网络延迟，提升网络速度，优化用户的网络使用体验。SPDY并不是一种用于替代HTTP的协议，而是对HTTP协议的增强。新协议的功能包括数据流的多路复用、请求优先级以及HTTP报头压缩，与HTTP/2相似。</p><p>HTTP/2的优势</p><ol><li>二进制协议：相比于HTTP 1.x 基于文本的解析，HTTP/2将所有的传输信息分割为更小的消息和帧，并对它们采用二进制格式编码。基于二进制可以让协议有更多的扩展性，比如引入了帧来传输数据和指令。</li><li>内容安全：HTTP/2基于HTTPS，因此天然具有安全特性。通过HTTP/2的特性可以避免单纯使用HTTPS的性能下降。</li><li>多路复用（MultiPlexing）：通过该功能，在一条连接上，您的浏览器可以同时发起无数个请求，并且响应可以同时返回。另外，多路复用中支持了流的优先级（Stream dependencies）设置，允许客户端告诉服务器哪些内容是更优先级的资源，可以优先传输。</li><li>Header压缩（Header compression）：HTTP请求头带有大量信息，而且每次都要重复发送。HTTP/2 采用HPACK格式进行压缩传输，通讯双方各自缓存一份头域索引表，相同的消息头只发送索引号，从而提高效率和速度。</li><li>服务端推送（Server push）：同SPDY一样，HTTP/2 也具有客户端推送功能。目前，有大多数网站已经启用HTTP/2，如淘宝。使用Chrome浏览器登陆控制台，您可以查看是否启用 HTTP/2 。</li></ol><a id="more"></a><h1 id="升级HTTP2必要条件"><a href="#升级HTTP2必要条件" class="headerlink" title="升级HTTP2必要条件"></a>升级HTTP2必要条件</h1><ol><li>nginx 1.9.5版本以上</li><li>nginx基于1.0.2以上版本的openssl编译</li><li>必须支持https</li></ol><h1 id="升级openssl"><a href="#升级openssl" class="headerlink" title="升级openssl"></a>升级openssl</h1><p>openssl官网地址：<a href="https://www.openssl.org/source/" target="_blank" rel="noopener">https://www.openssl.org/source/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 下载openssl</span><br><span class="line">wget http://www.openssl.org/source/openssl-1.0.2p.tar.gz</span><br><span class="line">tar -zxvf openssl-1.0.2p.tar.gz</span><br><span class="line">cd  openssl-1.0.2p</span><br><span class="line">./config shared zlib</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"># 修改历史的OpenSSL文件设置备份</span><br><span class="line">mv /usr/bin/openssl /usr/bin/openssl.old</span><br><span class="line">mv /usr/include/openssl /usr/include/openssl.old</span><br><span class="line"></span><br><span class="line"># 设置软连接使其使用新的OpenSSL版本 刚刚安装的OpenSSL默认安装在/usr/local/ssl</span><br><span class="line">ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl</span><br><span class="line">ln -s /usr/local/ssl/include/openssl /usr/include/openssl</span><br><span class="line"> </span><br><span class="line"># 更新动态链接库数据</span><br><span class="line">echo &quot;/usr/local/ssl/lib&quot; &gt;&gt; /etc/ld.so.conf</span><br><span class="line">ldconfig -v</span><br><span class="line"></span><br><span class="line"># OpenSSL版本信息</span><br><span class="line">openssl version -a</span><br></pre></td></tr></table></figure></p><h1 id="升级nginx"><a href="#升级nginx" class="headerlink" title="升级nginx"></a>升级nginx</h1><p>nginx官网地址：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 下载nginx</span><br><span class="line">wget http://nginx.org/download/nginx-1.14.1.tar.gz</span><br><span class="line">tar zxvf nginx-1.14.1.tar.gz</span><br><span class="line">cd nginx-1.14.1</span><br><span class="line">./configure --prefix=/usr/local/nginx --with-openssl=../openssl-1.0.2p --with-http_stub_status_module --with-http_v2_module --with-http_gzip_static_module --with-http_sub_module --with-pcre --with-http_ssl_module</span><br><span class="line"></span><br><span class="line"># 编译nginx</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"># 复制编译后的nginx到原nginx sbin目录下</span><br><span class="line">cd nginx-1.14.1</span><br><span class="line">cp objs/nginx /usr/local/nginx</span><br><span class="line"></span><br><span class="line"># nginx平滑升级</span><br><span class="line">make upgrade</span><br></pre></td></tr></table></figure><h1 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h1><p>配置文件增加以下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen 443 ssl http2；</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 运维部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在kubernetes-1.12.x上搭建prometheus-operator监控预警系统</title>
      <link href="/2018/11/17/kubernetes-1-12-x-deployment-prometheus-operator.html"/>
      <url>/2018/11/17/kubernetes-1-12-x-deployment-prometheus-operator.html</url>
      <content type="html"><![CDATA[<p>基于CoreOS开源的prometheus-operator监控系统，该监控系统比较全面，主要是集成grafana的监控模版，维护比较方便。由于项目开发迭代速度较快，部署方法可能会更新，必要时请参考官方文档。</p><p>官方git：<a href="https://github.com/coreos/prometheus-operator" target="_blank" rel="noopener">https://github.com/coreos/prometheus-operator</a></p><a id="more"></a><h1 id="部署Prometheus-Operator"><a href="#部署Prometheus-Operator" class="headerlink" title="部署Prometheus Operator"></a>部署Prometheus Operator</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coreos/prometheus-operator.git</span><br><span class="line">cd prometheus-operator</span><br><span class="line"></span><br><span class="line">#为了配合其他组件，可以将namespace默认为default修改为monitoring</span><br><span class="line">kubectl apply -f bundle.yaml</span><br></pre></td></tr></table></figure><h1 id="部署grafana-alternanager-kube-status-meric"><a href="#部署grafana-alternanager-kube-status-meric" class="headerlink" title="部署grafana alternanager kube-status-meric"></a>部署grafana alternanager kube-status-meric</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd prometheus-operator/contrib/kube-prometheus/manifests</span><br><span class="line">kubectl apply -f .</span><br></pre></td></tr></table></figure><p>部署成功，如图所示<br><img src="/images/20181117104620.png" width="100%" height="100%"></p><h1 id="修改访问方式"><a href="#修改访问方式" class="headerlink" title="修改访问方式"></a>修改访问方式</h1><p>把svc的访问方式改为NodePort模式,使用kubectl edit svc svcname方式修改，或者修改manifests文件夹下的yaml相关文件，如图所示<br><img src="/images/20181117105045.png" width="100%" height="100%"></p><h1 id="访问grafana"><a href="#访问grafana" class="headerlink" title="访问grafana"></a>访问grafana</h1><p>部署成功，如图所示<br><img src="/images/20181117104928.png" width="100%" height="100%"></p>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在kubernetes-1.12.x上搭建EFK日志分析平台</title>
      <link href="/2018/11/16/setup-efk-on-kubernetes-1-12-x.html"/>
      <url>/2018/11/16/setup-efk-on-kubernetes-1-12-x.html</url>
      <content type="html"><![CDATA[<p>EFK 插件是kubernetes项目的一个日志解决方案，它包括三个组件：Elasticsearch, Fluentd, Kibana。</p><ul><li><p>Elasticsearch 是日志存储和日志搜索引擎</p></li><li><p>Fluentd 负责把k8s集群的日志发送给 Elasticsearch</p></li><li><p>Kibana 则是可视化界面查看和检索存储在 Elasticsearch 的数据</p><a id="more"></a><p>官方EFK地址：<a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/fluentd-elasticsearch" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/fluentd-elasticsearch</a></p></li></ul><p>由于官方部署方案存在elasticsearch存储模式为emptyDir，国内下载镜像不能成功，部署Fluentd，还需要添加标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes node2 beta.kubernetes.io/fluentd-ds-ready=true</span><br></pre></td></tr></table></figure></p><p>问题也有可能出现Fluentd镜像不可用等问题，部署起来操作比较繁琐。因此本次搭建EFK采用Elasticsearch、Kibana单独部署，独立于容器，Fluentd采用官方的daemonset部署方式。</p><h1 id="部署java"><a href="#部署java" class="headerlink" title="部署java"></a>部署java</h1><p>java 版本需要1.8以上</p><p>添加java环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_161/</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH</span><br><span class="line">export LASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CLASSPATH</span><br></pre></td></tr></table></figure></p><h1 id="部署Elasticsearch"><a href="#部署Elasticsearch" class="headerlink" title="部署Elasticsearch"></a>部署Elasticsearch</h1><p>添加仓库源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/elasticsearch.repo</span><br><span class="line"></span><br><span class="line">[elasticsearch-6.x]</span><br><span class="line">name=Elasticsearch repository for 6.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br></pre></td></tr></table></figure></p><p>安装Elasticsearch并启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install elasticsearch</span><br><span class="line">systemctl start elasticsearch</span><br></pre></td></tr></table></figure></p><p>检查es健康状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@public03 efk]# curl http://172.16.0.17:9200/_cat/health</span><br><span class="line">1542354774 07:52:54 my-cluster yellow 1 1 381 381 0 0 370 0 - 50.7%</span><br></pre></td></tr></table></figure></p><h1 id="部署Kibana"><a href="#部署Kibana" class="headerlink" title="部署Kibana"></a>部署Kibana</h1><p>添加仓库源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/kibana.repo</span><br><span class="line"></span><br><span class="line">[kibana-6.x]</span><br><span class="line">name=Kibana repository for 6.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br></pre></td></tr></table></figure></p><p>安装kibana并启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install kibana</span><br><span class="line">systemctl start kibana</span><br></pre></td></tr></table></figure></p><h1 id="部署Fluentd"><a href="#部署Fluentd" class="headerlink" title="部署Fluentd"></a>部署Fluentd</h1><p>官方仓库地址：<a href="https://github.com/fluent/fluentd-kubernetes-daemonset" target="_blank" rel="noopener">https://github.com/fluent/fluentd-kubernetes-daemonset</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 下载部署文件</span><br><span class="line">wget https://raw.githubusercontent.com/fluent/fluentd-kubernetes-daemonset/master/fluentd-daemonset-cloudwatch-rbac.yaml</span><br><span class="line"></span><br><span class="line"># 修改权限，在env添加如下配置</span><br><span class="line">- name: FLUENT_UID</span><br><span class="line">  value: &quot;0&quot;</span><br><span class="line"></span><br><span class="line">修改elasticsearch连接地址</span><br><span class="line">- name:  FLUENT_ELASTICSEARCH_HOST</span><br><span class="line">  value: &quot;172.16.0.17&quot;</span><br></pre></td></tr></table></figure><p>如设置环境FLUENT_UID为0，启动会提示权限不足。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2018-11-16 06:48:42 +0000 [error]: unexpected error error_class=Errno::EACCES error=#&lt;Errno::EACCES: Permission denied @ rb_sysopen - /var/log/fluentd-containers.log.pos&gt;</span><br><span class="line">2018-11-16 06:48:42 +0000 [error]: /fluentd/vendor/bundle/ruby/2.4.0/gems/fluentd-0.12.43/lib/fluent/plugin/</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">2018-11-16 06:48:42 +0000 [info]: shutting down output type=&quot;null&quot; plugin_id=&quot;object:2acb0bd67e18&quot;</span><br><span class="line">2018-11-16 06:48:42 +0000 [info]: process finished code=0</span><br><span class="line">2018-11-16 06:48:42 +0000 [warn]: process died within 1 second. exit.</span><br></pre></td></tr></table></figure></p><p>部署成功后，打开kibana设置索引，搜索如图所示：<br><img src="/images/20181116160340.png" width="100%" height="100%"></p>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> EFK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos 7 安装vsftpd</title>
      <link href="/2018/11/13/vsftp-deployment.html"/>
      <url>/2018/11/13/vsftp-deployment.html</url>
      <content type="html"><![CDATA[<h2 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vsftpd</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="配置信息-本地账户登录模式"><a href="#配置信息-本地账户登录模式" class="headerlink" title="配置信息(本地账户登录模式)"></a>配置信息(本地账户登录模式)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@web1 ~]# grep -v &quot;#&quot; /etc/vsftpd/vsftpd.conf </span><br><span class="line">anonymous_enable=NO</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_file=/var/log/xferlog</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">ascii_upload_enable=YES</span><br><span class="line">ascii_download_enable=YES</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line">listen=NO</span><br><span class="line">listen_ipv6=YES</span><br><span class="line"></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line">allow_writeable_chroot=YES</span><br></pre></td></tr></table></figure><h2 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@web1 vsftpd]# useradd -d /data/ftp -g ftp -s /sbin/nologin ftpuser</span><br><span class="line">[root@web1 data]# passwd ftpuser</span><br></pre></td></tr></table></figure><h2 id="新增文件权限"><a href="#新增文件权限" class="headerlink" title="新增文件权限"></a>新增文件权限</h2><p>如果希望某个用户可以访问根目录，把用户名加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@web1 ~]# echo &quot;ftpuser&quot; &gt;&gt; /etc/vsftpd/chroot_list</span><br></pre></td></tr></table></figure></p><h2 id="启动vsftp"><a href="#启动vsftp" class="headerlink" title="启动vsftp"></a>启动vsftp</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start  vsftpd</span><br><span class="line">systemctl enable vsftpd</span><br></pre></td></tr></table></figure><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>windows 如IE访问ftp会提示200 Switching to ASCII mode，解决方案是打开ie浏览器-工具-internet选项-高级-不勾选使用被动FTP即可。</p>]]></content>
      
      <categories>
          
          <category> 运维部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsftp </tag>
            
            <tag> ftp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes 命令记录</title>
      <link href="/2018/10/26/kubernetes-some-command.html"/>
      <url>/2018/10/26/kubernetes-some-command.html</url>
      <content type="html"><![CDATA[<h1 id="操作基本命令"><a href="#操作基本命令" class="headerlink" title="操作基本命令"></a>操作基本命令</h1><p>通过yaml文件创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f xxx.yaml （不建议使用，无法更新，必须先delete）</span><br><span class="line"></span><br><span class="line">kubectl apply -f xxx.yaml （创建+更新，可以重复使用）</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>通过yaml文件删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f xxx.yaml</span><br></pre></td></tr></table></figure></p><p>查看kube-system namespace下面的pod/svc/deployment 等等（-o wide  选项可以查看存在哪个对应的节点）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod/svc/deployment -n kube-system</span><br></pre></td></tr></table></figure></p><p>查看所有namespace下面的pod/svc/deployment等等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod/svc/deployment --all-namcpaces</span><br></pre></td></tr></table></figure></p><p>重启pod（无法删除对应的应用，因为存在deployment/rc之类的副本控制器，删除pod也会重新拉起来）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -n kube-system</span><br></pre></td></tr></table></figure></p><p>查看pod描述：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe pod XXX -n kube-system</span><br></pre></td></tr></table></figure></p><p>查看pod 日志 （如果pod有多个容器需要加-c 容器名）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs xxx -n kube-system</span><br></pre></td></tr></table></figure></p><p>删除应用（先确定是由说明创建的，再删除对应的kind）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete deployment xxx -n kube-system</span><br></pre></td></tr></table></figure></p><p>根据label删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod -l app=flannel -n kube-system</span><br></pre></td></tr></table></figure></p><p>扩容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale deployment spark-worker-deployment --replicas=8</span><br></pre></td></tr></table></figure></p><p>导出配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">导出proxy</span><br><span class="line">kubectl get ds -n kube-system -l k8s-app=kube-proxy -o yaml&gt;kube-proxy-ds.yaml</span><br><span class="line">导出kube-dns</span><br><span class="line">kubectl get deployment -n kube-system -l k8s-app=kube-dns -o yaml &gt;kube-dns-dp.yaml</span><br><span class="line">kubectl get services -n kube-system -l k8s-app=kube-dns -o yaml &gt;kube-dns-services.yaml</span><br><span class="line">导出所有 configmap</span><br><span class="line">kubectl get configmap -n kube-system -o wide -o yaml &gt; configmap.yaml</span><br></pre></td></tr></table></figure></p><p>Kubernetes Dashboard获取admin-user的访问令牌<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk &apos;&#123;print $1&#125;&apos;)</span><br></pre></td></tr></table></figure></p><h1 id="复杂操作命令"><a href="#复杂操作命令" class="headerlink" title="复杂操作命令"></a>复杂操作命令</h1><p>删除kube-system 下Evicted状态的所有pod：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-system |grep Evicted| awk &apos;&#123;print $1&#125;&apos;|xargs kubectl delete pod  -n kube-system</span><br></pre></td></tr></table></figure></p><h1 id="维护环境相关命令："><a href="#维护环境相关命令：" class="headerlink" title="维护环境相关命令："></a>维护环境相关命令：</h1><p>回滚记录历史<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl  apply -f xxx.yaml --record</span><br></pre></td></tr></table></figure></p><p>查看当前回滚状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout status statefulset xxx -w</span><br></pre></td></tr></table></figure></p><p>查看回滚历史版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout history statefulset xxx</span><br></pre></td></tr></table></figure></p><p>回滚到指定版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout undo statefulset xxx --to-revision=2</span><br></pre></td></tr></table></figure></p><p>重启kubelet服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure></p><p>修改启动参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br></pre></td></tr></table></figure></p><p>查看集群信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info</span><br></pre></td></tr></table></figure></p><p>查看各组件信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get componentstatuses</span><br></pre></td></tr></table></figure></p><p>查看kubelet进程启动参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep kubelet</span><br></pre></td></tr></table></figure></p><p>查看日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl -u kubelet -f</span><br></pre></td></tr></table></figure></p><p>设为不可调度状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl cordon node1</span><br></pre></td></tr></table></figure></p><p>将pod赶到其他节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl drain node1</span><br></pre></td></tr></table></figure></p><p>解除不可调度状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl uncordon node1</span><br></pre></td></tr></table></figure></p><p>master运行pod<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes master.k8s node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure></p><p>master不运行pod<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes master.k8s node-role.kubernetes.io/master=:NoSchedule</span><br></pre></td></tr></table></figure></p><p>pod Terminating 删不掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pod mpmt-user --namespace=lolaage --grace-period=0 --force</span><br></pre></td></tr></table></figure></p><p>获取节点列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#get nodes</span><br><span class="line">nodes=$(kubectl get nodes -o jsonpath=&apos;&#123;range.items[*].metadata&#125;&#123;.name&#125; &#123;end&#125;&apos;)</span><br><span class="line"></span><br><span class="line">#get nodes ip</span><br><span class="line">nodes=$(kubectl get nodes -o jsonpath=&apos;&#123;range .items[*].status.addresses[?(@.type==&quot;ExternalIP&quot;)]&#125;&#123;.address&#125; &#123;end&#125;&apos;)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 日常部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FFmpeg静态构建</title>
      <link href="/2018/10/23/ffmpeg-install-static-release.html"/>
      <url>/2018/10/23/ffmpeg-install-static-release.html</url>
      <content type="html"><![CDATA[<p>适用于Linux内核2.6.32及更高版本的FFmpeg的最新版本，由于通过yum安装版本过低，通过原代码编译过于繁杂，于是采用别人编译好的静态构建文件。</p><p>FFmpeg静态构建：<a href="https://www.johnvansickle.com/ffmpeg/" target="_blank" rel="noopener">https://www.johnvansickle.com/ffmpeg/</a></p><p>FFmpeg官网：<a href="http://ffmpeg.org/" target="_blank" rel="noopener">http://ffmpeg.org/</a></p><a id="more"></a><p>下载需要的版本即可，解压文件后将执行文件拷贝到/usr/bin/即可</p><p>或者添加环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">加入以下内容:</span><br><span class="line">export PATH=&quot;/usr/local/ffmpeg:$PATH&quot;</span><br><span class="line"></span><br><span class="line">然后保存并运行source /etc/profile</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 日常部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux进程出现D状态</title>
      <link href="/2018/10/18/hung-task-timeout-secs.html"/>
      <url>/2018/10/18/hung-task-timeout-secs.html</url>
      <content type="html"><![CDATA[<h1 id="问题状态"><a href="#问题状态" class="headerlink" title="问题状态"></a>问题状态</h1><p>生产环境使用了开源软件srs服务来调取实时视频，但是调取时提示出现了暂无数据，请稍后再试的错误，一直调取不到视频信息。<br><img src="/images/20181018140643.png" width="100%" height="100%"><br><a id="more"></a></p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>查看了srs服务、文件服务、通信服务是否正常，云服务器负载情况，内存使用情况，网络情况，最后发现srs服务器进程状态为D，进程无法用 kill 杀掉，导致了生产环境不可用。<br><img src="/images/20181018141216.png" width="100%" height="100%"></p><p>ps 的手册里说 D 状态是 uninterruptible sleep，Linux 进程有两种睡眠状态，一种 interruptible sleep，处在这种睡眠状态的进程是可以通过给它发信号来唤醒的，比如发 HUP 信号给 nginx 的 master 进程可以让 nginx 重新加载配置文件而不需要重新启动 nginx 进程；另外一种睡眠状态是 uninterruptible sleep，处在这种状态的进程不接受外来的任何信号，这也是为什么之前我无法用 kill 杀掉这些处于 D 状态的进程，无论是 kill, kill -9 还是 kill -15，因为它们压根儿就不受这些信号的支配。</p><p>进程为什么会被置于 uninterruptible sleep 状态呢？处于 uninterruptible sleep 状态的进程通常是在等待 IO，比如磁盘 IO，网络 IO，其他外设 IO，如果进程正在等待的 IO 在较长的时间内都没有响应，那么就很会不幸地被 ps 看到了，同时也就意味着很有可能有 IO 出了问题，可能是外设本身出了故障，也可能是比如挂载的远程文件系统已经不可访问了，我这里遇到的问题就是由 down 掉的 NFS 服务器引起的。</p><p>正是因为得不到 IO 的相应，进程才进入了 uninterruptible sleep 状态，所以要想使进程从 uninterruptible sleep 状态恢复，就得使进程等待的 IO 恢复。</p><h2 id="查看message日志文件找到相关内核报错日志"><a href="#查看message日志文件找到相关内核报错日志" class="headerlink" title="查看message日志文件找到相关内核报错日志"></a>查看message日志文件找到相关内核报错日志</h2><p><img src="/images/20181018091126.png" width="100%" height="100%"></p><p>默认情况下， Linux会最多使用40%的可用内存作为文件系统缓存。当超过这个阈值后，文件系统会把将缓存中的内存全部写入磁盘， 导致后续的IO请求都是同步的。将缓存写入磁盘时，有一个默认120秒的超时时间。 出现上面的问题的原因是IO子系统的处理速度不够快，不能在120秒将缓存中的数据全部写入磁盘。IO系统响应缓慢，导致越来越多的请求堆积，最终系统内存全部被占用，导致系统失去响应。</p><h2 id="从系统中看下-hung-task-相关的参数及其参数值"><a href="#从系统中看下-hung-task-相关的参数及其参数值" class="headerlink" title="从系统中看下 hung_task 相关的参数及其参数值"></a>从系统中看下 hung_task 相关的参数及其参数值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@aliy-nt1 ~]# sysctl -a | grep &apos;vm.dirty&apos;</span><br><span class="line">vm.dirty_background_bytes = 0</span><br><span class="line">vm.dirty_background_ratio = 10</span><br><span class="line">vm.dirty_bytes = 0</span><br><span class="line">vm.dirty_expire_centisecs = 3000</span><br><span class="line">vm.dirty_ratio = 20</span><br><span class="line">vm.dirty_writeback_centisecs = 500</span><br><span class="line"></span><br><span class="line">[root@aliy-nt1 ~]# sysctl -a | grep hung</span><br><span class="line">kernel.hung_task_check_count = 4194304</span><br><span class="line">kernel.hung_task_panic = 0</span><br><span class="line">kernel.hung_task_timeout_secs = 120</span><br><span class="line">kernel.hung_task_warnings = 0</span><br></pre></td></tr></table></figure><h2 id="通过sar查看一段时间内的cpu使用情况，CPU使用率不高。"><a href="#通过sar查看一段时间内的cpu使用情况，CPU使用率不高。" class="headerlink" title="通过sar查看一段时间内的cpu使用情况，CPU使用率不高。"></a>通过sar查看一段时间内的cpu使用情况，CPU使用率不高。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sar -f /var/log/sa/sa17</span><br></pre></td></tr></table></figure><p><img src="/images/20181018101248.png" width="100%" height="100%"></p><h2 id="查看内存，内存使用也不高"><a href="#查看内存，内存使用也不高" class="headerlink" title="查看内存，内存使用也不高"></a>查看内存，内存使用也不高</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sar -r -f /var/log/sa/sa17</span><br></pre></td></tr></table></figure><p><img src="/images/20181018101935.png" width="100%" height="100%"></p><h2 id="查看硬盘IO"><a href="#查看硬盘IO" class="headerlink" title="查看硬盘IO"></a>查看硬盘IO</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sar -d -f /var/log/sa/sa17</span><br></pre></td></tr></table></figure><p><img src="/images/20181018103620.png" width="100%" height="100%"></p><h2 id="检查磁盘分区是否存在坏块，发现没有坏块情况"><a href="#检查磁盘分区是否存在坏块，发现没有坏块情况" class="headerlink" title="检查磁盘分区是否存在坏块，发现没有坏块情况"></a>检查磁盘分区是否存在坏块，发现没有坏块情况</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@aliy-nt1 ~]# /sbin/badblocks -v /dev/vda</span><br><span class="line">正在检查从 0 到 41943039的块</span><br><span class="line">Checking for bad blocks (read-only test): done                                                 </span><br><span class="line">Pass completed, 0 bad blocks found. (0/0/0 errors)</span><br><span class="line">[root@aliy-nt1 ~]# /sbin/badblocks -v /dev/vdb</span><br><span class="line">正在检查从 0 到 41943039的块</span><br><span class="line">Checking for bad blocks (read-only test): done                                                 </span><br><span class="line">Pass completed, 0 bad blocks found. (0/0/0 errors)</span><br><span class="line">[root@aliy-nt1 ~]# /sbin/badblocks -v /dev/vdc</span><br><span class="line">正在检查从 0 到 104857599的块</span><br><span class="line">Checking for bad blocks (read-only test): done                                                 </span><br><span class="line">Pass completed, 0 bad blocks found. (0/0/0 errors)</span><br></pre></td></tr></table></figure><h1 id="查找网上解决方法如下："><a href="#查找网上解决方法如下：" class="headerlink" title="查找网上解决方法如下："></a>查找网上解决方法如下：</h1><p>根据应用程序情况，对vm.dirty_ratio，vm.dirty_background_ratio两个参数进行调优设置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># sysctl -w vm.dirty_ratio=10</span><br><span class="line"># sysctl -w vm.dirty_background_ratio=5</span><br><span class="line"># sysctl -p</span><br><span class="line"></span><br><span class="line">如果系统永久生效，修改/etc/sysctl.conf文件。加入如下两行：</span><br><span class="line">#vi /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">vm.dirty_background_ratio = 5</span><br><span class="line">vm.dirty_ratio = 10</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></p><p>但是观察了一段时间，进程依然状态会导致为D，查看了srs配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">listen              1935;</span><br><span class="line">max_connections     1000;</span><br><span class="line">srs_log_tank        file;</span><br><span class="line">srs_log_file        ./objs/srs.log;</span><br><span class="line">http_api &#123;</span><br><span class="line">    enabled         on;</span><br><span class="line">    listen          1985;</span><br><span class="line">&#125;</span><br><span class="line">http_server &#123;</span><br><span class="line">    enabled         on;</span><br><span class="line">    listen          8080;</span><br><span class="line">    dir             ./objs/nginx/html;</span><br><span class="line">#    crossdomain     on;</span><br><span class="line">&#125;</span><br><span class="line">stats &#123;</span><br><span class="line">    network         0;</span><br><span class="line">    disk            sda sdb xvda xvdb;</span><br><span class="line">&#125;</span><br><span class="line">vhost __defaultVhost__ &#123;</span><br><span class="line">    http_remux &#123;</span><br><span class="line">        enabled     on;</span><br><span class="line">        mount       [vhost]/[app]/[stream].flv;</span><br><span class="line">        hstrs       on;</span><br><span class="line">    &#125;</span><br><span class="line">#mix_correcton;</span><br><span class="line">http_hooks &#123;</span><br><span class="line">enabled         on;</span><br><span class="line">        on_publish      http://10.25.208.243:1241/callbackOnPublish;</span><br><span class="line">        on_unpublish    http://10.25.208.243:1241/callbackOnUnpublish;</span><br><span class="line">        on_play         http://10.25.208.243:1241/callbackOnPlay;</span><br><span class="line">        on_stop         http://10.25.208.243:1241/callbackOnStop;</span><br><span class="line">        on_dvr          http://10.25.208.243:1241/callbackOnDvr;</span><br><span class="line">&#125;</span><br><span class="line">        dvr &#123;</span><br><span class="line">                enabled         on;</span><br><span class="line">                dvr_path        /mnt/mov/[stream]-[timestamp].flv;</span><br><span class="line">                dvr_plan        session;</span><br><span class="line">                dvr_duration    30;</span><br><span class="line">                dvr_wait_keyframe       on;</span><br><span class="line">                time_jitter             full;</span><br><span class="line">        &#125;</span><br><span class="line">        hls &#123;</span><br><span class="line">                enabled         on;</span><br><span class="line">                hls_path        /mnt/mov;</span><br><span class="line">                hls_m3u8_file   [stream].m3u8;</span><br><span class="line">                hls_ts_file     [stream]-[seq].ts;</span><br><span class="line">                hls_fragment    10;</span><br><span class="line">                hls_window      60000;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>srs录制视频、语音是通过阿里云NFS文件服务挂载到本地/mnt/mov文件，作为临时视频中转服务，后期会自动上传到OSS对象存储服务，是否因为频繁的对该NFS读写IO性能导致srs出现hung呢？<br>查看相关文档，阿里云由此文档<br><a href="https://help.aliyun.com/knowledge_detail/53839.html?spm=a2c4g.11186623.4.7.jXaKcm" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/53839.html?spm=a2c4g.11186623.4.7.jXaKcm</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Linux nfs客户端对于同时发起的NFS请求数量进行了控制，若该参数配置较小会导致IO性能较差，请查看该参数：cat /proc/sys/sunrpc/tcp_slot_table_entries</span><br><span class="line"></span><br><span class="line">[root@aliy-nt1 srs]# cat /proc/sys/sunrpc/tcp_slot_table_entries</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">默认编译的内核该参数最大值为256，可适当提高该参数的值来取得较好的性能，请以root身份执行以下命令：</span><br><span class="line"></span><br><span class="line">echo &quot;options sunrpc tcp_slot_table_entries=128&quot; &gt;&gt; /etc/modprobe.d/sunrpc.conf</span><br><span class="line">echo &quot;options sunrpc tcp_max_slot_table_entries=128&quot; &gt;&gt;  /etc/modprobe.d/sunrpc.conf</span><br><span class="line">sysctl -w sunrpc.tcp_slot_table_entries=128</span><br><span class="line">修改完成后，您需要重新挂载文件系统或重启机器。</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 日常问题处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>部署Elasticsearch集群</title>
      <link href="/2018/10/10/elasticsearch-cluster.html"/>
      <url>/2018/10/10/elasticsearch-cluster.html</url>
      <content type="html"><![CDATA[<h1 id="什么是Elasticsearch集群？"><a href="#什么是Elasticsearch集群？" class="headerlink" title="什么是Elasticsearch集群？"></a>什么是Elasticsearch集群？</h1><p>顾名思义，Elasticsearch集群是一组连接在一起的一个或多个Elasticsearch节点实例。Elasticsearch集群的强大之处在于跨集群中所有节点的任务分配，搜索和索引。</p><p>可以为Elasticsearch集群中的节点分配不同的作业或职责：</p><ul><li><p>Data nodes 存储数据并执行与搜索和聚合等数据相关的操作</p></li><li><p>Master nodes 负责集群范围的管理和配置操作，例如添加和删除节点</p></li><li><p>Client nodes 将集群请求转发到主节点，并将与数据相关的请求转发给数据节点</p></li><li><p>Ingest nodes  用于在编制索引之前预处理文档</p></li></ul><p>默认情况下，会为每个节点自动分配一个唯一标识符或名称，用于管理目的，在多节点或群集环境中变得更加重要。</p><h1 id="安装Elasticsearch"><a href="#安装Elasticsearch" class="headerlink" title="安装Elasticsearch"></a>安装Elasticsearch</h1><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>Elasticsearch构建于Java之上，至少需要运行Java 8（1.8.0_131或更高版本）。因此，我们的第一步是在集群中的所有节点上安装Java 8。请注意，应在群集中的所有Elasticsearch节点上安装相同的版本。</p><h2 id="安装Elasticsearch节点"><a href="#安装Elasticsearch节点" class="headerlink" title="安装Elasticsearch节点"></a>安装Elasticsearch节点</h2><p>添加Elastic的签名密钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br></pre></td></tr></table></figure></p><p>添加仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/yum.repos.d/elasticsearch.repo</span><br><span class="line"></span><br><span class="line">[elasticsearch-6.x]</span><br><span class="line">name=Elasticsearch repository for 6.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br></pre></td></tr></table></figure></p><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install elasticsearch</span><br><span class="line">sudo /bin/systemctl daemon-reload</span><br><span class="line">sudo /bin/systemctl enable elasticsearch.service</span><br><span class="line">#sudo systemctl start elasticsearch.service</span><br><span class="line">#sudo systemctl stop elasticsearch.service</span><br></pre></td></tr></table></figure></p><h1 id="配置Elasticsearch集群"><a href="#配置Elasticsearch集群" class="headerlink" title="配置Elasticsearch集群"></a>配置Elasticsearch集群</h1><p>对于每个节点，请打开Elasticsearch配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/elasticsearch/elasticsearch.yml</span><br></pre></td></tr></table></figure></p><p>然后输入以下配置（用您的节点IP替换IP）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#give your cluster a name.</span><br><span class="line">cluster.name: my-cluster</span><br><span class="line"></span><br><span class="line">#give your nodes a name (change node number from node to node).</span><br><span class="line">node.name: &quot;es-node-1&quot;</span><br><span class="line"></span><br><span class="line">#define node 1 as master-eligible:</span><br><span class="line">node.master: true</span><br><span class="line"></span><br><span class="line">#define nodes 2 and 3 as data nodes:</span><br><span class="line">node.data: true</span><br><span class="line"></span><br><span class="line">#enter the private IP and port of your node:</span><br><span class="line">network.host: 172.11.61.27</span><br><span class="line">http.port: 9200</span><br><span class="line"></span><br><span class="line">#detail the private IPs of your nodes:</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;172.11.61.27&quot;, &quot;172.31.22.131&quot;,&quot;172.31.32.221&quot;]</span><br></pre></td></tr></table></figure></p><h1 id="运行Elasticsearch集群"><a href="#运行Elasticsearch集群" class="headerlink" title="运行Elasticsearch集群"></a>运行Elasticsearch集群</h1><p>对于每个实例，运行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service elasticsearch start</span><br></pre></td></tr></table></figure></p><h1 id="用于生产的Elasticsearch集群配置"><a href="#用于生产的Elasticsearch集群配置" class="headerlink" title="用于生产的Elasticsearch集群配置"></a>用于生产的Elasticsearch集群配置</h1><h2 id="避免脑裂"><a href="#避免脑裂" class="headerlink" title="避免脑裂"></a>避免脑裂</h2><p>脑裂情况是当集群中的节点之间的通信由于网络故障或其中一个节点的内部故障而失败时。在这种情况下，多个节点可能认为它是主节点，导致数据不一致状态。</p><p>为了避免这种情况，我们可以更改Elasticsearch配置文件中的discovery.zen.minimum_master_nodes指令，该指令确定需要通信的多少个节点（仲裁）来选择主节点。</p><p>确定此数字的最佳做法是使用以下公式来确定此数字：N/2+1,N是群集中符合条件的主节点数。然后，将结果向下舍入到最接近的整数。<br>对于具有三个节点的集群，则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">discovery.zen.minimum_master_nodes: 2</span><br></pre></td></tr></table></figure></p><h2 id="调整JVM堆大小"><a href="#调整JVM堆大小" class="headerlink" title="调整JVM堆大小"></a>调整JVM堆大小</h2><p>为确保Elasticsearch具有足够的操作余地，应调整默认的JVM堆大小<br>根据经验，最大堆大小应设置为RAM的50％，但不超过32GB（由于Java指针在较大的堆中效率低下）。Elastic还建议最大和最小堆大小的值相同。<br>可以使用jvm.options文件中的Xmx和Xms设置来配置这些值.</p><h2 id="禁用交换"><a href="#禁用交换" class="headerlink" title="禁用交换"></a>禁用交换</h2><p>交换未使用的内存是一种已知的行为，但在Elasticsearch的上下文中可能导致断开连接，性能不佳以及一般情况下 - 一个不稳定的集群。</p><p>为了避免交换，您可以禁用所有交换（如果Elasticsearch是服务器上运行的唯一服务，则建议使用），或者您可以使用mlockall将Elasticsearch进程锁定到RAM。</p><p>为此，请在群集中的所有节点上打开Elasticsearch配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/elasticsearch/elasticsearch.yml</span><br><span class="line"></span><br><span class="line">取消注释以下行：</span><br><span class="line">bootstrap.mlockall: true</span><br><span class="line"></span><br><span class="line">vim /etc/default/elasticsearch</span><br><span class="line">进行以下配置</span><br><span class="line">MAX_LOCKED_MEMORY=unlimited</span><br></pre></td></tr></table></figure></p><h2 id="调整虚拟内存"><a href="#调整虚拟内存" class="headerlink" title="调整虚拟内存"></a>调整虚拟内存</h2><p>为避免耗尽虚拟内存，请增加mmap计数的限制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">vm.max_map_count=262144</span><br><span class="line">在DEB/RPM上，自动配置此设置。</span><br></pre></td></tr></table></figure></p><h2 id="增加打开文件描述符限制"><a href="#增加打开文件描述符限制" class="headerlink" title="增加打开文件描述符限制"></a>增加打开文件描述符限制</h2><p>另一个重要配置是打开文件描述符的限制。由于Elasticsearch使用了大量文件描述符，因此必须确保定义的限制足够，否则最终可能会丢失数据。</p><p>此设置的常见建议是65,536或更高。在DEB/RPM上，默认设置已经配置为满足此要求，但您当然可以对其进行微调。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">设置限制</span><br><span class="line">- nofile 65536</span><br></pre></td></tr></table></figure></p><h1 id="Elasticsearch集群API"><a href="#Elasticsearch集群API" class="headerlink" title="Elasticsearch集群API"></a>Elasticsearch集群API</h1><p>查询当前所有的索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;localhost:9200/_cat/indices?v&apos;</span><br></pre></td></tr></table></figure></p><p>查看node情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;localhost:9200/_cat/nodes?v&apos;</span><br></pre></td></tr></table></figure></p><p>查看群集的常规信息并衡量其运行状况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &apos;localhost:9200/_cluster/health?pretty&apos;</span><br><span class="line">curl &apos;localhost:9200/_cat/health?v&apos;</span><br><span class="line">绿色表示一切正常, 黄色表示所有的数据可用但是部分副本还没有分配,红色表示部分数据因为某些原因不可用</span><br></pre></td></tr></table></figure></p><p>查看整个群集的详细状态报告<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &apos;localhost:9200/_cluster/state?pretty&apos;</span><br></pre></td></tr></table></figure></p><p>监控整个群集的性能指标<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &apos;localhost:9200/_cluster/stats?human&amp;pretty&apos;</span><br></pre></td></tr></table></figure></p><p>检查群集中特定节点的度量标准<br>所有节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &apos;localhost:9200/_nodes/stats?pretty&apos;</span><br></pre></td></tr></table></figure></p><p>特定节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &apos;localhost:9200/_nodes/node-1/stats?pretty&apos;</span><br></pre></td></tr></table></figure></p><p>仅有索引的统计数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET &apos;localhost:9200/_nodes/stats/indices?pretty&apos;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一些有用的命令汇总</title>
      <link href="/2018/10/10/some-command-useful.html"/>
      <url>/2018/10/10/some-command-useful.html</url>
      <content type="html"><![CDATA[<p>一些工作上有时会用到的命令，以便需要时快速查看</p><a id="more"></a><p>Mysql统计所有表数据量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT TABLE_NAME, TABLE_ROWS FROM `information_schema`.`tables`  WHERE `table_schema` = &apos;YOUR_DB_NAME&apos;;</span><br></pre></td></tr></table></figure></p><p>postgresql kill指定数据库所有进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select pg_terminate_backend(pid) from  (select pid from pg_stat_activity where datname = &apos;2bulugis&apos;) a;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell脚本定期重启tomcat</title>
      <link href="/2018/09/30/regular-restart-tomcat.html"/>
      <url>/2018/09/30/regular-restart-tomcat.html</url>
      <content type="html"><![CDATA[<p>因tomcat项目运作，占用内存过大，无法自动释放，只能定期重启项目解决。<br><a id="more"></a><br>shell脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">. /etc/profile</span><br><span class="line">pid=`ps aux | grep tomcat | grep -v grep | grep new_2bulu | awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">dat=`date &apos;+%Y-%m-%d %H:%M:%S&apos;`</span><br><span class="line"> </span><br><span class="line">echo $dat</span><br><span class="line">echo $pid</span><br><span class="line"> </span><br><span class="line">if [ -n &quot;$pid&quot; ]</span><br><span class="line">then</span><br><span class="line">&#123;</span><br><span class="line">   echo ===========shutdown================</span><br><span class="line">   /data/application/nginx_tomcat/new_2bulu/bin/shutdown.sh</span><br><span class="line">   sleep 1</span><br><span class="line">   pid=`ps aux | grep tomcat | grep -v grep | grep new_2bulu| awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">   if [ -n &quot;$pid&quot; ]</span><br><span class="line">   then</span><br><span class="line">    &#123;</span><br><span class="line">      sleep 1</span><br><span class="line">      echo ========kill tomcat==============</span><br><span class="line">      kill -9 $pid</span><br><span class="line">    &#125;</span><br><span class="line">   fi</span><br><span class="line">   sleep 1</span><br><span class="line">   echo ===========startup.sh==============</span><br><span class="line">   /data/application/nginx_tomcat/new_2bulu/bin/startup.sh</span><br><span class="line"> &#125;</span><br><span class="line">else</span><br><span class="line">echo ===========startup.sh==============</span><br><span class="line">/data/application/nginx_tomcat/new_2bulu/bin/startup.sh</span><br><span class="line"> </span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 运维部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用kubeadm安装kubernetes 1.12.x</title>
      <link href="/2018/09/29/install-kubeadm-kubernetes-1-12-0.html"/>
      <url>/2018/09/29/install-kubeadm-kubernetes-1-12-0.html</url>
      <content type="html"><![CDATA[<p>基本安装方法与其他版本安装无异，只是镜像名更改了，去掉了amd64</p><a id="more"></a><h1 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h1><h2 id="验证MAC地址和product-uuid对于每个节点都是唯一的"><a href="#验证MAC地址和product-uuid对于每个节点都是唯一的" class="headerlink" title="验证MAC地址和product_uuid对于每个节点都是唯一的"></a>验证MAC地址和product_uuid对于每个节点都是唯一的</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip link或获取网络接口的MAC地址ifconfig -a</span><br><span class="line">sudo cat /sys/class/dmi/id/product_uuid</span><br></pre></td></tr></table></figure><h2 id="检查端口是否开放"><a href="#检查端口是否开放" class="headerlink" title="检查端口是否开放"></a>检查端口是否开放</h2><p>ps 在一次客户提供的服务器安装k8s，无法操作k8s读取日志文件，才发生端口被禁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">TCP6443Kubernetes API server</span><br><span class="line">TCP 2379-2380etcd server client API</span><br><span class="line">TCP 10250 Kubelet API</span><br><span class="line">TCP 10251kube-scheduler</span><br><span class="line">TCP 10252kube-controller-manager</span><br><span class="line"></span><br><span class="line">node</span><br><span class="line">TCP 10250Kubelet API</span><br><span class="line">TCP 30000-32767NodePort Services</span><br></pre></td></tr></table></figure></p><h2 id="关闭Selinux-firewalld"><a href="#关闭Selinux-firewalld" class="headerlink" title="关闭Selinux/firewalld"></a>关闭Selinux/firewalld</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line">#以允许容器访问主机文件系统，例如pod网络所需</span><br><span class="line">sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config</span><br></pre></td></tr></table></figure><h2 id="关闭交换分区"><a href="#关闭交换分区" class="headerlink" title="关闭交换分区"></a>关闭交换分区</h2><h2 id="如采用云服务，可略过此步骤，云服务默认禁止使用交换分区，如阿里云、腾讯云、华为云"><a href="#如采用云服务，可略过此步骤，云服务默认禁止使用交换分区，如阿里云、腾讯云、华为云" class="headerlink" title="如采用云服务，可略过此步骤，云服务默认禁止使用交换分区，如阿里云、腾讯云、华为云"></a>如采用云服务，可略过此步骤，云服务默认禁止使用交换分区，如阿里云、腾讯云、华为云</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">cp -p /etc/fstab /etc/fstab.bak$(date &apos;+%Y%m%d%H%M%S&apos;)</span><br><span class="line">sed -i &quot;s/\/dev\/mapper\/rhel-swap/\#\/dev\/mapper\/rhel-swap/g&quot; /etc/fstab</span><br><span class="line">sed -i &quot;s/\/dev\/mapper\/centos-swap/\#\/dev\/mapper\/centos-swap/g&quot; /etc/fstab</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure><h2 id="网桥包经IPTables"><a href="#网桥包经IPTables" class="headerlink" title="网桥包经IPTables"></a>网桥包经IPTables</h2><p>由于iptables被绕过而导致流量路由不正确的问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure></p><h2 id="同步时间"><a href="#同步时间" class="headerlink" title="同步时间"></a>同步时间</h2><p>如时间不一致，会导致认证过期，提示cluster-info: x509: certificate has expired or is not yet valid<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntpdate</span><br><span class="line">ntpdate -u ntp1.aliyun.com</span><br></pre></td></tr></table></figure></p><h2 id="开启IPVS"><a href="#开启IPVS" class="headerlink" title="开启IPVS"></a>开启IPVS</h2><p>kubernets 1.12 默认更改为ipvs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yum install ipvsadm</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line"> </span><br><span class="line">#!/bin/bash</span><br><span class="line">ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4&quot;</span><br><span class="line">for kernel_module in \$&#123;ipvs_modules&#125;; do</span><br><span class="line"> /sbin/modinfo -F filename \$&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"> if [ $? -eq 0 ]; then</span><br><span class="line"> /sbin/modprobe \$&#123;kernel_module&#125;</span><br><span class="line"> fi</span><br><span class="line">done</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules &amp;&amp; bash /etc/sysconfig/modules/ipvs.modules &amp;&amp; lsmod | grep ip_vs</span><br></pre></td></tr></table></figure></p><h1 id="安装dockre-ce"><a href="#安装dockre-ce" class="headerlink" title="安装dockre ce"></a>安装dockre ce</h1><p>目前官方文档提供已支持docker 1806<br>Kubernetes 1.12.3版本暂时不支持最新的Docker 18.09<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 卸载原docker</span><br><span class="line">yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine</span><br><span class="line"># 安装docker</span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y docker-ce</span><br><span class="line"></span><br><span class="line"># 增加加速器</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://bv55mwyn.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动docker</span><br><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure></p><h1 id="安装kubeadm"><a href="#安装kubeadm" class="headerlink" title="安装kubeadm"></a>安装kubeadm</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 添加阿里云仓库</span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 安装kubeadm</span><br><span class="line">yum install -y kubelet-1.12.3 kubeadm-1.12.3 kubectl-1.12.3</span><br><span class="line"></span><br><span class="line"># 启动kubectl</span><br><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><h1 id="安装所需镜像"><a href="#安装所需镜像" class="headerlink" title="安装所需镜像"></a>安装所需镜像</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 编写一个脚本执行，通过阿里云镜像服务拉取谷歌镜像并tag</span><br><span class="line">#如安装kubernetes-version=v1.12.3，需要更改KUBE_VERSION=v1.12.3</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">KUBE_VERSION=v1.12.3</span><br><span class="line">KUBE_PAUSE_VERSION=3.1</span><br><span class="line">ETCD_VERSION=3.2.24</span><br><span class="line">CORE_DNS_VERSION=1.2.2</span><br><span class="line"></span><br><span class="line">GCR_URL=k8s.gcr.io</span><br><span class="line">ALIYUN_URL=registry.cn-shenzhen.aliyuncs.com/hyman0603</span><br><span class="line"></span><br><span class="line">images=(kube-proxy:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-scheduler:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-controller-manager:$&#123;KUBE_VERSION&#125;</span><br><span class="line">kube-apiserver:$&#123;KUBE_VERSION&#125;</span><br><span class="line">pause:$&#123;KUBE_PAUSE_VERSION&#125;</span><br><span class="line">etcd:$&#123;ETCD_VERSION&#125;</span><br><span class="line">coredns:$&#123;CORE_DNS_VERSION&#125;)</span><br><span class="line"></span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">  docker pull $ALIYUN_URL/$imageName</span><br><span class="line">  docker tag  $ALIYUN_URL/$imageName $GCR_URL/$imageName</span><br><span class="line">  docker rmi $ALIYUN_URL/$imageName</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1 id="安装kubernetes-1-12-3"><a href="#安装kubernetes-1-12-3" class="headerlink" title="安装kubernetes 1.12.3"></a>安装kubernetes 1.12.3</h1><p>选择了kubernetes-version=v1.12.3，kubernetes镜像文件也需要对应一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=v1.12.3 --pod-network-cidr=10.244.0.0/16 ----apiserver-advertise-address=172.16.0.17</span><br></pre></td></tr></table></figure></p><h1 id="重置kubernets"><a href="#重置kubernets" class="headerlink" title="重置kubernets"></a>重置kubernets</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset</span><br><span class="line">ifconfig cni0 down</span><br><span class="line">ip link delete cni0</span><br><span class="line">ifconfig flannel.1 down</span><br><span class="line">ip link delete flannel.1</span><br><span class="line">rm -rf /var/lib/cni/</span><br></pre></td></tr></table></figure><h1 id="安装Pod-Network"><a href="#安装Pod-Network" class="headerlink" title="安装Pod Network"></a>安装Pod Network</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line">kubectl apply -f  kube-flannel.yml</span><br><span class="line"></span><br><span class="line">#如果Node有多个网卡的话，参考[flannel issues 39701](https://github.com/kubernetes/kubernetes/issues/39701)，目前需要在kube-flannel.yml中使用–iface参数指定集群主机内网网卡的名称，否则可能会出现dns无法解析。需要将kube-flannel.yml下载到本地，flanneld启动参数加上–iface=&lt;iface-name&gt;</span><br><span class="line"></span><br><span class="line">containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: quay.io/coreos/flannel:v0.10.0-amd64</span><br><span class="line">        command:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br></pre></td></tr></table></figure><h1 id="master-node参与工作负载"><a href="#master-node参与工作负载" class="headerlink" title="master node参与工作负载"></a>master node参与工作负载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe node node1 | grep Taint</span><br><span class="line">Taints:             node-role.kubernetes.io/master:NoSchedule</span><br><span class="line"></span><br><span class="line">kubectl taint nodes node1 node-role.kubernetes.io/master-</span><br><span class="line">node &quot;node1&quot; untainted</span><br></pre></td></tr></table></figure><h1 id="测试DNS"><a href="#测试DNS" class="headerlink" title="测试DNS"></a>测试DNS</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -it</span><br><span class="line">kubectl run --generator=deployment/apps.v1beta1 is DEPRECATED and will be removed in a future version. Use kubectl create instead.</span><br><span class="line">If you don&apos;t see a command prompt, try pressing enter.</span><br><span class="line">[ root@curl-5cc7b478b6-r997p:/ ]$ </span><br><span class="line"></span><br><span class="line">nslookup kubernetes.default</span><br><span class="line">Server:    10.96.0.10</span><br><span class="line">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      kubernetes.default</span><br><span class="line">Address 1: 10.96.0.1 kubernetes.default.svc.cluster.local</span><br></pre></td></tr></table></figure><h1 id="集群中移除Node"><a href="#集群中移除Node" class="headerlink" title="集群中移除Node"></a>集群中移除Node</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line">NAME      STATUS    ROLES     AGE       VERSION</span><br><span class="line">node1     Ready     master    26m       v1.12.0</span><br><span class="line">node2     Ready     &lt;none&gt;    2m        v1.12.0</span><br><span class="line"></span><br><span class="line">在master节点上执行：</span><br><span class="line">kubectl drain node2 --delete-local-data --force --ignore-daemonsets</span><br><span class="line">kubectl delete node node2</span><br><span class="line"></span><br><span class="line">在node2上执行：</span><br><span class="line">kubeadm reset</span><br><span class="line">ifconfig cni0 down</span><br><span class="line">ip link delete cni0</span><br><span class="line">ifconfig flannel.1 down</span><br><span class="line">ip link delete flannel.1</span><br><span class="line">rm -rf /var/lib/cni/</span><br><span class="line"></span><br><span class="line">在node1上执行：</span><br><span class="line"></span><br><span class="line">kubectl delete node node2</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7 升级内核</title>
      <link href="/2018/09/29/centos7-update-kernel.html"/>
      <url>/2018/09/29/centos7-update-kernel.html</url>
      <content type="html"><![CDATA[<p>Linux 内核官网： <a href="https://www.kernel.org/" target="_blank" rel="noopener">https://www.kernel.org/</a><br>Linux 内核各个版本的支持时间： <a href="https://www.kernel.org/category/releases.html" target="_blank" rel="noopener">https://www.kernel.org/category/releases.html</a><br><a id="more"></a></p><h1 id="查看当前的内核版本"><a href="#查看当前的内核版本" class="headerlink" title="查看当前的内核版本"></a>查看当前的内核版本</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Linux 只表示内核。各大 Linux 发行版（RedHat、Ubuntu、CentOS 等）在内核基础上集成了其他的一系列软件，按照各自的版本规则发布。</p><h2 id="常用的查看内核信息的命令"><a href="#常用的查看内核信息的命令" class="headerlink" title="常用的查看内核信息的命令"></a>常用的查看内核信息的命令</h2><h3 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">uname</span><br><span class="line"></span><br><span class="line">打印指定的系统信息。不带参数时，默认使用 -s 参数。 </span><br><span class="line">参数： </span><br><span class="line">-a, –all：按照下面的顺序打印所有信息，如果 -p 和 -i 未知时排除掉。 </span><br><span class="line">-s, –kernel-name：打印内核名字，一般就是 Linux。 </span><br><span class="line">-n, –nodename：打印网络节点的主机名。 </span><br><span class="line">-r, –kernel-release：打印内核发行版的版本。常用。3.10.0-514.26.2.el7.x86_64 </span><br><span class="line">-v, –kernel-version：打印内核的版本。#1 SMP Tue Jul 4 15:04:05 UTC 2017 </span><br><span class="line">-m, –machine：打印机器硬件名。 </span><br><span class="line">-p, –processor：打印处理器名字或“unknown”。 </span><br><span class="line">-i, –hardware-platform：打印硬件平台或“unknown”。 </span><br><span class="line">-o, –operating-system：打印操作系统。 </span><br><span class="line">–help：显示这个帮助并退出。 </span><br><span class="line">–version：显示这版本信息并退出。</span><br></pre></td></tr></table></figure><h3 id="proc-虚拟文件系统"><a href="#proc-虚拟文件系统" class="headerlink" title="proc 虚拟文件系统"></a>proc 虚拟文件系统</h3><p>内核空间和用户空间通过 /proc 虚拟文件系统可以通信。<br>/proc 目录中包含一些目录和虚拟文件，这些虚拟文件可以向用户呈现内核信息或者从用户空间向内核发送信息。<br>常用文件：</p><ul><li><p>cpuinfo：标识了处理器的类型和速度</p></li><li><p>pci：显示在 PCI 总线上找到的设备</p></li><li><p>modules：当前加载到内核中的模块</p></li><li><p>version：系统版本及内核版本</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_20_6_centos ~]# cat /proc/version </span><br><span class="line">Linux version 4.4.158-1.el7.elrepo.x86_64 (mockbuild@Build64R7) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC) ) #1 SMP Wed Sep 26 14:58:11 EDT 2018</span><br></pre></td></tr></table></figure><h1 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h1><p>更新仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure></p><h2 id="启用-ELRepo-仓库"><a href="#启用-ELRepo-仓库" class="headerlink" title="启用 ELRepo 仓库"></a>启用 ELRepo 仓库</h2><p>ELRepo 仓库是基于社区的用于企业级 Linux 仓库，提供对 RedHat Enterprise (RHEL) 和 其他基于 RHEL的 Linux 发行版（CentOS、Scientific、Fedora 等）的支持。<br>ELRepo 聚焦于和硬件相关的软件包，包括文件系统驱动、显卡驱动、网络驱动、声卡驱动和摄像头驱动等。</p><p>启用 ELRepo 仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure></p><h2 id="查看可用的系统内核包"><a href="#查看可用的系统内核包" class="headerlink" title="查看可用的系统内核包"></a>查看可用的系统内核包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list available</span><br></pre></td></tr></table></figure><h2 id="安装最新内核"><a href="#安装最新内核" class="headerlink" title="安装最新内核"></a>安装最新内核</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel install kernel-lt</span><br></pre></td></tr></table></figure><h2 id="设置-grub2"><a href="#设置-grub2" class="headerlink" title="设置 grub2"></a>设置 grub2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 查看系统上的所有可以内核</span><br><span class="line">sudo awk -F\&apos; &apos;$1==&quot;menuentry &quot; &#123;print i++ &quot; : &quot; $2&#125;&apos; /etc/grub2.cfg</span><br><span class="line"></span><br><span class="line"># 设置 grub2</span><br><span class="line">grub2-set-default 0 命令或编辑 /etc/default/grub </span><br><span class="line"></span><br><span class="line"># vi /etc/default/grub </span><br><span class="line"># 设置 GRUB_DEFAULT=0，表示使用上一步的 awk 命令显示的编号为 0 的内核作为默认内核</span><br><span class="line">&gt; GRUB_TIMEOUT=5</span><br><span class="line">&gt; GRUB_DISTRIBUTOR=&quot;$(sed &apos;s, release .*$,,g&apos; /etc/system-release)&quot;</span><br><span class="line">&gt; GRUB_DEFAULT=0</span><br><span class="line">&gt; GRUB_DISABLE_SUBMENU=true</span><br><span class="line">&gt; GRUB_TERMINAL_OUTPUT=&quot;console&quot;</span><br><span class="line">&gt; GRUB_CMDLINE_LINUX=&quot;crashkernel=auto console=ttyS0 console=tty0 panic=5&quot;</span><br><span class="line">&gt; GRUB_DISABLE_RECOVERY=&quot;true&quot;</span><br><span class="line">&gt; GRUB_TERMINAL=&quot;serial console&quot;</span><br><span class="line">&gt; GRUB_TERMINAL_OUTPUT=&quot;serial console&quot;</span><br><span class="line">&gt; GRUB_SERIAL_COMMAND=&quot;serial --speed=9600 --unit=0 --word=8 --parity=no --stop=1&quot;</span><br></pre></td></tr></table></figure><h2 id="生成-grub-配置文件并重启"><a href="#生成-grub-配置文件并重启" class="headerlink" title="生成 grub 配置文件并重启"></a>生成 grub 配置文件并重启</h2><p>通过 gurb2-mkconfig 命令创建 grub2 的配置文件，然后重启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></p><h1 id="删除旧内核（可选）"><a href="#删除旧内核（可选）" class="headerlink" title="删除旧内核（可选）"></a>删除旧内核（可选）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep kernel</span><br><span class="line"></span><br><span class="line"># 删除旧版本工具包</span><br><span class="line">yum remove kernel-tools-libs.x86_64 kernel-tools.x86_64</span><br><span class="line"># 安装新版本工具包</span><br><span class="line">yum --disablerepo=\* --enablerepo=elrepo-kernel install -y kernel-ml-tools.x86_64</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 运维部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用ps工具统计CPU/MEM消耗高或者负载高的进程</title>
      <link href="/2018/09/28/use-ps-tools-count-cpu-mem-loadaverage.html"/>
      <url>/2018/09/28/use-ps-tools-count-cpu-mem-loadaverage.html</url>
      <content type="html"><![CDATA[<p>CPU消耗高往往是系统异常的一种表现。因为平常检查系统运行有哪些进程，都是使用ps工具。因此，出现这种情况时，如果能够通过ps工具搜寻出CPU消耗高的线程，则对进一步搜寻线索或者排查应该有帮助。</p><p>一个进程可能包含多个线程。但是考察CPU消耗问题，只考虑进程而不考虑线程是不够的。就是说，我们总是得给ps命令加上“-T”选项。</p><p>为了便于按照CPU消耗的情况排序，我们也通过“-o”定制ps输出的字段，以确保CPU消耗占比字段是第一个字段，这样便于排序。</p><a id="more"></a><h1 id="列出消耗高的线程"><a href="#列出消耗高的线程" class="headerlink" title="列出消耗高的线程"></a>列出消耗高的线程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -20</span><br><span class="line"></span><br><span class="line">#效果如下</span><br><span class="line">[root@es ~]# LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -20</span><br><span class="line">26.0  1760  1782     1 java</span><br><span class="line">17.6  1760 22003     1 java</span><br><span class="line">17.0  1760 22006     1 java</span><br><span class="line">16.2  1760 21986     1 java</span><br><span class="line">16.0  1760 22024     1 java</span><br><span class="line">15.0  1760 22025     1 java</span><br><span class="line">14.8 13825 21917     1 java</span><br><span class="line">14.7 13825 21992     1 java</span><br><span class="line">14.2  1760 21989     1 java</span><br><span class="line">14.0  1760 22042     1 java</span><br><span class="line">13.2 13825 21993     1 java</span><br><span class="line">12.6  1760 22008     1 java</span><br><span class="line">12.0  1760 22027     1 java</span><br><span class="line">12.0 13825 22043     1 java</span><br><span class="line">11.0 13825 22047     1 java</span><br><span class="line">10.5  1760  1783     1 java</span><br><span class="line"> 8.3 13825 22016     1 java</span><br><span class="line"> 8.0  1760  5966     1 java</span><br><span class="line"> 8.0  1760  5897     1 java</span><br><span class="line"> 8.0 13825 14598     1 java</span><br></pre></td></tr></table></figure><h1 id="统计线程消耗的总的CPU"><a href="#统计线程消耗的总的CPU" class="headerlink" title="统计线程消耗的总的CPU"></a>统计线程消耗的总的CPU</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | sed -e &apos;s/^ *//&apos; | tr -s &apos; &apos; | grep -v CPU | sort -n -r | cut -d &apos; &apos; -f 1 | xargs -I&#123;&#125; echo -n &quot;&#123;&#125; + &quot; &amp;&amp; echo &apos; 0&apos;; &#125; | bc -l</span><br><span class="line"></span><br><span class="line">#效果如下</span><br><span class="line">[root@es ~]# &#123; LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | sed -e &apos;s/^ *//&apos; | tr -s &apos; &apos; | grep -v CPU | sort -n -r | cut -d &apos; &apos; -f 1 | xargs -I&#123;&#125; echo -n &quot;&#123;&#125; + &quot; &amp;&amp; echo &apos; 0&apos;; &#125; | bc -l</span><br><span class="line"></span><br><span class="line">356.1</span><br><span class="line">[root@es ~]#</span><br></pre></td></tr></table></figure><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>设想我们需要追踪CPU占用最高的线程，则可以这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export LANG=C;d=$(mktemp -d) &amp;&amp; cd $d # 建并进入临时目录</span><br><span class="line"># 捕捉之</span><br><span class="line">strace -f -ff -s 256 -tt -T -o strace.log -p $(ps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -1 | sed -e &apos;s/^ *//&apos; | tr -s &apos; &apos;  | cut -d &apos; &apos; -f 3)</span><br></pre></td></tr></table></figure></p><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><p>线程是共享内存空间的。所以，一般情况下，没有必要使用“-T”选项。</p><p>列出内存消耗高的进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=C ps -e -o%mem,pid,tid,ppid,comm | grep -v MEM | sort -n -r | head -20</span><br></pre></td></tr></table></figure><p>统计内存消耗情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; LANG=C ps -e -o%mem,pid,tid,ppid,comm | sed -e &apos;s/^ *//&apos; | tr -s &apos; &apos; | grep -v MEM | sort -n -r | cut -d &apos; &apos; -f 1 | xargs -I&#123;&#125; echo -n &quot;&#123;&#125; + &quot; &amp;&amp; echo &apos; 0&apos;; &#125; | bc -l</span><br></pre></td></tr></table></figure></p><h1 id="列出导致CPU负载高的线程"><a href="#列出导致CPU负载高的线程" class="headerlink" title="列出导致CPU负载高的线程"></a>列出导致CPU负载高的线程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=C ps -eTo stat,pid,tid,ppid,comm,args | perl -ne &apos;chomp;if (m!^\s*(\S*[RD]+\S*.*)!) &#123;print qq[$1\n];&#125;&apos;</span><br></pre></td></tr></table></figure><h1 id="tomcat-cpu过高"><a href="#tomcat-cpu过高" class="headerlink" title="tomcat cpu过高"></a>tomcat cpu过高</h1><p>1，根据top命令，发现PID为2633的Java进程占用CPU高达300%，出现故障。</p><p>2，找到该进程后，如何定位具体线程或代码呢，首先显示线程列表,并按照CPU占用高的线程排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ps -mp 2633 -o THREAD,tid,time | sort -rn</span><br><span class="line"></span><br><span class="line">显示结果如下：</span><br><span class="line">USER     %CPU PRI SCNT WCHAN  USER SYSTEM   TID     TIME</span><br><span class="line">root     10.5  19    - -         -      -  3626 00:12:48</span><br><span class="line">root     10.1  19    - -         -      -  3593 00:12:16</span><br></pre></td></tr></table></figure></p><p>找到了耗时最高的线程3626，占用CPU时间有12分钟了！</p><p>3.将需要的线程ID转换为16进制格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%x\n&quot; 3626</span><br><span class="line">e18</span><br></pre></td></tr></table></figure></p><p>4.最后打印线程的堆栈信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack 2633 |grep e18 -A 30</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 日常问题处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpu </tag>
            
            <tag> mem </tag>
            
            <tag> ps </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>定期删除elasticsearch索引记录</title>
      <link href="/2018/09/27/regular-delete-elasticsearch-index.html"/>
      <url>/2018/09/27/regular-delete-elasticsearch-index.html</url>
      <content type="html"><![CDATA[<p>需要定期清理的索引的后缀日期格式为YYYY.MM.DD，如：nginx-2018.09.01，解决方法通过_cat/indices接口可以获取当前ES全部索引信息，取第三列为索引名。过滤出索引名中带有的日期字符串，然后进行日期比较，早于10天前的日期便可通过日期模糊匹配索引来删除。</p><a id="more"></a><p>shell脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">###################################</span><br><span class="line">#删除早于20天的ES集群的索引</span><br><span class="line">###################################</span><br><span class="line">function delete_indices() &#123;</span><br><span class="line">    comp_date=`date -d &quot;20 day ago&quot; +&quot;%Y-%m-%d&quot;`</span><br><span class="line">    date1=&quot;$1 00:00:00&quot;</span><br><span class="line">    date2=&quot;$comp_date 00:00:00&quot;</span><br><span class="line"></span><br><span class="line">    t1=`date -d &quot;$date1&quot; +%s` </span><br><span class="line">    t2=`date -d &quot;$date2&quot; +%s` </span><br><span class="line"></span><br><span class="line">    if [ $t1 -le $t2 ]; then</span><br><span class="line">        echo &quot;$1时间早于$comp_date，进行索引删除&quot;</span><br><span class="line">        #转换一下格式，将类似2018-09-01格式转化为2018.09.01</span><br><span class="line">        format_date=`echo $1| sed &apos;s/-/\./g&apos;`</span><br><span class="line">        curl -XDELETE http://127.0.0.1:9200/*$format_date</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">curl -XGET http://127.0.0.1:9200/_cat/indices | awk -F&quot; &quot; &apos;&#123;print $3&#125;&apos; | awk -F&quot;-&quot; &apos;&#123;print $NF&#125;&apos; | egrep &quot;[0-9]*\.[0-9]*\.[0-9]*&quot; | sort | uniq  | sed &apos;s/\./-/g&apos; | while read LINE</span><br><span class="line">do</span><br><span class="line">    #调用索引删除函数</span><br><span class="line">    delete_indices $LINE</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">##将脚本配置到定时任务定期执行即可。</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> elk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elk </tag>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在k8s上通过helm与动态NFS部署kafka、zookeeper</title>
      <link href="/2018/09/17/helm-install-kafka-zookeeper-with-nfs.html"/>
      <url>/2018/09/17/helm-install-kafka-zookeeper-with-nfs.html</url>
      <content type="html"><![CDATA[<p>helm仓库地址<a href="https://github.com/helm/charts" target="_blank" rel="noopener">https://github.com/helm/charts</a><br><a id="more"></a></p><h1 id="添加helm仓库"><a href="#添加helm仓库" class="headerlink" title="添加helm仓库"></a>添加helm仓库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">谷歌仓库</span><br><span class="line">helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator</span><br><span class="line"></span><br><span class="line">由于国内网络缘故，可添加阿里云，但是zookeeper版本为v2，谷歌为v3</span><br><span class="line">helm repo add incubator https://aliacs-app-catalog.oss-cn-hangzhou.aliyuncs.com/charts-incubator/</span><br><span class="line"></span><br><span class="line">这里采用谷歌仓库的kafka</span><br><span class="line">[root@public03 ~]# helm search kafka</span><br><span class="line">NAME                     CHART VERSIONAPP VERSIONDESCRIPTION                                                 </span><br><span class="line">incubator/kafka          0.9.6        4.1.2      Apache Kafka is publish-subscribe messaging rethought as ...</span><br></pre></td></tr></table></figure><h1 id="修改kafa相关配置"><a href="#修改kafa相关配置" class="headerlink" title="修改kafa相关配置"></a>修改kafa相关配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#下载</span><br><span class="line">hlem fetch incubator/kafka</span><br><span class="line">#解压</span><br><span class="line">tar zxf kafka-0.9.6.tgz &amp;&amp; cd kafka</span><br><span class="line">#修改文件zookeeper</span><br><span class="line">charts/zookeeper/templates/statefulset.yaml</span><br><span class="line">#zookeeper的镜像地址改为registry.cn-hangzhou.aliyuncs.com/appstore/k8szk:v3</span><br><span class="line">最后创建pvc模板修改为以下：</span><br><span class="line">volumeClaimTemplates:</span><br><span class="line">    - metadata:</span><br><span class="line">        name: data</span><br><span class="line">        annotations:</span><br><span class="line">          volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot;</span><br><span class="line">      spec:</span><br><span class="line">        accessModes:</span><br><span class="line">          - ReadWriteMany</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            storage: 1Gi</span><br><span class="line"></span><br><span class="line">#修改文件kafka</span><br><span class="line">templates/statefulset.yaml</span><br><span class="line">最后创建pvc模板修改为以下：</span><br><span class="line">volumeClaimTemplates:</span><br><span class="line">    - metadata:</span><br><span class="line">        name: data</span><br><span class="line">        annotations:</span><br><span class="line">          volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot;</span><br><span class="line">      spec:</span><br><span class="line">        accessModes:</span><br><span class="line">          - ReadWriteMany</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            storage: 1Gi</span><br><span class="line"></span><br><span class="line">storageclass查询命令： kubectl get sc --all-namespaces</span><br></pre></td></tr></table></figure><h1 id="安装kafka"><a href="#安装kafka" class="headerlink" title="安装kafka"></a>安装kafka</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helm install ./kafka -n kafka --namespace xxx</span><br><span class="line">#查看pvc状态</span><br><span class="line">kubectl get pvc -n xxx</span><br></pre></td></tr></table></figure><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><h2 id="创建测试pod"><a href="#创建测试pod" class="headerlink" title="创建测试pod"></a>创建测试pod</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: testclient</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: kafka</span><br><span class="line">    image: confluentinc/cp-kafka:4.1.2-2</span><br><span class="line">    command:</span><br><span class="line">    - sh</span><br><span class="line">    - -c</span><br><span class="line">    - &quot;exec tail -f /dev/null&quot;</span><br><span class="line"></span><br><span class="line">kubectl apply -f testclient.yaml</span><br></pre></td></tr></table></figure><h2 id="列出topics"><a href="#列出topics" class="headerlink" title="列出topics"></a>列出topics</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n default exec testclient -- /usr/bin/kafka-topics --zookeeper kafka-zookeeper:2181 --list</span><br><span class="line"></span><br><span class="line">[root@public03 ~]# kubectl -n default exec testclient -- /usr/bin/kafka-topics --zookeeper kafka-zookeeper:2181 --list</span><br><span class="line">__confluent.support.metrics</span><br></pre></td></tr></table></figure><h2 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n default exec testclient -- /usr/bin/kafka-topics --zookeeper kafka-zookeeper:2181 --topic test1 --create --partitions 1 --replication-factor 1</span><br><span class="line"></span><br><span class="line">[root@public03 ~]# kubectl -n default exec testclient -- /usr/bin/kafka-topics --zookeeper kafka-zookeeper:2181 --topic test1 --create --partitions 1 --replication-factor 1</span><br><span class="line">Created topic &quot;test1&quot;.</span><br></pre></td></tr></table></figure><h2 id="在一个topic监听messages"><a href="#在一个topic监听messages" class="headerlink" title="在一个topic监听messages"></a>在一个topic监听messages</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n default exec -ti testclient -- /usr/bin/kafka-console-consumer --bootstrap-server kafka:9092 --topic test1 --from-beginning</span><br><span class="line"></span><br><span class="line">#获取服务地址</span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure><h2 id="在另外一个终端启动交互式消息生产者会话"><a href="#在另外一个终端启动交互式消息生产者会话" class="headerlink" title="在另外一个终端启动交互式消息生产者会话"></a>在另外一个终端启动交互式消息生产者会话</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n default exec -ti testclient -- /usr/bin/kafka-console-producer --broker-list kafka-headless:9092 --topic test1</span><br><span class="line"></span><br><span class="line">#获取服务地址</span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nfs </tag>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> helm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用cert-manager让Ingress启用免费的HTTPS证书</title>
      <link href="/2018/09/14/kubernetes-ingress-enable-free-https-with-cert-manager.html"/>
      <url>/2018/09/14/kubernetes-ingress-enable-free-https-with-cert-manager.html</url>
      <content type="html"><![CDATA[<p>cert-manager 是替代 kube-lego 的一个开源项目，用于在 Kubernetes 集群中自动提供 HTTPS 证书，支持 Let’s Encrypt, HashiCorp Vault 这些免费证书的签发。</p><a id="more"></a><ul><li><p>使用 Helm 安装，所以请确保 Helm 已安装</p></li><li><p>集群必须已经装有 Ingress Controller</p></li><li><p>需要颁发免费证书的域名配置DNS记录，IP 指向 Ingress Controller 对外暴露的地址</p></li><li><p>开源地址：<a href="https://github.com/jetstack/cert-manager" target="_blank" rel="noopener">https://github.com/jetstack/cert-manager</a></p></li><li><p>文档地址：<a href="https://cert-manager.readthedocs.io" target="_blank" rel="noopener">https://cert-manager.readthedocs.io</a></p></li></ul><h1 id="安装-cert-manager"><a href="#安装-cert-manager" class="headerlink" title="安装 cert-manager"></a>安装 cert-manager</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helm install \</span><br><span class="line">    --name cert-manager \</span><br><span class="line">    --namespace kube-system \</span><br><span class="line">    stable/cert-manager</span><br></pre></td></tr></table></figure><h1 id="生成免费证书"><a href="#生成免费证书" class="headerlink" title="生成免费证书"></a>生成免费证书</h1><p>先创建一个签发机构，cert-manager 给我们提供了 Issuer 和 ClusterIssuer 这两种用于创建签发机构的自定义资源对象，Issuer 只能用来签发自己所在 namespace 下的证书，ClusterIssuer 可以签发任意 namespace 下的证书，这里以 ClusterIssuer 为例创建一个签发机构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vi issuer.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: certmanager.k8s.io/v1alpha1</span><br><span class="line">kind: ClusterIssuer</span><br><span class="line">metadata:</span><br><span class="line">  name: letsencrypt-prod</span><br><span class="line">spec:</span><br><span class="line">  acme:</span><br><span class="line">    server: https://acme-v02.api.letsencrypt.org/directory</span><br><span class="line">    email: ywthings@qq.com</span><br><span class="line">    privateKeySecretRef:</span><br><span class="line">      name: letsencrypt-prod</span><br><span class="line">    http01: &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>metadata.name 是我们创建的签发机构的名称，后面我们创建证书的时候会引用它<br>spec.acme.email 是你自己的邮箱，证书快过期的时候会有邮件提醒，不过 cert-manager 会利用 acme 协议自动给我们重新颁发证书来续期<br>spec.acme.server 是 acme 协议的服务端，我们这里用 Let’s Encrypt，这个地址就写死成这样就行<br>spec.acme.privateKeySecretRef 指示此签发机构的私钥将要存储到哪个 Secret 对象中，名称不重要<br>spec.acme.http01 这里指示签发机构使用 HTTP-01 的方式进行 acme 协议 (还可以用 DNS 方式，acme 协议的目的是证明这台机器和域名都是属于你的，然后才准许给你颁发证书)</p><p>签发机构，接下来我们就可以生成免费证书了，cert-manager 给我们提供了 Certificate 这个用于生成证书的自定义资源对象，它必须局限在某一个 namespace 下，证书最终会在这个 namespace 下以 Secret 的资源对象存储，假如我想在 dashboard 这个 namespace 下生成免费证书（这个 namespace 已存在)，创建一个 Certificate 对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vi cert.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: certmanager.k8s.io/v1alpha1</span><br><span class="line">kind: Certificate</span><br><span class="line">metadata:</span><br><span class="line">  name: ywthings.com</span><br><span class="line">  namespace: dashboard</span><br><span class="line">spec:</span><br><span class="line">  secretName: ywthings.com-tls</span><br><span class="line">  issuerRef:</span><br><span class="line">    name: letsencrypt-prod</span><br><span class="line">    kind: ClusterIssuer</span><br><span class="line">  dnsNames:</span><br><span class="line">  - ywthings.com</span><br><span class="line">  acme:</span><br><span class="line">    config:</span><br><span class="line">    - http01:</span><br><span class="line">        ingressClass: nginx</span><br><span class="line">      domains:</span><br><span class="line">      - ywthings.com</span><br></pre></td></tr></table></figure></p><p>spec.secretName 指示证书最终存到哪个 Secret 中<br>spec.issuerRef.kind 值为 ClusterIssuer 说明签发机构不在本 namespace 下，而是在全局<br>spec.issuerRef.name 我们创建的签发机构的名称 (ClusterIssuer.metadata.name)<br>spec.dnsNames 指示该证书的可以用于哪些域名<br>spec.acme.config.http01.ingressClass 使用 HTTP-01 方式校验该域名和机器时，cert-manager 会尝试创建Ingress 对象来实现该校验，如果指定该值，会给创建的 Ingress 加上 kubernetes.io/ingress.class 这个 annotation，如果我们的 Ingress Controller 是 Nginx Ingress Controller，指定这个字段可以让创建的 Ingress 被 Nginx Ingress Controller 处理。<br>spec.acme.config.http01.domains 指示该证书的可以用于哪些域名</p><p>Ingress 使用来启用免费 HTTPS<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: my-nginx</span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: &quot;nginx&quot;</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: ywthings.com</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - backend:</span><br><span class="line">          serviceName: my-nginx</span><br><span class="line">          servicePort: 443</span><br><span class="line">        path: /</span><br><span class="line">  tls:</span><br><span class="line">   - secretName: ywthings.com-tls</span><br><span class="line">     hosts:</span><br><span class="line">       - ywthings.com</span><br></pre></td></tr></table></figure></p><p>在 Ingress 定义的 spec.tls.secretName 引用生成的证书所在的 Secret 名称即可实现使用免费证书<br>将 Ingress 定义的 spec.rules.host 和 spec.tls.hosts 里的域名都替换为你自己的域名</p>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> tls </tag>
            
            <tag> cert-manager </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes通过TLS安全访问</title>
      <link href="/2018/09/14/kubernetes-use-tls.html"/>
      <url>/2018/09/14/kubernetes-use-tls.html</url>
      <content type="html"><![CDATA[<p>外部访问k8s里的服务，都是直接以http方式进行的，缺少TLS安全<br><a id="more"></a></p><h1 id="生成并信任自签名证书"><a href="#生成并信任自签名证书" class="headerlink" title="生成并信任自签名证书"></a>生成并信任自签名证书</h1><p>首先这里生成自签名的服务器证书，官方介绍了easyrsa, openssl 、 cfssl三个工具，这里使用cfssl</p><h2 id="安装CFSSL"><a href="#安装CFSSL" class="headerlink" title="安装CFSSL"></a>安装CFSSL</h2><p>直接使用二进制源码包安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">chmod +x cfssl_linux-amd64</span><br><span class="line">mv cfssl_linux-amd64 /usr/sbin/cfssl</span><br><span class="line"></span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">chmod +x cfssljson_linux-amd64</span><br><span class="line">mv cfssljson_linux-amd64 /usr/sbin/cfssljson</span><br><span class="line"></span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line">chmod +x cfssl-certinfo_linux-amd64</span><br><span class="line">mv cfssl-certinfo_linux-amd64 /usr/sbin/cfssl-certinfo</span><br></pre></td></tr></table></figure></p><h2 id="生成默认配置文件"><a href="#生成默认配置文件" class="headerlink" title="生成默认配置文件"></a>生成默认配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cfssl print-defaults config &gt; config.json</span><br><span class="line">cfssl print-defaults csr &gt; csr.json</span><br></pre></td></tr></table></figure><h2 id="生成自定义的config-json文件"><a href="#生成自定义的config-json文件" class="headerlink" title="生成自定义的config.json文件"></a>生成自定义的config.json文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp config.json ca-config.json</span><br></pre></td></tr></table></figure><h2 id="生成ca和server的证书请求json文件"><a href="#生成ca和server的证书请求json文件" class="headerlink" title="生成ca和server的证书请求json文件"></a>生成ca和server的证书请求json文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp csr.json ca-csr.json</span><br><span class="line">cp csr.json server-csr.json</span><br></pre></td></tr></table></figure><h2 id="编辑ca-config-json"><a href="#编辑ca-config-json" class="headerlink" title="编辑ca-config.json"></a>编辑ca-config.json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;signing&quot;: &#123;</span><br><span class="line">        &quot;default&quot;: &#123;</span><br><span class="line">            &quot;expiry&quot;: &quot;168h&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;profiles&quot;: &#123;</span><br><span class="line">            &quot;k8s-local&quot;: &#123;</span><br><span class="line">                &quot;expiry&quot;: &quot;8760h&quot;,</span><br><span class="line">                &quot;usages&quot;: [</span><br><span class="line">                    &quot;signing&quot;,</span><br><span class="line">                    &quot;key encipherment&quot;,</span><br><span class="line">                    &quot;server auth&quot;,</span><br><span class="line">                    &quot;client auth&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编辑ca-csr-json"><a href="#编辑ca-csr-json" class="headerlink" title="编辑ca-csr.json"></a>编辑ca-csr.json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;k8s-local&quot;,</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;GuangDong&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;Shenzhen&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;my self signed certificate&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;self signed&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编辑server-csr-json"><a href="#编辑server-csr-json" class="headerlink" title="编辑server-csr.json"></a>编辑server-csr.json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;CN&quot;: &quot;k8s.local&quot;,</span><br><span class="line">    &quot;hosts&quot;: [</span><br><span class="line">        &quot;127.0.0.1&quot;,</span><br><span class="line">        &quot;*.k8s.local&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;key&quot;: &#123;</span><br><span class="line">        &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">        &quot;size&quot;: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;names&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">            &quot;ST&quot;: &quot;GuangDong&quot;,</span><br><span class="line">            &quot;L&quot;: &quot;Shenzhen&quot;,</span><br><span class="line">            &quot;O&quot;: &quot;my self signed certificate&quot;,</span><br><span class="line">            &quot;OU&quot;: &quot;self signed&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成CA证书及服务器证书"><a href="#生成CA证书及服务器证书" class="headerlink" title="生成CA证书及服务器证书"></a>生成CA证书及服务器证书</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem --config=ca-config.json -profile=k8s-local server-csr.json | cfssljson -bare server</span><br></pre></td></tr></table></figure><p>得到ca.pem，server-key.pem，server.pem三个证书文件，其中ca.pem是ca的证书，server-key.pem是服务器证书的密钥，server.pem是服务器证书。</p><h1 id="在k8s里使用自签名证书"><a href="#在k8s里使用自签名证书" class="headerlink" title="在k8s里使用自签名证书"></a>在k8s里使用自签名证书</h1><h2 id="创建默认的tls-secret"><a href="#创建默认的tls-secret" class="headerlink" title="创建默认的tls secret"></a>创建默认的tls secret</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system create secret tls default-tls-cert --key=server-key.pem --cert=server.pem</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> tls </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes 中拉取私有仓库(腾讯云)</title>
      <link href="/2018/09/13/use-kubernetes-private-resgistry.html"/>
      <url>/2018/09/13/use-kubernetes-private-resgistry.html</url>
      <content type="html"><![CDATA[<p>官方介绍：<a href="https://kubernetes.io/docs/concepts/containers/images/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/containers/images/</a></p><a id="more"></a><h2 id="创建保存仓库地址和密码的secret"><a href="#创建保存仓库地址和密码的secret" class="headerlink" title="创建保存仓库地址和密码的secret"></a>创建保存仓库地址和密码的secret</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret docker-registry registry-secret --docker-server=registry.cn-shenzhen.aliyuncs.com --docker-username=user-test --docker-password=xxxxxx --docker-email=xxx@xxx.com</span><br><span class="line">--docker-server: 仓库地址</span><br><span class="line">--docker-username: 仓库登陆账号</span><br><span class="line">--docker-password: 仓库登陆密码</span><br><span class="line">--docker-email: 邮件地址(选填)</span><br></pre></td></tr></table></figure><h2 id="deployment-yml加入拉取镜像的密钥"><a href="#deployment-yml加入拉取镜像的密钥" class="headerlink" title="deployment.yml加入拉取镜像的密钥"></a>deployment.yml加入拉取镜像的密钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: foo</span><br><span class="line">  namespace: awesomeapps</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: foo</span><br><span class="line">      image: janedoe/awesomeapp:v1</span><br><span class="line">  imagePullSecrets:</span><br><span class="line">    - name: myregistrykey</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用NFS client provisioner动态提供Kubernetes后端存储卷</title>
      <link href="/2018/09/11/use-nfs-client-provisioner-k8s.html"/>
      <url>/2018/09/11/use-nfs-client-provisioner-k8s.html</url>
      <content type="html"><![CDATA[<p>利用NFS Server给Kubernetes作为持久存储的后端，并且动态提供PV。前提条件是有已经安装好的NFS服务器，并且NFS服务器与Kubernetes的Slave节点都能网络连通。<br>官方文档：<a href="https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client" target="_blank" rel="noopener">https://github.com/kubernetes-incubator/external-storage/tree/master/nfs-client</a><br><a id="more"></a></p><h2 id="nfs-client-provisioner"><a href="#nfs-client-provisioner" class="headerlink" title="nfs-client-provisioner"></a>nfs-client-provisioner</h2><p>nfs-client-provisioner 是一个Kubernetes的简易NFS的外部provisioner，本身不提供NFS，需要现有的NFS服务器提供存储</p><ul><li><p>PV以 ${namespace}-${pvcName}-${pvName}的命名格式提供（在NFS服务器上）</p></li><li><p>PV回收的时候以 archieved-${namespace}-${pvcName}-${pvName} 的命名格式（在NFS服务器上）</p></li></ul><h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><ul><li><p>修改deployment文件并部署 deploy/deployment.yaml<br>需要修改的地方只有NFS服务器所在的IP地址（10.10.10.60），以及NFS服务器共享的路径（/ifs/kubernetes），两处都需要修改为你实际的NFS服务器和共享目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># https://raw.githubusercontent.com/kubernetes-incubator/external-storage/master/nfs-client/deploy/deployment.yaml</span><br><span class="line"></span><br><span class="line">kind: Deployment</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    type: Recreate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nfs-client-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: nfs-client-provisioner</span><br><span class="line">      containers:</span><br><span class="line">        - name: nfs-client-provisioner</span><br><span class="line">          image: quay.io/external_storage/nfs-client-provisioner:latest</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: nfs-client-root</span><br><span class="line">              mountPath: /persistentvolumes</span><br><span class="line">          env:</span><br><span class="line">            - name: PROVISIONER_NAME</span><br><span class="line">              value: fuseim.pri/ifs</span><br><span class="line">            - name: NFS_SERVER</span><br><span class="line">              value: 10.10.10.60</span><br><span class="line">            - name: NFS_PATH</span><br><span class="line">              value: /ifs/kubernetes</span><br><span class="line">      volumes:</span><br><span class="line">        - name: nfs-client-root</span><br><span class="line">          nfs:</span><br><span class="line">            server: 10.10.10.60</span><br><span class="line">            path: /ifs/kubernetes</span><br></pre></td></tr></table></figure></li><li><p>修改StorageClass文件并部署 deploy/class.yaml<br>此处可以不修改，或者修改provisioner的名字，需要与上面的deployment的PROVISIONER_NAME名字一致。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># https://raw.githubusercontent.com/kubernetes-incubator/external-storage/master/nfs-client/deploy/class.yaml</span><br><span class="line"></span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">kind: StorageClass</span><br><span class="line">metadata:</span><br><span class="line">  name: managed-nfs-storage</span><br><span class="line">provisioner: fuseim.pri/ifs</span><br></pre></td></tr></table></figure><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>kubernetes 1.6以上默认开启了rbac认证。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;persistentvolumes&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;delete&quot;]</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;persistentvolumeclaims&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;update&quot;]</span><br><span class="line">  - apiGroups: [&quot;storage.k8s.io&quot;]</span><br><span class="line">    resources: [&quot;storageclasses&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;]</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;events&quot;]</span><br><span class="line">    verbs: [&quot;create&quot;, &quot;update&quot;, &quot;patch&quot;]</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;services&quot;, &quot;endpoints&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;]</span><br><span class="line">  - apiGroups: [&quot;extensions&quot;]</span><br><span class="line">    resources: [&quot;podsecuritypolicies&quot;]</span><br><span class="line">    resourceNames: [&quot;nfs-client-provisioner&quot;]</span><br><span class="line">    verbs: [&quot;use&quot;]</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: run-nfs-client-provisioner</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nfs-client-provisioner</span><br><span class="line">    namespace: default</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: nfs-client-provisioner-runner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">---</span><br><span class="line">kind: Role</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: leader-locking-nfs-client-provisioner</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [&quot;&quot;]</span><br><span class="line">    resources: [&quot;endpoints&quot;]</span><br><span class="line">    verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;]</span><br><span class="line">---</span><br><span class="line">kind: RoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: leader-locking-nfs-client-provisioner</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: nfs-client-provisioner</span><br><span class="line">    namespace: default</span><br><span class="line">roleRef:</span><br><span class="line">  kind: Role</span><br><span class="line">  name: leader-locking-nfs-client-provisioner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br></pre></td></tr></table></figure></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="测试创建PVC"><a href="#测试创建PVC" class="headerlink" title="测试创建PVC"></a>测试创建PVC</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/kubernetes-incubator/external-storage/master/nfs-client/deploy/test-claim.yaml</span><br><span class="line"></span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: test-claim</span><br><span class="line">  annotations:</span><br><span class="line">    volume.beta.kubernetes.io/storage-class: &quot;managed-nfs-storage&quot;</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Mi</span><br></pre></td></tr></table></figure><h3 id="测试创建POD"><a href="#测试创建POD" class="headerlink" title="测试创建POD"></a>测试创建POD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/kubernetes-incubator/external-storage/master/nfs-client/deploy/test-pod.yaml</span><br><span class="line"></span><br><span class="line">kind: Pod</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: test-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: test-pod</span><br><span class="line">    image: gcr.io/google_containers/busybox:1.24  #如访问缘故可以直接采用busybox镜像</span><br><span class="line">    command:</span><br><span class="line">      - &quot;/bin/sh&quot;</span><br><span class="line">    args:</span><br><span class="line">      - &quot;-c&quot;</span><br><span class="line">      - &quot;touch /mnt/SUCCESS &amp;&amp; exit 0 || exit 1&quot;</span><br><span class="line">    volumeMounts:</span><br><span class="line">      - name: nfs-pvc</span><br><span class="line">        mountPath: &quot;/mnt&quot;</span><br><span class="line">  restartPolicy: &quot;Never&quot;</span><br><span class="line">  volumes:</span><br><span class="line">    - name: nfs-pvc</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: test-claim</span><br></pre></td></tr></table></figure><p>在NFS服务器上的共享目录下的卷子目录中检查创建的NFS PV卷下是否有”SUCCESS” 文件。</p>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> NFS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kubernetes应用程序部署工作流程</title>
      <link href="/2018/08/16/Kubernetes-application-deployment-workflow.html"/>
      <url>/2018/08/16/Kubernetes-application-deployment-workflow.html</url>
      <content type="html"><![CDATA[<ol><li>用户通过“kubectl”部署一个新的应用程序。Kubectl将请求发送到API服务器。</li><li>API服务器接收请求并将其存储在数据存储（etcd）中。将请求写入数据存储后，API服务器将完成请求。<a id="more"></a></li><li>监视器检测资源变化并向控制器发送通知以对其进行操作。</li><li>Controller会检测新应用并创建新的pod以匹配所需的实例数量。将拾取对存储模型的任何更改以创建或删除Pod。</li><li>调度程序根据条件为节点分配新的pod。Scheduler决定在集群中的特定节点上运行Pod。调度程序使用节点信息修改模型。</li><li>节点上的Kubelet检测到具有自身分配的pod，并通过容器运行时（例如Docker）部署所请求的容器。每个节点都会监视存储，以查看它分配给哪些pod运行。它对分配给它的资源采取必要的操作，如创建/删除Pod。</li><li>Kubeproxy管理容器的网络流量 - 包括服务发现和负载平衡。Kubeproxy负责想要进行交互的Pod之间的通信。<!--more--><img src="/images/app_deploy_workflow.png" width="100%" height="100%"></li></ol>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通过kubenetes Helm安装Ceph</title>
      <link href="/2018/07/31/use-kubenetes-helm-install-ceph.html"/>
      <url>/2018/07/31/use-kubenetes-helm-install-ceph.html</url>
      <content type="html"><![CDATA[<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><ul><li><p>公共网络和集群网络必须相同</p></li><li><p>如果存储类用户标识不是admin，则必须在Ceph集群中手动创建用户并在Kubernetes中创建其密钥</p></li><li><p>ceph-mgr只能运行1个副本</p></li></ul><h1 id="启动本地Helm"><a href="#启动本地Helm" class="headerlink" title="启动本地Helm"></a>启动本地Helm</h1><p>ceph-helm项目默认使用本地Helm repo来存储images，要启动本地Helm repo服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ helm serve &amp;</span><br><span class="line">$ helm repo add local http://localhost:8879/charts</span><br></pre></td></tr></table></figure></p><h1 id="增加本地helm仓库"><a href="#增加本地helm仓库" class="headerlink" title="增加本地helm仓库"></a>增加本地helm仓库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/ceph/ceph-helm</span><br><span class="line">$ cd ceph-helm/ceph</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><h1 id="配置Ceph"><a href="#配置Ceph" class="headerlink" title="配置Ceph"></a>配置Ceph</h1><p>创建一个ceph-overrides.yaml Ceph配置来覆盖ceph-helm默认值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/ceph-overrides.yaml</span><br><span class="line">network:</span><br><span class="line">  public:   172.16.0.0/20</span><br><span class="line">  cluster:   172.16.0.0/20</span><br><span class="line"></span><br><span class="line">osd_devices:</span><br><span class="line">  - name: dev-sdb</span><br><span class="line">    device: /dev/sdb</span><br><span class="line">    zap: &quot;1&quot;</span><br><span class="line">  - name: dev-sdc</span><br><span class="line">    device: /dev/sdc</span><br><span class="line">    zap: &quot;1&quot;</span><br><span class="line"></span><br><span class="line">storageclass:</span><br><span class="line">  name: ceph-rbd</span><br><span class="line">  pool: rbd</span><br><span class="line">  user_id: k8s</span><br></pre></td></tr></table></figure></p><h1 id="创建kubernetes-命名空间"><a href="#创建kubernetes-命名空间" class="headerlink" title="创建kubernetes 命名空间"></a>创建kubernetes 命名空间</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create namespace ceph</span><br></pre></td></tr></table></figure><h1 id="配置RBAC权限"><a href="#配置RBAC权限" class="headerlink" title="配置RBAC权限"></a>配置RBAC权限</h1><p>Kubernetes&gt; = v1.6使用RBAC为默认权限,rbac.yaml默认在git clone下来的文件夹里面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f ~/ceph-helm/ceph/rbac.yaml</span><br></pre></td></tr></table></figure></p><h1 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h1><p><code>`</code></p><h1 id="Ceph-Monitor"><a href="#Ceph-Monitor" class="headerlink" title="Ceph Monitor"></a>Ceph Monitor</h1><p>$ kubectl label node <nodename> ceph-mon=enabled ceph-mgr=enabled</nodename></p><h1 id="OSD-node"><a href="#OSD-node" class="headerlink" title="OSD node"></a>OSD node</h1><p>$ kubectl label node <nodename> ceph-osd=enabled ceph-osd-device-dev-sdb=enabled ceph-osd-device-dev-sdc=enabled</nodename></p>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
            <tag> ceph </tag>
            
            <tag> helm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ORA-00980同义词转换不再有效</title>
      <link href="/2018/07/31/oracle-error-ora00980.html"/>
      <url>/2018/07/31/oracle-error-ora00980.html</url>
      <content type="html"><![CDATA[<p><strong>问题：</strong><br>ORA-00980: 同义词转换不再有效</p><p><strong>解决方法：</strong><br>使用拥有dba权限的账号sys的登录。<br>执行查找所有失效的同义词，生成删除脚本如下：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">--复制需要删除的同义词</span><br><span class="line">select &apos;drop &apos;   </span><br><span class="line">       || decode(s.owner,</span><br><span class="line">             &apos;PUBLIC&apos;,           </span><br><span class="line">             &apos;public synonym &apos;, </span><br><span class="line">             &apos;synonym &apos; || s.owner || &apos;.&apos;)</span><br><span class="line">       || s.synonym_name</span><br><span class="line">       || &apos;;&apos; as &quot;Dropping invalid synonyms:&quot;</span><br><span class="line">  from dba_synonyms s</span><br><span class="line"> where table_owner not in (&apos;SYSTEM&apos;, &apos;SYS&apos;)    </span><br><span class="line">   and db_link is null  </span><br><span class="line">   and not exists</span><br><span class="line"> (select null    </span><br><span class="line">          from dba_objects o</span><br><span class="line">         where s.table_owner = o.owner     </span><br><span class="line">           and s.table_name = o.object_name);</span><br></pre></td></tr></table></figure><p>处理办法删除重建：<br>SQL&gt;Drop public synonym T_INVEST_ZS;<br>SQL&gt;Create public synonym T_INVEST_ZS; for 用户名.T_INVEST_ZS;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">--复制需要创建的同义词</span><br><span class="line">select &apos;create &apos;   </span><br><span class="line">       || decode(s.owner,</span><br><span class="line">             &apos;PUBLIC&apos;,           </span><br><span class="line">             &apos;public synonym &apos;, </span><br><span class="line">             &apos;synonym &apos; </span><br><span class="line">       || s.owner || &apos;.&apos;)</span><br><span class="line">       || s.synonym_name</span><br><span class="line">       || &apos; for&apos;</span><br><span class="line">       || &apos; 用户名&apos; </span><br><span class="line">       || &apos;.&apos;</span><br><span class="line">       || s.synonym_name</span><br><span class="line">       || &apos;;&apos; as &quot;Dropping invalid synonyms:&quot;</span><br><span class="line">  from dba_synonyms s</span><br><span class="line"> where table_owner not in (&apos;SYSTEM&apos;, &apos;SYS&apos;)    </span><br><span class="line">   and db_link is null  </span><br><span class="line">   and not exists</span><br><span class="line"> (select null    </span><br><span class="line">          from dba_objects o</span><br><span class="line">         where s.table_owner = o.owner     </span><br><span class="line">           and s.table_name = o.object_name);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 日常问题处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vmware虚拟机系统重启后系统无法进入解决</title>
      <link href="/2018/07/27/vmware-os-reboot-fsckext4-no-file.html"/>
      <url>/2018/07/27/vmware-os-reboot-fsckext4-no-file.html</url>
      <content type="html"><![CDATA[<p>故障提示：fsck.ext4: No such file or directory while trying to open /dev/sdc1<br>故障原因：如挂着硬盘无法读取或者被删掉<br><a id="more"></a><br><img src="/images/20180727110011.png" width="100%" height="100%"></p><p>解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入root密码会得到一个 root shell , 重新加载根文件系统:</span><br><span class="line">mount -o remount,rw /</span><br><span class="line">vi /etc/fstab</span><br><span class="line">将 /dev/sdc1那行注释掉，保存退出后</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 日常问题处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vmware </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kubernetes包管理器Helm快速安装</title>
      <link href="/2018/07/25/kubernetes-install-helm.html"/>
      <url>/2018/07/25/kubernetes-install-helm.html</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="https://github.com/helm/helm" target="_blank" rel="noopener">Helm</a> 是由 <a href="https://deis.com/" target="_blank" rel="noopener">Deis</a> 发起的一个开源工具，Helm是查找，共享和使用为Kubernetes构建的软件的最佳方式。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>执行脚本安装 helm 客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash</span><br><span class="line">如下载不来，可以直接下载二进制文件</span><br><span class="line">https://github.com/helm/helm/releases</span><br><span class="line"></span><br><span class="line">解包并将二进制文件helm拷贝到/usr/local/bin目录下</span><br><span class="line"></span><br><span class="line">wget https://storage.googleapis.com/kubernetes-helm/helm-v2.11.0-linux-amd64.tar.gz</span><br><span class="line">tar -zxvf helm-v2.11.0-linux-amd64.tar.gz</span><br><span class="line">cd linux-amd64/</span><br><span class="line">cp helm /usr/local/bin/</span><br></pre></td></tr></table></figure></p><p>安装 tiller 服务端到 kubernetes 集群<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm init</span><br></pre></td></tr></table></figure></p><p>查看 tiller 是否启动成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --namespace=kube-system | grep tiller</span><br></pre></td></tr></table></figure></p><p>如果状态是 ImagePullBackOff ，说明是镜像问题，一般是未拉取到镜像（国内机器拉取不到 gcr.io 下的镜像) ，使用阿里源解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm init --upgrade -i registry.cn-shenzhen.aliyuncs.com/hyman0603/tiller:v2.11.0 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br></pre></td></tr></table></figure></p><p>自Kubernetes 1.6版本开始，API Server启用了RBAC授权。而目前的Tiller部署没有定义授权的ServiceAccount，这会导致访问API Server时被拒绝。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create serviceaccount --namespace kube-system tiller</span><br><span class="line">kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller</span><br><span class="line">kubectl patch deploy --namespace kube-system tiller-deploy -p &apos;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;spec&quot;:&#123;&quot;serviceAccount&quot;:&quot;tiller&quot;&#125;&#125;&#125;&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>更多文档资料可以查看官网<br><a href="https://docs.helm.sh/" target="_blank" rel="noopener">https://docs.helm.sh/</a></p>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>利用 kubeadm 部署 Kubernetes v1.11.x HA 集群</title>
      <link href="/2018/07/24/kubernetes-master-install-for-kubeadm-1-11.html"/>
      <url>/2018/07/24/kubernetes-master-install-for-kubeadm-1-11.html</url>
      <content type="html"><![CDATA[<p>本篇将说明如何透过Kubeadm来部署Kubernetes v1.11版本的高可用性丛集，而本安装主要是参考官方文件中的用kubeadm创建高可用的集群内容来进行，这边将透过HAProxy与Keepalived的结合来实现控制面的Load Balancer与VIP。<br><a id="more"></a></p><table><thead><tr><th>ip</th><th>hosts</th><th>备注</th></tr></thead><tbody><tr><td>172.16.2.30</td><td>server01</td><td>master</td></tr><tr><td>172.16.2.31</td><td>server02</td><td>master</td></tr><tr><td>172.16.2.32</td><td>server03</td><td>master</td></tr><tr><td>172.16.2.33</td><td>server04</td><td>Node</td></tr></tbody></table><h1 id="环境准备-所有节点操作"><a href="#环境准备-所有节点操作" class="headerlink" title="环境准备(所有节点操作)"></a>环境准备(所有节点操作)</h1><h2 id="配置系统相关参数"><a href="#配置系统相关参数" class="headerlink" title="配置系统相关参数"></a>配置系统相关参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 临时禁用selinux</span><br><span class="line"># 永久关闭 修改/etc/sysconfig/selinux文件设置</span><br><span class="line">sed -i &apos;s/SELINUX=permissive/SELINUX=disabled/&apos; /etc/sysconfig/selinux</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"># 临时关闭swap</span><br><span class="line"># 永久关闭 注释/etc/fstab文件里swap相关的行</span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"># 开启forward</span><br><span class="line"># Docker从1.13版本开始调整了默认的防火墙规则</span><br><span class="line"># 禁用了iptables filter表中FOWARD链</span><br><span class="line"># 这样会引起Kubernetes集群中跨Node的Pod无法通信</span><br><span class="line"></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"># 或者关闭防火墙</span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"># 配置转发相关参数，否则可能会出错</span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"># 加载ipvs相关内核模块，如不采用ipvs方式可不操作</span><br><span class="line"># 如果重新开机，需要重新加载</span><br><span class="line">modprobe ip_vs</span><br><span class="line">modprobe ip_vs_rr</span><br><span class="line">modprobe ip_vs_wrr</span><br><span class="line">modprobe ip_vs_sh</span><br><span class="line">modprobe nf_conntrack_ipv4</span><br><span class="line">lsmod | grep ip_vs</span><br></pre></td></tr></table></figure><h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 卸载安装指定版本docker-ce</span><br><span class="line">yum remove -y docker-ce docker-ce-selinux container-selinux</span><br><span class="line">yum install -y --setopt=obsoletes=0 \</span><br><span class="line">docker-ce-17.03.1.ce-1.el7.centos \</span><br><span class="line">docker-ce-selinux-17.03.1.ce-1.el7.centos</span><br><span class="line"></span><br><span class="line">#启动docker</span><br><span class="line">systemctl enable docker &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="安装-kubeadm-kubelet-和-kubectl"><a href="#安装-kubeadm-kubelet-和-kubectl" class="headerlink" title="安装 kubeadm, kubelet 和 kubectl"></a>安装 kubeadm, kubelet 和 kubectl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 配置源</span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">yum install -y kubelet-1.11.0 kubeadm-1.11.0 kubectl-1.11.0 ipvsadm</span><br></pre></td></tr></table></figure><h2 id="配置hosts解析"><a href="#配置hosts解析" class="headerlink" title="配置hosts解析"></a>配置hosts解析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt; /etc/hosts</span><br><span class="line">172.16.2.30 server01</span><br><span class="line">172.16.2.31 server02</span><br><span class="line">172.16.2.32 server03</span><br><span class="line">172.16.2.33 server04</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="配置haproxy代理和keepalived"><a href="#配置haproxy代理和keepalived" class="headerlink" title="配置haproxy代理和keepalived"></a>配置haproxy代理和keepalived</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"># 拉取haproxy镜像</span><br><span class="line">docker pull haproxy:1.7.8-alpine</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">cat &gt;/etc/haproxy/haproxy.cfg&lt;&lt;EOF</span><br><span class="line">global</span><br><span class="line">  log 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  uid 99</span><br><span class="line">  gid 99</span><br><span class="line">  #daemon</span><br><span class="line">  nbproc 1</span><br><span class="line">  pidfile haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  mode http</span><br><span class="line">  log 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  retries 3</span><br><span class="line">  timeout connect 5s</span><br><span class="line">  timeout client 30s</span><br><span class="line">  timeout server 30s</span><br><span class="line">  timeout check 2s</span><br><span class="line"></span><br><span class="line">listen admin_stats</span><br><span class="line">  mode http</span><br><span class="line">  bind 0.0.0.0:1080</span><br><span class="line">  log 127.0.0.1 local0 err</span><br><span class="line">  stats refresh 30s</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats realm   Haproxy\ Statistics</span><br><span class="line">  stats auth    will:will</span><br><span class="line">  stats hide-version</span><br><span class="line">  stats admin if TRUE</span><br><span class="line"></span><br><span class="line">frontend k8s-https</span><br><span class="line">  bind 0.0.0.0:8443</span><br><span class="line">  mode tcp</span><br><span class="line">  #maxconn 50000</span><br><span class="line">  default_backend k8s-https</span><br><span class="line"></span><br><span class="line">backend k8s-https</span><br><span class="line">  mode tcp</span><br><span class="line">  balance roundrobin</span><br><span class="line">  server server01 172.16.2.30:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server server02 172.16.2.31:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server server03 172.16.2.32:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 启动haproxy</span><br><span class="line">docker run -d --name my-haproxy \</span><br><span class="line">-v /etc/haproxy:/usr/local/etc/haproxy:ro \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-p 1080:1080 \</span><br><span class="line">--restart always \</span><br><span class="line">haproxy:1.7.8-alpine</span><br><span class="line"></span><br><span class="line"># 拉取keepalived镜像</span><br><span class="line">docker pull osixia/keepalived:1.4.4</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line"># 载入内核相关模块</span><br><span class="line">lsmod | grep ip_vs</span><br><span class="line">modprobe ip_vs</span><br><span class="line"></span><br><span class="line"># 启动keepalived</span><br><span class="line"># ens160为本次实验172.16.2.0/24网段的所在网卡</span><br><span class="line">docker run --net=host --cap-add=NET_ADMIN \</span><br><span class="line">-e KEEPALIVED_INTERFACE=ens160 \</span><br><span class="line">-e KEEPALIVED_VIRTUAL_IPS=&quot;#PYTHON2BASH:[&apos;172.16.2.29&apos;]&quot; \</span><br><span class="line">-e KEEPALIVED_UNICAST_PEERS=&quot;#PYTHON2BASH:[&apos;172.16.2.30&apos;,&apos;172.16.2.31&apos;,&apos;172.16.2.32&apos;]&quot; \</span><br><span class="line">-e KEEPALIVED_PASSWORD=hello \</span><br><span class="line">--name k8s-keepalived \</span><br><span class="line">--restart always \</span><br><span class="line">-d osixia/keepalived:1.4.4</span><br><span class="line"></span><br><span class="line"># 查看日志</span><br><span class="line"># 会看到两个成为backup 一个成为master</span><br><span class="line">docker logs k8s-keepalived</span><br><span class="line"></span><br><span class="line"># 此时会配置 172.16.2.29 到其中一台机器</span><br><span class="line"># ping测试</span><br><span class="line">ping -c4 172.16.2.29</span><br><span class="line"></span><br><span class="line"># 如果失败后清理后，重新实验</span><br><span class="line">docker rm -f k8s-keepalived</span><br><span class="line">ip a del 172.16.2.29/32 dev ens160</span><br></pre></td></tr></table></figure><h1 id="部署Kubernetes-HA"><a href="#部署Kubernetes-HA" class="headerlink" title="部署Kubernetes HA"></a>部署Kubernetes HA</h1><h2 id="Master1"><a href="#Master1" class="headerlink" title="Master1"></a>Master1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 生成配置文件</span><br><span class="line">CP0_IP=&quot;172.16.2.30&quot;</span><br><span class="line">CP0_HOSTNAME=&quot;server01&quot;</span><br><span class="line">cat &gt;kubeadm-config.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.0</span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- &quot;172.16.2.29&quot;</span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  controlPlaneEndpoint: &quot;172.16.2.29:8443&quot;</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  local:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: &quot;https://127.0.0.1:2379,https://$CP0_IP:2379&quot;</span><br><span class="line">      advertise-client-urls: &quot;https://$CP0_IP:2379&quot;</span><br><span class="line">      listen-peer-urls: &quot;https://$CP0_IP:2380&quot;</span><br><span class="line">      initial-advertise-peer-urls: &quot;https://$CP0_IP:2380&quot;</span><br><span class="line">      initial-cluster: &quot;$CP0_HOSTNAME=https://$CP0_IP:2380&quot;</span><br><span class="line">    serverCertSANs:</span><br><span class="line">      - $CP0_HOSTNAME</span><br><span class="line">      - $CP0_IP</span><br><span class="line">    peerCertSANs:</span><br><span class="line">      - $CP0_HOSTNAME</span><br><span class="line">      - $CP0_IP</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line"></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 初始化</span><br><span class="line"># 注意保存返回的 join 命令</span><br><span class="line">kubeadm init --config kubeadm-config.yaml</span><br></pre></td></tr></table></figure><p>执行以下指令来使用kubeconfig<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">cp -rp /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></p><p>上面完成后，在master01将CA与Certs复制到其他master节点上以供使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export DIR=/etc/kubernetes/</span><br><span class="line">for NODE in server02 server03; do</span><br><span class="line">    echo &quot;------ $&#123;NODE&#125; ------&quot;</span><br><span class="line">    ssh $&#123;NODE&#125; &quot;mkdir -p $&#123;DIR&#125;/pki/etcd&quot;</span><br><span class="line">    scp $&#123;DIR&#125;/pki/ca.crt $&#123;NODE&#125;:$&#123;DIR&#125;/pki/ca.crt</span><br><span class="line">    scp $&#123;DIR&#125;/pki/ca.key $&#123;NODE&#125;:$&#123;DIR&#125;/pki/ca.key</span><br><span class="line">    scp $&#123;DIR&#125;/pki/sa.key $&#123;NODE&#125;:$&#123;DIR&#125;/pki/sa.key</span><br><span class="line">    scp $&#123;DIR&#125;/pki/sa.pub $&#123;NODE&#125;:$&#123;DIR&#125;/pki/sa.pub</span><br><span class="line">    scp $&#123;DIR&#125;/pki/front-proxy-ca.crt $&#123;NODE&#125;:$&#123;DIR&#125;/pki/front-proxy-ca.crt</span><br><span class="line">    scp $&#123;DIR&#125;/pki/front-proxy-ca.key $&#123;NODE&#125;:$&#123;DIR&#125;/pki/front-proxy-ca.key</span><br><span class="line">    scp $&#123;DIR&#125;/pki/etcd/ca.crt $&#123;NODE&#125;:$&#123;DIR&#125;/pki/etcd/ca.crt</span><br><span class="line">    scp $&#123;DIR&#125;/pki/etcd/ca.key $&#123;NODE&#125;:$&#123;DIR&#125;/pki/etcd/ca.key</span><br><span class="line">    scp $&#123;DIR&#125;/admin.conf $&#123;NODE&#125;:$&#123;DIR&#125;/admin.conf</span><br><span class="line">  done</span><br></pre></td></tr></table></figure></p><h2 id="Master2"><a href="#Master2" class="headerlink" title="Master2"></a>Master2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 生成配置文件</span><br><span class="line">CP0_IP=&quot;172.16.2.30&quot;</span><br><span class="line">CP0_HOSTNAME=&quot;server01&quot;</span><br><span class="line">CP1_IP=&quot;172.16.2.31&quot;</span><br><span class="line">CP1_HOSTNAME=&quot;server02&quot;</span><br><span class="line">cat &gt;kubeadm-config.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.0</span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- &quot;172.16.2.29&quot;</span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  controlPlaneEndpoint: 172.16.2.29:8443</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  local:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: &quot;https://127.0.0.1:2379,https://$CP1_IP:2379&quot;</span><br><span class="line">      advertise-client-urls: &quot;https://$CP1_IP:2379&quot;</span><br><span class="line">      listen-peer-urls: &quot;https://$CP1_IP:2380&quot;</span><br><span class="line">      initial-advertise-peer-urls: &quot;https://$CP1_IP:2380&quot;</span><br><span class="line">      initial-cluster: &quot;$CP0_HOSTNAME=https://$CP0_IP:2380,$CP1_HOSTNAME=https://$CP1_IP:2380&quot;</span><br><span class="line">      initial-cluster-state: existing</span><br><span class="line">    serverCertSANs:</span><br><span class="line">      - $CP1_HOSTNAME</span><br><span class="line">      - $CP1_IP</span><br><span class="line">    peerCertSANs:</span><br><span class="line">      - $CP1_HOSTNAME</span><br><span class="line">      - $CP1_IP</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>通过kubeadm alpha来启动master2的kubelet：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubeadm alpha phase certs all --config kubeadm-config.yaml</span><br><span class="line">kubeadm alpha phase kubelet config write-to-disk --config kubeadm-config.yaml</span><br><span class="line">kubeadm alpha phase kubelet write-env-file --config kubeadm-config.yaml</span><br><span class="line">kubeadm alpha phase kubeconfig kubelet --config kubeadm-config.yaml</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure></p><p>将节点添加到etcd集群<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export CP0_IP=172.16.2.30</span><br><span class="line">export CP0_HOSTNAME=server01</span><br><span class="line">export CP1_IP=172.16.2.31</span><br><span class="line">export CP1_HOSTNAME=server02</span><br><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf </span><br><span class="line"></span><br><span class="line">kubectl exec -n kube-system etcd-$&#123;CP0_HOSTNAME&#125; -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --endpoints=https://$&#123;CP0_IP&#125;:2379 member add $&#123;CP1_HOSTNAME&#125; https://$&#123;CP1_IP&#125;:2380</span><br><span class="line">kubeadm alpha phase etcd local --config kubeadm-config.yaml</span><br></pre></td></tr></table></figure></p><p>部署组件并将节点标记为主节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm alpha phase kubeconfig all --config kubeadm-config.yaml</span><br><span class="line">kubeadm alpha phase controlplane all --config kubeadm-config.yaml</span><br><span class="line">kubeadm alpha phase mark-master --config kubeadm-config.yaml</span><br></pre></td></tr></table></figure></p><p>执行以下指令来使用kubeconfig<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">cp -rp /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></p><h2 id="Master3"><a href="#Master3" class="headerlink" title="Master3"></a>Master3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># 生成配置文件</span><br><span class="line">CP0_IP=&quot;172.16.2.30&quot;</span><br><span class="line">CP0_HOSTNAME=&quot;server01&quot;</span><br><span class="line">CP1_IP=&quot;172.16.2.31&quot;</span><br><span class="line">CP1_HOSTNAME=&quot;server02&quot;</span><br><span class="line">CP2_IP=&quot;172.16.2.32&quot;</span><br><span class="line">CP2_HOSTNAME=&quot;server03&quot;</span><br><span class="line">cat &gt;kubeadm-config.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.0</span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- &quot;172.16.2.29&quot;</span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  controlPlaneEndpoint: &quot;172.16.2.29:8443&quot;</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  local:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: &quot;https://127.0.0.1:2379,https://$CP2_IP:2379&quot;</span><br><span class="line">      advertise-client-urls: &quot;https://$CP2_IP:2379&quot;</span><br><span class="line">      listen-peer-urls: &quot;https://$CP2_IP:2380&quot;</span><br><span class="line">      initial-advertise-peer-urls: &quot;https://$CP2_IP:2380&quot;</span><br><span class="line">      initial-cluster: &quot;$CP0_HOSTNAME=https://$CP0_IP:2380,$CP1_HOSTNAME=https://$CP1_IP:2380,$CP2_HOSTNAME=https://$CP2_IP:2380&quot;</span><br><span class="line">      initial-cluster-state: existing</span><br><span class="line">    serverCertSANs:</span><br><span class="line">      - $CP2_HOSTNAME</span><br><span class="line">      - $CP2_IP</span><br><span class="line">    peerCertSANs:</span><br><span class="line">      - $CP2_HOSTNAME</span><br><span class="line">      - $CP2_IP</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>通过kubeadm alpha来启动master3的kubelet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubeadm alpha phase certs all --config kubeadm-config.yaml</span><br><span class="line">kubeadm alpha phase kubelet config write-to-disk --config kubeadm-config.yaml</span><br><span class="line">kubeadm alpha phase kubelet write-env-file --config kubeadm-config.yaml</span><br><span class="line">kubeadm alpha phase kubeconfig kubelet --config kubeadm-config.yaml</span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure></p><p>将节点添加到etcd集群<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export CP0_IP=172.16.2.30</span><br><span class="line">export CP0_HOSTNAME=server01</span><br><span class="line">export CP2_IP=172.16.2.32</span><br><span class="line">export CP2_HOSTNAME=server03</span><br><span class="line">export KUBECONFIG=/etc/kubernetes/admin.conf </span><br><span class="line"></span><br><span class="line">kubectl exec -n kube-system etcd-$&#123;CP0_HOSTNAME&#125; -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --endpoints=https://$&#123;CP0_IP&#125;:2379 member add $&#123;CP2_HOSTNAME&#125; https://$&#123;CP2_IP&#125;:2380</span><br><span class="line">kubeadm alpha phase etcd local --config kubeadm-config.yaml</span><br></pre></td></tr></table></figure></p><p>部署组件并将节点标记为主节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm alpha phase kubeconfig all --config kubeadm-config.yaml</span><br><span class="line">kubeadm alpha phase controlplane all --config kubeadm-config.yaml</span><br><span class="line">kubeadm alpha phase mark-master --config kubeadm-config.yaml</span><br></pre></td></tr></table></figure></p><p>执行以下指令来使用kubeconfig<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">cp -rp /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure></p><h1 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h1><p>只有网络插件也安装配置完成之后，才能会显示为ready状态<br>设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure></p><h2 id="下载flannel"><a href="#下载flannel" class="headerlink" title="下载flannel"></a>下载flannel</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 修改配置</span><br><span class="line"># 此处的ip配置要与上面kubeadm的pod-network一致</span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span><br><span class="line">      &quot;Backend&quot;: &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;vxlan&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># 如果Node有多个网卡的话，参考flannel issues 39701，</span><br><span class="line"># https://github.com/kubernetes/kubernetes/issues/39701</span><br><span class="line"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span><br><span class="line"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span><br><span class="line"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        command:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"># 修改镜像</span><br><span class="line">image: registry.cn-shenzhen.aliyuncs.com/hyman0603/flannel:v0.10.0-amd64</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>如不能部署起来，可能是配置文件错误，还有就是切记把swapoff -a把交换分区关闭，否则会无法进行下一步操作</p>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ceph luminous 安装配置</title>
      <link href="/2018/07/23/ceph-cluster-deploy-luminous.html"/>
      <url>/2018/07/23/ceph-cluster-deploy-luminous.html</url>
      <content type="html"><![CDATA[<p><strong>备注：</strong><br>简易安装ceph luminous版本，用于kubernetes PV，详情移至Ceph官网，部署Ceph至少一个MON，三个OSD。Ceph 分布式存储集群有三大组件组成，分为：Ceph Monitor、Ceph OSD、Ceph MDS，后边使用对象存储和块存储时，MDS 非必须安装，只有当使用 Cephfs 文件存储时，才需要安装。</p><ul><li><p>自动部署osd可以采用 ceph-deploy ，也可以采用 ceph-disk 命令</p></li><li><p>luminous版本中，删除OSD可以直接使用 ceph osd purge 命令，比较省心</p></li><li><p>生产环境中磁盘的挂载尽量采用uuid/partuuid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://docs.ceph.com/docs/master/start/quick-ceph-deploy/</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><table><thead><tr><th>ip</th><th>hosts</th><th>备注</th></tr></thead><tbody><tr><td>172.16.2.30</td><td>server01</td><td>mon</td></tr><tr><td>172.16.2.31</td><td>server02</td><td>mon、osd，一块硬盘sdb</td></tr><tr><td>172.16.2.32</td><td>server03</td><td>mon、osd，三块硬盘sdb、sbc、sbd</td></tr><tr><td>172.16.2.33</td><td>server04</td><td>osd，一块硬盘sdb</td></tr></tbody></table><h1 id="环境准备-无必要说明，基本在172-16-2-30-server01操作"><a href="#环境准备-无必要说明，基本在172-16-2-30-server01操作" class="headerlink" title="环境准备(无必要说明，基本在172.16.2.30 server01操作)"></a>环境准备(无必要说明，基本在172.16.2.30 server01操作)</h1><h2 id="基础阿里源"><a href="#基础阿里源" class="headerlink" title="基础阿里源"></a>基础阿里源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#使用阿里源</span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /home/CentOS-Base.repo.bak</span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure><h2 id="ceph阿里源"><a href="#ceph阿里源" class="headerlink" title="ceph阿里源"></a>ceph阿里源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#创建ceph源</span><br><span class="line">echo &apos;</span><br><span class="line">[ceph]</span><br><span class="line">name=ceph</span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-luminous/el7/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">[ceph-noarch]</span><br><span class="line">name=cephnoarch</span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-luminous/el7/noarch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">[ceph-source]</span><br><span class="line">name=ceph-source</span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-luminous/el7/SRPMS/</span><br><span class="line">gpgcheck=0</span><br><span class="line">&apos;&gt;/etc/yum.repos.d/ceph.repo</span><br><span class="line">#生成缓存</span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure><h2 id="关闭selinux、防火墙-每台服务器运行"><a href="#关闭selinux、防火墙-每台服务器运行" class="headerlink" title="关闭selinux、防火墙(每台服务器运行)"></a>关闭selinux、防火墙(每台服务器运行)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line">firewall-cmd --state</span><br><span class="line">sed -i &apos;/^SELINUX=.*/c SELINUX=disabled&apos; /etc/selinux/config</span><br><span class="line">sed -i &apos;s/^SELINUXTYPE=.*/SELINUXTYPE=disabled/g&apos; /etc/selinux/config</span><br><span class="line">grep --color=auto &apos;^SELINUX&apos; /etc/selinux/config</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><h2 id="时间同步（每台服务器运行）"><a href="#时间同步（每台服务器运行）" class="headerlink" title="时间同步（每台服务器运行）"></a>时间同步（每台服务器运行）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install ntp -y</span><br><span class="line">/usr/sbin/ntpdate ntp6.aliyun.com </span><br><span class="line">echo &quot;*/3 * * * * /usr/sbin/ntpdate ntp6.aliyun.com  &amp;&gt; /dev/null&quot; &gt; /tmp/crontab</span><br><span class="line">crontab /tmp/crontab</span><br></pre></td></tr></table></figure><h2 id="hosts（每台服务器运行）"><a href="#hosts（每台服务器运行）" class="headerlink" title="hosts（每台服务器运行）"></a>hosts（每台服务器运行）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;#ceph</span><br><span class="line">172.16.2.30 server01</span><br><span class="line">172.16.2.31 server02</span><br><span class="line">172.16.2.32 server03</span><br><span class="line">172.16.2.33 server03</span><br><span class="line">&apos;&gt;&gt;/etc/hosts</span><br></pre></td></tr></table></figure><h2 id="添加硬盘、查看状态，无需分区、格式化"><a href="#添加硬盘、查看状态，无需分区、格式化" class="headerlink" title="添加硬盘、查看状态，无需分区、格式化"></a>添加硬盘、查看状态，无需分区、格式化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 如在server04、server03、server02添加硬盘，如server03</span><br><span class="line">[root@server03 ~]# lsblk </span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">fd0               2:0    1    4K  0 disk </span><br><span class="line">sda               8:0    0  100G  0 disk </span><br><span class="line">├─sda1            8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2            8:2    0   99G  0 part </span><br><span class="line">  ├─centos-root 253:0    0   50G  0 lvm  /</span><br><span class="line">  ├─centos-swap 253:1    0  7.9G  0 lvm  </span><br><span class="line">  └─centos-home 253:2    0 41.1G  0 lvm  /home</span><br><span class="line">sdb               8:16   0   10G  0 disk </span><br><span class="line">sdc               8:32   0   10G  0 disk </span><br><span class="line">sdd               8:48   0   10G  0 disk </span><br><span class="line">sr0              11:0    1  4.2G  0 rom</span><br></pre></td></tr></table></figure><h2 id="免密访问"><a href="#免密访问" class="headerlink" title="免密访问"></a>免密访问</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-kengen</span><br><span class="line">ssh-copy-id root@172.16.2.31</span><br><span class="line">ssh-copy-id root@172.16.2.32</span><br></pre></td></tr></table></figure><h1 id="安装Ceph"><a href="#安装Ceph" class="headerlink" title="安装Ceph"></a>安装Ceph</h1><h2 id="更新仓库并安装ceph-deploy"><a href="#更新仓库并安装ceph-deploy" class="headerlink" title="更新仓库并安装ceph-deploy"></a>更新仓库并安装ceph-deploy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update &amp;&amp; yum install ceph-deploy -y</span><br></pre></td></tr></table></figure><h2 id="创建集群配置"><a href="#创建集群配置" class="headerlink" title="创建集群配置"></a>创建集群配置</h2><p>ceph-deploy 工具部署集群前需要创建一些集群配置信息，其保存在 ceph.conf 文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建集群配置目录</span><br><span class="line">mkdir ceph-cluster &amp;&amp; cd ceph-cluster</span><br><span class="line"># 创建 monitor-node</span><br><span class="line">ceph-deploy new server01 server02 server03</span><br><span class="line"># 追加 OSD 副本数量(测试虚拟机总共有3台)</span><br><span class="line">echo &quot;osd pool default size = 3&quot; &gt;&gt; ceph.conf</span><br></pre></td></tr></table></figure></p><h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><p>创建集群使用 ceph-deploy 工具即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># 安装 ceph</span><br><span class="line">ceph-deploy install server01 server02 server03 server04</span><br><span class="line">#yum install -y ceph-radosgw ceph ceph-release ceph-common</span><br><span class="line"># 初始化 monitor node 和 秘钥文件</span><br><span class="line">ceph-deploy mon create-initial</span><br><span class="line"># 部署 ceph cli 工具和秘钥文件,以便在各个 Node 上使用 ceph 命令时，无需指定 monitor 地址和 ceph.client.admin.keyring 密钥</span><br><span class="line">ceph-deploy admin server01 server02 server03 server04</span><br><span class="line"># 部署管理守护进程</span><br><span class="line">ceph-deploy mgr create server01 server02 server03</span><br><span class="line"># 添加osd存储，添加硬盘，生产环境需要在OSD节点添加</span><br><span class="line">ceph-deploy osd create --data /dev/sdb server02</span><br><span class="line">ceph-deploy osd create --data /dev/sdb server03</span><br><span class="line">ceph-deploy osd create --data /dev/sdc server03</span><br><span class="line">ceph-deploy osd create --data /dev/sdd server03</span><br><span class="line">ceph-deploy osd create --data /dev/sdb server04</span><br><span class="line"></span><br><span class="line"># 假如重新部署ceph，删ceph之前没有删除osd，可以使用以下命令</span><br><span class="line">lvscan</span><br><span class="line">vgscan</span><br><span class="line">pvscan</span><br><span class="line"></span><br><span class="line">lvremove</span><br><span class="line">vgremove</span><br><span class="line">pvremove</span><br><span class="line"></span><br><span class="line"># 检测集群状态</span><br><span class="line">ceph health</span><br><span class="line"># 查看集群状态</span><br><span class="line">ceph -s</span><br><span class="line"></span><br><span class="line">#启动dashboard</span><br><span class="line">ceph mgr module enable dashboard</span><br><span class="line">ceph config-key put mgr/dashboard/server_addr 172.16.2.30</span><br><span class="line">ceph config-key put mgr/dashboard/server_port 7000</span><br><span class="line"></span><br><span class="line"># 重置集群重新部署</span><br><span class="line">ceph-deploy purge &#123;ceph-node&#125; [&#123;ceph-node&#125;]</span><br><span class="line">ceph-deploy purgedata &#123;ceph-node&#125; [&#123;ceph-node&#125;]</span><br><span class="line">ceph-deploy forgetkeys</span><br><span class="line">rm ceph.*</span><br></pre></td></tr></table></figure></p><h2 id="新增组件-如mon"><a href="#新增组件-如mon" class="headerlink" title="新增组件,如mon"></a>新增组件,如mon</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 创建 MDS</span><br><span class="line">ceph-deploy mds create server01</span><br><span class="line"># 创建 RGW</span><br><span class="line">ceph-deploy rgw create server01</span><br><span class="line"># 增加 monitor</span><br><span class="line">echo &quot;public network = 172.16.2.0/24&quot; &gt;&gt; ceph.conf</span><br><span class="line">ceph-deploy --overwrite-conf mon add server02</span><br><span class="line">ceph-deploy --overwrite-conf mon add server03</span><br><span class="line"># 查看仲裁信息</span><br><span class="line">ceph quorum_status --format json-pretty</span><br></pre></td></tr></table></figure><h2 id="创建块设备"><a href="#创建块设备" class="headerlink" title="创建块设备"></a>创建块设备</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 创建存储池</span><br><span class="line">rados mkpool data</span><br><span class="line"># 创建 image</span><br><span class="line">rbd create data --size 10240 -p data</span><br><span class="line"># 关闭不支持特性</span><br><span class="line">rbd feature disable data exclusive-lock, object-map, fast-diff, deep-flatten -p data</span><br><span class="line"># 映射(每个节点都要映射)</span><br><span class="line">rbd map data --name client.admin -p data</span><br><span class="line"># 格式化块设备(单节点即可)</span><br><span class="line">mkfs.xfs /dev/rbd0</span><br></pre></td></tr></table></figure><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><p><code>`</code></p><p>#增加pool<br>ceph osd pool create kube 128</p><p>#删除 pool,先在ceph.conf 增加下面:<br>mon_allow_pool_delete = true</p><p>#重启ceph-mon：<br>systemctl restart ceph-mon@server01</p><p>#删除<br>ceph osd pool rm kube kube –yes-i-really-really-mean-it</p>]]></content>
      
      <categories>
          
          <category> Ceph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx根据指定IP转发链接</title>
      <link href="/2018/07/09/nginx-remote-addr-rewrite.html"/>
      <url>/2018/07/09/nginx-remote-addr-rewrite.html</url>
      <content type="html"><![CDATA[<p><strong>需求</strong><br>因项目变更，外网官网跳转到维护界面，指定ip地址能够正常访问<br><a id="more"></a></p><p><strong>第一种情形：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#可以作为nginx的停服更新使用，仅允许172.16.2.80访问,其他IP都rewrite到停服页面</span><br><span class="line"></span><br><span class="line">set $flag 0;</span><br><span class="line"></span><br><span class="line">                if ( $remote_addr ~* ^172\.16\.2\.80 ) &#123;</span><br><span class="line">                        set $flag &quot;$&#123;flag&#125;1&quot;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if ($flag != &quot;01&quot;) &#123;</span><br><span class="line">                   return 301 https://172.16.2.20/weihu.html;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 如前段非nginx，可使用http_x_forwarded_for</span><br></pre></td></tr></table></figure></p><p><strong>第二种情形</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#访问某个php应用的时候我只想让内部的某个IP访问，其他的IP都转到另一个PHP上</span><br><span class="line">访问test.php，且IP不等172.16.2.80的跳转到weihu.php:</span><br><span class="line">set $test &apos;&apos;;</span><br><span class="line">if ( $request_uri ~* /img/test.php ) &#123;</span><br><span class="line">        set $test P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if ( $http_x_forwarded_for !~* ^172\.16\.2\.80.* ) &#123;</span><br><span class="line">        set $test &quot;$&#123;test&#125;C&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#当条件符合 访问test.php并且 ip不是172.16.2.80的转发到weihu.php</span><br><span class="line">if ( $test = PC ) &#123; </span><br><span class="line">   rewrite ^(.*)$ /img/weihu.php permanent;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于Docker Swarm 构建MongoDB分片副本集群</title>
      <link href="/2018/07/04/docker-swarm-mongodb-replication.html"/>
      <url>/2018/07/04/docker-swarm-mongodb-replication.html</url>
      <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>两台服务器，建立 Docker Swarm 集群，一个 Manager，一个 Worker。</p><p>docker 版本：18-06<br>mongo 版本：3.6<br>172.16.2.30 server01<br>172.16.2.31 server02<br><a id="more"></a></p><h1 id="MongoDB-集群架构设计"><a href="#MongoDB-集群架构设计" class="headerlink" title="MongoDB 集群架构设计"></a>MongoDB 集群架构设计</h1><p><img src="/images/docker-swarm-mongodb.png" width="100%" height="100%"></p><h1 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h1><h2 id="Manager节点创建集群网络"><a href="#Manager节点创建集群网络" class="headerlink" title="Manager节点创建集群网络"></a>Manager节点创建集群网络</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d overlay --attachable mongo</span><br></pre></td></tr></table></figure><h2 id="所有节点创建相关文件夹"><a href="#所有节点创建相关文件夹" class="headerlink" title="所有节点创建相关文件夹"></a>所有节点创建相关文件夹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /root/mongo/config /root/mongo/shard1 /root/mongo/shard2 /root/mongo/shard3</span><br></pre></td></tr></table></figure><h2 id="Manager节点创建-stack-yml"><a href="#Manager节点创建-stack-yml" class="headerlink" title="Manager节点创建 stack.yml"></a>Manager节点创建 stack.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3.3&apos;</span><br><span class="line">services:</span><br><span class="line">  mongors1n1:</span><br><span class="line">    # docker 中国的镜像加速地址</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    command: mongod --shardsvr --replSet shard1 --dbpath /data/db --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /root/mongo/shard1:/data/db</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        # 指定在服务器 server01 上启动</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname==server01</span><br><span class="line">  mongors2n1:</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    command: mongod --shardsvr --replSet shard2 --dbpath /data/db --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /root/mongo/shard2:/data/db</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname==server01</span><br><span class="line">  mongors3n1:</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    command: mongod --shardsvr --replSet shard3 --dbpath /data/db --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /root/mongo/shard3:/data/db</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname==server01</span><br><span class="line">  mongors1n2:</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    command: mongod --shardsvr --replSet shard1 --dbpath /data/db --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /root/mongo/shard1:/data/db</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname==server01</span><br><span class="line">  mongors2n2:</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    command: mongod --shardsvr --replSet shard2 --dbpath /data/db --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /root/mongo/shard2:/data/db</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname==server01</span><br><span class="line">  mongors3n2:</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    command: mongod --shardsvr --replSet shard3 --dbpath /data/db --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /root/mongo/shard3:/data/db</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname==server01</span><br><span class="line">  mongors1n3:</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    command: mongod --shardsvr --replSet shard1 --dbpath /data/db --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /root/mongo/shard1:/data/db</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname==server02</span><br><span class="line">  mongors2n3:</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    command: mongod --shardsvr --replSet shard2 --dbpath /data/db --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /root/mongo/shard2:/data/db</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname==server02</span><br><span class="line">  mongors3n3:</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    command: mongod --shardsvr --replSet shard3 --dbpath /data/db --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /root/mongo/shard3:/data/db</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname==server02</span><br><span class="line">  cfg1:</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    command: mongod --configsvr --replSet cfgrs --smallfiles --dbpath /data/db --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /root/mongo/config:/data/db</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname==server01</span><br><span class="line">  cfg2:</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    command: mongod --configsvr --replSet cfgrs --smallfiles --dbpath /data/db --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /root/mongo/config:/data/db</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname==server01</span><br><span class="line">  cfg3:</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    command: mongod --configsvr --replSet cfgrs --smallfiles --dbpath /data/db --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - /root/mongo/config:/data/db</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname==server01</span><br><span class="line">  mongos:</span><br><span class="line">    image: registry.docker-cn.com/library/mongo</span><br><span class="line">    # mongo 3.6 版默认绑定IP为 127.0.0.1，此处绑定 0.0.0.0 是允许其他容器或主机可以访问</span><br><span class="line">    command: mongos --configdb cfgrs/cfg1:27017,cfg2:27017,cfg3:27017 --bind_ip 0.0.0.0 --port 27017</span><br><span class="line">    networks:</span><br><span class="line">      - mongo</span><br><span class="line">    # 映射宿主机的 27017 端口</span><br><span class="line">    ports:</span><br><span class="line">      - 27017:27017</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">    depends_on:</span><br><span class="line">      - cfg1</span><br><span class="line">      - cfg2</span><br><span class="line">      - cfg3</span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">      # 在集群内的每一台服务器上都启动一个容器</span><br><span class="line">      mode: global</span><br><span class="line">networks:</span><br><span class="line">  mongo:</span><br><span class="line">    external: true</span><br></pre></td></tr></table></figure><h2 id="启动服务，在Manager节点上执行"><a href="#启动服务，在Manager节点上执行" class="headerlink" title="启动服务，在Manager节点上执行"></a>启动服务，在Manager节点上执行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c stack.yml mongo</span><br></pre></td></tr></table></figure><h2 id="Manager节点查看服务的启动情况"><a href="#Manager节点查看服务的启动情况" class="headerlink" title="Manager节点查看服务的启动情况"></a>Manager节点查看服务的启动情况</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker service ls</span><br><span class="line"></span><br><span class="line">正常情况下，会出现如下结果：</span><br><span class="line"></span><br><span class="line">[root@server01 mongo]# docker service ls</span><br><span class="line">ID                  NAME                      MODE                REPLICAS            IMAGE                                         PORTS</span><br><span class="line">itmtld6o6ldv        mongo_cfg1                replicated          0/1                 registry.docker-cn.com/library/mongo:latest   </span><br><span class="line">brlsgen2xluh        mongo_cfg2                replicated          0/1                 registry.docker-cn.com/library/mongo:latest   </span><br><span class="line">yx4rg2p21pyz        mongo_cfg3                replicated          1/1                 registry.docker-cn.com/library/mongo:latest   </span><br><span class="line">kn4zlkff55ly        mongo_mongors1n1          replicated          1/1                 registry.docker-cn.com/library/mongo:latest   </span><br><span class="line">8siujq2xe4mt        mongo_mongors1n2          replicated          0/1                 registry.docker-cn.com/library/mongo:latest   </span><br><span class="line">tv6epypyk65n        mongo_mongors1n3          replicated          0/1                 registry.docker-cn.com/library/mongo:latest   </span><br><span class="line">ri7zzhp8v5c6        mongo_mongors2n1          replicated          1/1                 registry.docker-cn.com/library/mongo:latest   </span><br><span class="line">g9v90ifpupns        mongo_mongors2n2          replicated          0/1                 registry.docker-cn.com/library/mongo:latest   </span><br><span class="line">t5ircpm49ojl        mongo_mongors2n3          replicated          0/1                 registry.docker-cn.com/library/mongo:latest   </span><br><span class="line">59o5883orn01        mongo_mongors3n1          replicated          1/1                 registry.docker-cn.com/library/mongo:latest   </span><br><span class="line">wvemmmjv7mx6        mongo_mongors3n2          replicated          0/1                 registry.docker-cn.com/library/mongo:latest   </span><br><span class="line">5307by34ep0j        mongo_mongors3n3          replicated          0/1                 registry.docker-cn.com/library/mongo:latest   </span><br><span class="line">bs0ols6tbijc        mongo_mongos              global              3/3                 registry.docker-cn.com/library/mongo:latest   *:27017-&gt;27017/tcp</span><br></pre></td></tr></table></figure><h1 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h1><h2 id="Manager节点初始化-Mongo-配置集群"><a href="#Manager节点初始化-Mongo-配置集群" class="headerlink" title="Manager节点初始化 Mongo 配置集群"></a>Manager节点初始化 Mongo 配置集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it $(docker ps | grep &quot;cfg1&quot; | awk &apos;&#123; print $1 &#125;&apos;) bash -c &quot;echo &apos;rs.initiate(&#123;_id: \&quot;cfgrs\&quot;,configsvr: true, members: [&#123; _id : 0, host : \&quot;cfg1\&quot; &#125;,&#123; _id : 1, host : \&quot;cfg2\&quot; &#125;, &#123; _id : 2, host : \&quot;cfg3\&quot; &#125;]&#125;)&apos; | mongo&quot;</span><br></pre></td></tr></table></figure><h2 id="Manager节点初始化三个-Mongo-数据集群"><a href="#Manager节点初始化三个-Mongo-数据集群" class="headerlink" title="Manager节点初始化三个 Mongo 数据集群"></a>Manager节点初始化三个 Mongo 数据集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it $(docker ps | grep &quot;mongors1n1&quot; | awk &apos;&#123; print $1 &#125;&apos;) bash -c &quot;echo &apos;rs.initiate(&#123;_id : \&quot;shard1\&quot;, members: [&#123; _id : 0, host : \&quot;mongors1n1\&quot; &#125;,&#123; _id : 1, host : \&quot;mongors1n2\&quot; &#125;,&#123; _id : 2, host : \&quot;mongors1n3\&quot;, arbiterOnly: true &#125;]&#125;)&apos; | mongo&quot;</span><br><span class="line"></span><br><span class="line">docker exec -it $(docker ps | grep &quot;mongors2n1&quot; | awk &apos;&#123; print $1 &#125;&apos;) bash -c &quot;echo &apos;rs.initiate(&#123;_id : \&quot;shard2\&quot;, members: [&#123; _id : 0, host : \&quot;mongors2n1\&quot; &#125;,&#123; _id : 1, host : \&quot;mongors2n2\&quot; &#125;,&#123; _id : 2, host : \&quot;mongors2n3\&quot;, arbiterOnly: true &#125;]&#125;)&apos; | mongo&quot;</span><br><span class="line"></span><br><span class="line">docker exec -it $(docker ps | grep &quot;mongors3n1&quot; | awk &apos;&#123; print $1 &#125;&apos;) bash -c &quot;echo &apos;rs.initiate(&#123;_id : \&quot;shard3\&quot;, members: [&#123; _id : 0, host : \&quot;mongors3n1\&quot; &#125;,&#123; _id : 1, host : \&quot;mongors3n2\&quot; &#125;,&#123; _id : 2, host : \&quot;mongors3n3\&quot;, arbiterOnly: true &#125;]&#125;)&apos; | mongo&quot;</span><br></pre></td></tr></table></figure><h2 id="Manager节点将三个数据集群当做分片加入-mongos"><a href="#Manager节点将三个数据集群当做分片加入-mongos" class="headerlink" title="Manager节点将三个数据集群当做分片加入 mongos"></a>Manager节点将三个数据集群当做分片加入 mongos</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it $(docker ps | grep &quot;mongos&quot; | awk &apos;&#123; print $1 &#125;&apos;) bash -c &quot;echo &apos;sh.addShard(\&quot;shard1/mongors1n1:27017,mongors1n2:27017,mongors1n3:27017\&quot;)&apos; | mongo &quot;</span><br><span class="line"></span><br><span class="line">docker exec -it $(docker ps | grep &quot;mongos&quot; | awk &apos;&#123; print $1 &#125;&apos;) bash -c &quot;echo &apos;sh.addShard(\&quot;shard2/mongors2n1:27017,mongors2n3:27017,mongors2n3:27017\&quot;)&apos; | mongo &quot;</span><br><span class="line"></span><br><span class="line">docker exec -it $(docker ps | grep &quot;mongos&quot; | awk &apos;&#123; print $1 &#125;&apos;) bash -c &quot;echo &apos;sh.addShard(\&quot;shard3/mongors3n1:27017,mongors3n2:27017,mongors3n3:27017\&quot;)&apos; | mongo &quot;</span><br></pre></td></tr></table></figure><h2 id="连接集群"><a href="#连接集群" class="headerlink" title="连接集群"></a>连接集群</h2><p>内部：在 mongo 网络下的容器，通过 mongos:27017 连接</p><p>外部：通过 IP:27017 连接，IP 可以为两台服务的中的一个的 IP</p><p>后期可以添加mongdodb可视化工具：mongodb-express</p>]]></content>
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> swarm </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle 11g2 DataGuard简单部署</title>
      <link href="/2018/06/19/oracle-deployment-dataguard.html"/>
      <url>/2018/06/19/oracle-deployment-dataguard.html</url>
      <content type="html"><![CDATA[<p>环境：<br>centos 7<br>redhat 6.4<br>oracle 11.2.0.4<br><a id="more"></a><br>172.16.2.31 primary<br>172.16.2.32 standby<br>172.16.2.19 testdb</p><h1 id="修改主库静态监听"><a href="#修改主库静态监听" class="headerlink" title="修改主库静态监听"></a>修改主库静态监听</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim listener.ora</span><br><span class="line"></span><br><span class="line">LISTENER =</span><br><span class="line">  (DESCRIPTION_LIST =</span><br><span class="line">    (DESCRIPTION =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = primary)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">SID_LIST_LISTENER=</span><br><span class="line">  (SID_LIST=</span><br><span class="line">    (SID_DESC=</span><br><span class="line">       (GLOBAL_DBNAME=primary)</span><br><span class="line">       (SID_NAME=orcl)</span><br><span class="line">     )</span><br><span class="line">  )</span><br><span class="line">ADR_BASE_LISTENER = /app/oracle11g</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim tnsnames.ora</span><br><span class="line"></span><br><span class="line">PRIMARY =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = primary)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = primary)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">STANDBY =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = standby)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = standby)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h1 id="修改主库初始化参数文件"><a href="#修改主库初始化参数文件" class="headerlink" title="修改主库初始化参数文件"></a>修改主库初始化参数文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">startup mount;</span><br><span class="line">alter database archivelog;</span><br><span class="line">alter database force logging;</span><br><span class="line">alter database open;</span><br><span class="line">alter system set db_unique_name=primary scope=spfile;</span><br><span class="line">alter system set log_archive_config = &apos;DG_CONFIG=(primary,standby)&apos; scope=spfile;</span><br><span class="line">alter system set log_archive_dest_1 = &apos;LOCATION=/app/oracle11g/archivelog valid_for=(all_logfiles,all_roles) db_unique_name=primary&apos; scope=spfile;</span><br><span class="line">alter system set log_archive_dest_2 = &apos;SERVICE=standby lgwr sync valid_for=(online_logfiles,primary_role) db_unique_name=standby&apos; scope=spfile;</span><br><span class="line">alter system set log_archive_dest_state_1 = ENABLE;</span><br><span class="line">alter system set log_archive_dest_state_2 = ENABLE;</span><br><span class="line">alter system set fal_server = standby scope=spfile;</span><br><span class="line">alter system set fal_client = primary scope=spfile;</span><br><span class="line">alter system set log_archive_max_processes=5 scope=spfile;</span><br><span class="line">alter system set standby_file_management=AUTO scope=spfile;</span><br><span class="line">create pfile from spfile;</span><br></pre></td></tr></table></figure><h1 id="在主库pfile参数文件和密码文件，并且拷贝到备库相应位置"><a href="#在主库pfile参数文件和密码文件，并且拷贝到备库相应位置" class="headerlink" title="在主库pfile参数文件和密码文件，并且拷贝到备库相应位置"></a>在主库pfile参数文件和密码文件，并且拷贝到备库相应位置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $ORACLE_HOME/dbs</span><br><span class="line">scp initorcl.ora orapworcl oracle@172.16.2.32:/$ORACLE_HOME/dbs</span><br></pre></td></tr></table></figure><h1 id="修改备库静态监听"><a href="#修改备库静态监听" class="headerlink" title="修改备库静态监听"></a>修改备库静态监听</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim listener.ora</span><br><span class="line"></span><br><span class="line">LISTENER =</span><br><span class="line">  (DESCRIPTION_LIST =</span><br><span class="line">    (DESCRIPTION =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = standby)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">SID_LIST_LISTENER=</span><br><span class="line">  (SID_LIST=</span><br><span class="line">    (SID_DESC=</span><br><span class="line">       (GLOBAL_DBNAME=standby)</span><br><span class="line">       (SID_NAME=orcl)</span><br><span class="line">     )</span><br><span class="line">  )</span><br><span class="line">ADR_BASE_LISTENER = /app/oracle11g</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim tnsnames.ora</span><br><span class="line"></span><br><span class="line">PRIMARY =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = primary)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = primary)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">STANDBY =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = standby)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = standby)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h1 id="修改备库初始化参数文件"><a href="#修改备库初始化参数文件" class="headerlink" title="修改备库初始化参数文件"></a>修改备库初始化参数文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /app/oracle11g/fast_recovery_area/orcl</span><br><span class="line">mkdir -p /app/oracle11g/admin/orcl/adump</span><br><span class="line">mkdir -p /app/oracle11g/&#123;standbylog,archivelog&#125;</span><br><span class="line">mkdir -p /app/oracle11g/oradata/orcl</span><br><span class="line"></span><br><span class="line">startup nomount</span><br><span class="line">create spfile from pfile=&apos;/app/oracle11g/product/11.2.0/dbhome_1/dbs/initorcl.ora&apos;;</span><br><span class="line">shutdown abort;</span><br><span class="line">alter system set db_unique_name=standby scope=spfile;</span><br><span class="line">alter system set log_archive_config=&apos;DG_CONFIG=(primary,standby)&apos; scope=spfile;</span><br><span class="line">alter system set log_archive_dest_1 = &apos;LOCATION=/app/oracle11g/archivelog valid_for=(all_logfiles,all_roles) db_unique_name=standby&apos; scope=spfile;</span><br><span class="line">alter system set log_archive_dest_2 = &apos;SERVICE=primary lgwr sync valid_for=(online_logfiles,primary_role) db_unique_name=primary&apos; scope=spfile;</span><br><span class="line">alter system set fal_server=primary scope=spfile;</span><br><span class="line">alter system set fal_client=standby scope=spfile;</span><br><span class="line">shutdown abort;</span><br><span class="line">startup nomount;</span><br></pre></td></tr></table></figure><h1 id="测试主库备库是否tnsping正常"><a href="#测试主库备库是否tnsping正常" class="headerlink" title="测试主库备库是否tnsping正常"></a>测试主库备库是否tnsping正常</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlplus sys/123456@primary as sysdba</span><br><span class="line">sqlplus sys/123456@standby as sysdba </span><br><span class="line">tnsping standby</span><br><span class="line">tnsping primary</span><br></pre></td></tr></table></figure><h1 id="在主库通过Rman-Duplicate创建备库"><a href="#在主库通过Rman-Duplicate创建备库" class="headerlink" title="在主库通过Rman Duplicate创建备库"></a>在主库通过Rman Duplicate创建备库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rman target sys/123456@primary auxiliary sys/123456@standby nocatalog</span><br><span class="line">duplicate target database for standby from active database nofilenamecheck;</span><br></pre></td></tr></table></figure><h1 id="在主库和备库添加standby日志"><a href="#在主库和备库添加standby日志" class="headerlink" title="在主库和备库添加standby日志"></a>在主库和备库添加standby日志</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter database add standby logfile group 4 &apos;/app/oracle11g/standbylog/standby_redo04.log&apos; size 50m;</span><br><span class="line">alter database add standby logfile group 5 &apos;/app/oracle11g/standbylog/standby_redo05.log&apos; size 50m;</span><br><span class="line">alter database add standby logfile group 6 &apos;/app/oracle11g/standbylog/standby_redo06.log&apos; size 50m;</span><br><span class="line">alter database add standby logfile group 7 &apos;/app/oracle11g/standbylog/standby_redo07.log&apos; size 50m;</span><br></pre></td></tr></table></figure><h1 id="在备库开启实时日志应用"><a href="#在备库开启实时日志应用" class="headerlink" title="在备库开启实时日志应用"></a>在备库开启实时日志应用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt;recover managed standby database using current logfile disconnect from session;</span><br></pre></td></tr></table></figure><p><strong>取消备库实时日志</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database recover managed standby database cancel;</span><br></pre></td></tr></table></figure></p><p><strong>查看备库状态</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select group#,thread#,sequence#,archived,status from v$standby_log</span><br><span class="line">select open_mode,database_role,db_unique_name from v$database;</span><br></pre></td></tr></table></figure><p><strong>查看standby启动进程状态</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select process,client_process,sequence#,status from v$managed_standby;</span><br></pre></td></tr></table></figure></p><p><strong>查看数据库保护模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database_role,protection_mode,protection_level,open_mode from v$database;</span><br></pre></td></tr></table></figure><h1 id="新增DG"><a href="#新增DG" class="headerlink" title="新增DG"></a>新增DG</h1><h1 id="在主库pfile参数文件和密码文件，并且拷贝到备库相应位置-1"><a href="#在主库pfile参数文件和密码文件，并且拷贝到备库相应位置-1" class="headerlink" title="在主库pfile参数文件和密码文件，并且拷贝到备库相应位置"></a>在主库pfile参数文件和密码文件，并且拷贝到备库相应位置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $ORACLE_HOME/dbs</span><br><span class="line">scp initorcl.ora orapworcl oracle@172.16.2.32:/$ORACLE_HOME/dbs</span><br></pre></td></tr></table></figure><h2 id="修改备新库初始化参数文件"><a href="#修改备新库初始化参数文件" class="headerlink" title="修改备新库初始化参数文件"></a>修改备新库初始化参数文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /app/oracle11g/fast_recovery_area/orcl</span><br><span class="line">mkdir -p /app/oracle11g/admin/orcl/adump</span><br><span class="line">mkdir -p /app/oracle11g/&#123;standbylog,archivelog&#125;</span><br><span class="line">mkdir -p /app/oracle11g/oradata/orcl</span><br><span class="line"></span><br><span class="line">startup nomount</span><br><span class="line">create spfile from pfile=&apos;/app/oracle11g/product/11.2.0/dbhome_1/dbs/initorcl.ora&apos;;</span><br><span class="line">alter system set db_unique_name=testdb scope=spfile;</span><br><span class="line">alter system set log_archive_config=&apos;DG_CONFIG=(primary,standby,testdb)&apos; scope=spfile;</span><br><span class="line">alter system set log_archive_dest_1 = &apos;LOCATION=/app/oracle11g/archivelog valid_for=(all_logfiles,all_roles) db_unique_name=testdb&apos; scope=spfile;</span><br><span class="line">alter system set log_archive_dest_2 = &apos;SERVICE=primary lgwr sync valid_for=(online_logfiles,primary_role) db_unique_name=primary&apos; scope=spfile;</span><br><span class="line">alter system set log_archive_dest_3 = &apos;SERVICE=testdb lgwr sync valid_for=(online_logfiles,primary_role) db_unique_name=testdb&apos; scope=both;</span><br><span class="line">alter system set log_archive_dest_state_3 = ENABLE;</span><br><span class="line">alter system set fal_server=primary,standby scope=spfile;</span><br><span class="line">alter system set fal_client=testdb scope=spfile;</span><br><span class="line">shutdown abort;</span><br><span class="line">startup nomount;</span><br></pre></td></tr></table></figure><h2 id="修改新备库静态监听"><a href="#修改新备库静态监听" class="headerlink" title="修改新备库静态监听"></a>修改新备库静态监听</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim listener.ora</span><br><span class="line"></span><br><span class="line">LISTENER =</span><br><span class="line">  (DESCRIPTION_LIST =</span><br><span class="line">    (DESCRIPTION =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = testdb)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">SID_LIST_LISTENER=</span><br><span class="line">  (SID_LIST=</span><br><span class="line">    (SID_DESC=</span><br><span class="line">       (GLOBAL_DBNAME=testdb)</span><br><span class="line">       (SID_NAME=orcl)</span><br><span class="line">     )</span><br><span class="line">  )</span><br><span class="line">ADR_BASE_LISTENER = /app/oracle11g</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vim tnsnames.ora</span><br><span class="line"></span><br><span class="line">PRIMARY =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = primary)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = primary)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">STANDBY =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = standby)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = standby)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">TESTDB =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = testdb)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = testdb)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h2 id="主库修改相关参数"><a href="#主库修改相关参数" class="headerlink" title="主库修改相关参数"></a>主库修改相关参数</h2><h3 id="修改主库参数文件"><a href="#修改主库参数文件" class="headerlink" title="修改主库参数文件"></a>修改主库参数文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter system set log_archive_config=&apos;DG_CONFIG=(primary,standby,testdb)&apos; scope=both;</span><br><span class="line">alter system set log_archive_dest_3 = &apos;SERVICE=testdb lgwr sync valid_for=(online_logfiles,primary_role) db_unique_name=testdb&apos; scope=both;</span><br><span class="line">alter system set log_archive_dest_state_3 = ENABLE;</span><br><span class="line">alter system set fal_server=standby,testdb scope=both;</span><br></pre></td></tr></table></figure><h3 id="修改主库tnsnames-ora文件-新增如下"><a href="#修改主库tnsnames-ora文件-新增如下" class="headerlink" title="修改主库tnsnames.ora文件,新增如下"></a>修改主库tnsnames.ora文件,新增如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TESTDB =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = testdb)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = testdb)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h2 id="测试主库、新备库是否tnsping正常"><a href="#测试主库、新备库是否tnsping正常" class="headerlink" title="测试主库、新备库是否tnsping正常"></a>测试主库、新备库是否tnsping正常</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlplus sys/123456@primary as sysdba</span><br><span class="line">sqlplus sys/123456@testdb as sysdba </span><br><span class="line">tnsping primary</span><br><span class="line">tnsping testdb</span><br></pre></td></tr></table></figure><h2 id="在主库通过Rman-Duplicate创建新备库"><a href="#在主库通过Rman-Duplicate创建新备库" class="headerlink" title="在主库通过Rman Duplicate创建新备库"></a>在主库通过Rman Duplicate创建新备库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rman target sys/123456@primary auxiliary sys/123456@testdb nocatalog</span><br><span class="line">duplicate target database for standby from active database nofilenamecheck;</span><br></pre></td></tr></table></figure><h2 id="在新备库开启实时日志应用"><a href="#在新备库开启实时日志应用" class="headerlink" title="在新备库开启实时日志应用"></a>在新备库开启实时日志应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter database open;</span><br><span class="line">recover managed standby database using current logfile disconnect from session;</span><br><span class="line">alter database recover managed standby database cancel;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 运维部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Redhat6不能使用yum安装软件的解决</title>
      <link href="/2018/06/15/redhat-not-use-yum.html"/>
      <url>/2018/06/15/redhat-not-use-yum.html</url>
      <content type="html"><![CDATA[<p>RHEL的YUM源需要注册用户才能更新使用，由于CentOS和RHEL基本没有区别，并且CentOS已经被REHL收购。所以将RHEL的YUM源替换为CentOS即可。<br><a id="more"></a><br>新安装的redhat使用yum时会出现如下如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost~]# yum repolist</span><br><span class="line">Loaded plugins: product-id, refresh-packagekit, security, subscription-manager</span><br><span class="line">This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.</span><br></pre></td></tr></table></figure></p><h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><p>执行此脚本即可：(只对于Redhat6测试，具体方法后面)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://www.hyman.shop/sh/redhat6-yum.sh |bash</span><br></pre></td></tr></table></figure></p><h2 id="清除原有RHEL的YUM及相关软件包。"><a href="#清除原有RHEL的YUM及相关软件包。" class="headerlink" title="清除原有RHEL的YUM及相关软件包。"></a>清除原有RHEL的YUM及相关软件包。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost~]# rpm -qa | grep yum | xargs rpm -e --nodeps</span><br><span class="line">[root@localhost~]# rpm -qa |grep python-urlgrabber|xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><h2 id="下载centos6的相关软件包。"><a href="#下载centos6的相关软件包。" class="headerlink" title="下载centos6的相关软件包。"></a>下载centos6的相关软件包。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost~]# wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-3.2.29-81.el6.centos.noarch.rpm</span><br><span class="line">[root@localhost~]# wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-metadata-parser-1.1.2-16.el6.x86_64.rpm</span><br><span class="line">[root@localhost~]# wget http://mirrors.163.com/centos/6/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.30-40.el6.noarch.rpm</span><br><span class="line">[root@localhost~]# wget http://mirrors.163.com/centos/6/os/x86_64/Packages/python-iniparse-0.3.1-2.1.el6.noarch.rpm</span><br><span class="line">[root@localhost~]# wget http://mirrors.163.com/centos/6/os/x86_64/Packages/python-urlgrabber-3.9.1-11.el6.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="安装软件包。"><a href="#安装软件包。" class="headerlink" title="安装软件包。"></a>安装软件包。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost~]# rpm -ivh python-iniparse-0.3.1-2.1.el6.noarch.rpm</span><br><span class="line">[root@localhost~]# rpm -ivh python-urlgrabber-3.9.1-11.el6.noarch.rpm</span><br><span class="line">[root@localhost~]# rpm -ivh yum-metadata-parser-1.1.2-16.el6.x86_64.rpm</span><br><span class="line">[root@localhost~]# rpm -ivh yum-plugin-fastestmirror-1.1.30-40.el6.noarch.rpm yum-3.2.29-81.el6.centos.noarch.rpm</span><br><span class="line">*注释yum-plugin-fastestmirror和yum-3.2.29要一起安装。</span><br></pre></td></tr></table></figure><h2 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</span><br><span class="line">[root@localhost~]# vim /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line"></span><br><span class="line">把$releasever替换成现有系统的版cd本号(6)</span><br><span class="line">vim替换命令</span><br><span class="line">：%s/$releasever/6/g</span><br><span class="line">退出保存</span><br></pre></td></tr></table></figure><h2 id="清理yum缓存"><a href="#清理yum缓存" class="headerlink" title="清理yum缓存"></a>清理yum缓存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost~]# yum clean all</span><br></pre></td></tr></table></figure><h2 id="将服务器软件包信息缓存至本地，提高搜索安装效率"><a href="#将服务器软件包信息缓存至本地，提高搜索安装效率" class="headerlink" title="将服务器软件包信息缓存至本地，提高搜索安装效率"></a>将服务器软件包信息缓存至本地，提高搜索安装效率</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost~]# yum makecache</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 运维部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redhat </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos7 Oracle11.2.0.4安装步骤</title>
      <link href="/2018/06/15/oracle-11g2-install.html"/>
      <url>/2018/06/15/oracle-11g2-install.html</url>
      <content type="html"><![CDATA[<h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><p>在开始安装前先要检查下相应的依赖包，这里要注意的是如果是在X64的系统上安装记得需要安装i686即X64系统上的X86的包,这点很重要,如果漏了Oracle是无法正常的安装的，这里pdksh没有安装没有关系，在这里已经安装了ksh就可以了<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install binutils compat-libstdc++-33 elfutils-libelf elfutils-libelf-devel glibc glibc-common glibc-devel gcc gcc-c++ libaio-devel libaio libgcc libstdc++ libstdc++-devel make sysstat unixODBC unixODBC-devel pdksh ksh libaio.i686 glibc.i686 compat-libstdc++-33.i686 libaio-devel.i686 libgcc.i686 libstdc++.i686 unixODBC.i686 unixODBC-devel.i686 compat-libcap1</span><br></pre></td></tr></table></figure></p><h2 id="创建oracle用户、组"><a href="#创建oracle用户、组" class="headerlink" title="创建oracle用户、组"></a>创建oracle用户、组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# groupadd oinstall </span><br><span class="line">[root@localhost ~]# groupadd dba </span><br><span class="line">[root@localhost ~]# useradd -g oinstall -G dba oracle </span><br><span class="line">[root@localhost ~]# echo oracle:123456 |chpasswd</span><br></pre></td></tr></table></figure><h2 id="配置系统的limits的配置文件"><a href="#配置系统的limits的配置文件" class="headerlink" title="配置系统的limits的配置文件"></a>配置系统的limits的配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat &gt;&gt; /etc/security/limits.conf &lt;&lt;EOF</span><br><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="修改内核变量配置文件"><a href="#修改内核变量配置文件" class="headerlink" title="修改内核变量配置文件"></a>修改内核变量配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cat &gt;&gt; /etc/sysctl.conf &lt;&lt;EOF</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.shmall = 2097152</span><br><span class="line">kernel.shmmax = 2147483648</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default= 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# sysctl -p</span><br></pre></td></tr></table></figure><h2 id="配置Oracle用户的环境变量配置文件"><a href="#配置Oracle用户的环境变量配置文件" class="headerlink" title="配置Oracle用户的环境变量配置文件"></a>配置Oracle用户的环境变量配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# su - oracle </span><br><span class="line">[oracle@localhost ~]$ cat &gt;&gt; /home/oracle/.bash_profile &lt;&lt;EOF</span><br><span class="line"></span><br><span class="line">export ORACLE_BASE=/app/oracle11g</span><br><span class="line">export ORACLE_HOME=/app/oracle11g/product/11.2.0/dbhome_1</span><br><span class="line">export ORACLE_SID=orcl</span><br><span class="line">export PATH=$PATH:$ORACLE_HOME/bin</span><br><span class="line">#NLS_LANG=AMERICAN_CHINA.ZHS16GBK</span><br><span class="line">#export ORACLE_UNQNAME=orcl</span><br><span class="line">#export LD_LIBRARY_PATH=$ORACLE_HOME/lib:/usr/lib</span><br><span class="line">#export CLASSPATH=$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlib</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">以下配置需要另外安装rlwrap</span><br><span class="line">alias sqlplus=&apos;rlwrap sqlplus&apos;</span><br><span class="line">alias rman=&apos;rlwrap rman&apos;</span><br></pre></td></tr></table></figure><h2 id="安装Oracle"><a href="#安装Oracle" class="headerlink" title="安装Oracle"></a>安装Oracle</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /app/&#123;oracle11g,oraInventory&#125;</span><br><span class="line">[root@localhost ~]# chown -R oracle:oinstall /app </span><br><span class="line">[root@localhost ~]#su - oracle</span><br><span class="line">[oracle@localhost database]$ ./runInstaller</span><br><span class="line"></span><br><span class="line">如启动安装界面失败</span><br><span class="line">切换root账号</span><br><span class="line">执行命令</span><br><span class="line">[root@localhost ~] xhost +</span><br></pre></td></tr></table></figure><p><strong>如swap不足</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@oracle ~]#cd /tmp &amp;&amp;  dd if=/dev/zero of=swap bs=1M count=2048</span><br><span class="line">[root@oracle tmp]# mkswap /tmp/swap -f</span><br><span class="line">[root@oracle tmp]# swapon /tmp/swap</span><br></pre></td></tr></table></figure></p><p><strong>安装完成后</strong><br>管理界面是ip:1158/em </p>]]></content>
      
      <categories>
          
          <category> 运维部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos7基于ansible批量部署SSH免密钥</title>
      <link href="/2018/06/14/Centos-ansible-nokey-deploy.html"/>
      <url>/2018/06/14/Centos-ansible-nokey-deploy.html</url>
      <content type="html"><![CDATA[<h1 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h1><p>作为运维，经常会遇到批量管理Linux服务器，为了免去输入远程服务器的账号密码苦恼，可使用SSH的免秘钥登录<br><a id="more"></a></p><h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><h2 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa -P &quot;&quot;</span><br></pre></td></tr></table></figure><h2 id="添加-etc-ansible-hosts主机"><a href="#添加-etc-ansible-hosts主机" class="headerlink" title="添加/etc/ansible/hosts主机"></a>添加/etc/ansible/hosts主机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">172.16.2.31</span><br><span class="line">172.16.2.32</span><br></pre></td></tr></table></figure><h2 id="批量分发秘钥"><a href="#批量分发秘钥" class="headerlink" title="批量分发秘钥"></a>批量分发秘钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible server -m authorized_key -a  &quot;user=root key=&apos;&#123;&#123; lookup(&apos;file&apos;,&apos;/root/.ssh/id_rsa.pub&apos;) &#125;&#125;&apos;&quot; -k</span><br></pre></td></tr></table></figure><p><img src="/images/20180614100857.png" width="100%" height="100%"></p>]]></content>
      
      <categories>
          
          <category> 运维部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Consul集群搭建，配合nginx完成服务动态发现和健康检查</title>
      <link href="/2018/06/13/nginx-consul-upsync.html"/>
      <url>/2018/06/13/nginx-consul-upsync.html</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>consul是一个服务发现和配置共享的服务软件，结合nginx的主动健康检查模块nginx_upstream_check_module和服务发现模块nginx-upsync-module，实现一套服务动态发现机制。nginx的upstream不再通过手动配置，而是定时向consul发送请求，获取consul数据中心的配置文件，动态更新upstream地址池。<br><a id="more"></a></p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>consul：是一个支持多数据中心分布式高可用的服务发现和配置共享的服务软件</p><p>nginx_upstream_check_module：nginx主动健康检查模块</p><p>nginx-upsync-module：nginx服务发现模块</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>nginx需要编译两个模块：<br>nginx_upstream_check_module：nginx主动健康检查模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/xiaokai-wang/nginx_upstream_check_module</span><br></pre></td></tr></table></figure></p><p>nginx-upsync-module：nginx服务发现模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/weibocom/nginx-upsync-module</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_flv_module --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --http-client-body-temp-path=/var/tmp/nginx/client/ --http-proxy-temp-path=/var/tmp/nginx/proxy/ --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi --http-scgi-temp-path=/var/tmp/nginx/scgi --with-pcre --add-module=../nginx-upsync-module-master --add-module=/root/nginx-module-vts</span><br></pre></td></tr></table></figure><h2 id="consul"><a href="#consul" class="headerlink" title="consul"></a>consul</h2><p>官网 <a href="https://www.consul.io" target="_blank" rel="noopener">https://www.consul.io</a></p><p>下载consul,linux 64位</p><p>下载解压即可，产生一个consul可执行文件。</p><p>./consul 列出一些常用指令。</p><h2 id="consul启动"><a href="#consul启动" class="headerlink" title="consul启动"></a>consul启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">./consul agent -server –bootstrap-expect 1 –data-dir /tmp/consul –bind=172.16.2.30 –ui –client 0.0.0.0 &amp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server： 以server身份启动。</span><br><span class="line"></span><br><span class="line">bootstrap-expect：集群要求的最少server数量，当低于这个数量，集群即失效。经测试，低于这个数量也不影响访问</span><br><span class="line"></span><br><span class="line">data-dir：data存放的目录，更多信息请参阅consul数据同步机制</span><br><span class="line"></span><br><span class="line">node：节点id，在同一集群不能重复。</span><br><span class="line"></span><br><span class="line">bind：监听的ip地址。</span><br><span class="line"></span><br><span class="line">client 客户端的ip地址</span><br><span class="line"></span><br><span class="line">&amp;  ：在后台运行，此为linux脚本语法</span><br><span class="line"></span><br><span class="line">ui：启动webui，端口8500</span><br></pre></td></tr></table></figure><p>访问ip:8500/</p><h2 id="consul其它命令"><a href="#consul其它命令" class="headerlink" title="consul其它命令"></a>consul其它命令</h2><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./consul leave</span><br></pre></td></tr></table></figure><h3 id="查看成员"><a href="#查看成员" class="headerlink" title="查看成员"></a>查看成员</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./consul members</span><br></pre></td></tr></table></figure><h2 id="启动consul集群"><a href="#启动consul集群" class="headerlink" title="启动consul集群"></a>启动consul集群</h2><p>以上介绍的都是以单机模式启动，实战中consul多以集群模式存在，建议server节点数为3~5个。以下以3台为例，分别为ip1、ip2、ip3：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./consul agent -server -bootstrap-expect 2 -data-dir /tmp/consul -node=consul1 -bind=ip1 -ui -client=0.0.0.0 &amp;</span><br><span class="line"></span><br><span class="line">./consul agent -server -bootstrap-expect 2 -data-dir /tmp/consul -node=consul2 -bind=ip2 -join=ip1 -ui -client=0.0.0.0 &amp;</span><br><span class="line"></span><br><span class="line">./consul agent -server -bootstrap-expect 2 -data-dir /tmp/consul -node=consul3 -bind=ip3 -join=ip1 -ui -client=0.0.0.0 &amp;</span><br><span class="line"></span><br><span class="line">-join 加入一个集群</span><br></pre></td></tr></table></figure></p><h2 id="加入后端服务器-或可以在界面KEY-VALUE操作"><a href="#加入后端服务器-或可以在界面KEY-VALUE操作" class="headerlink" title="加入后端服务器(或可以在界面KEY/VALUE操作)"></a>加入后端服务器(或可以在界面KEY/VALUE操作)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在任一节点上执行如下命令，即可添加2个key-value信息：</span><br><span class="line">curl -X PUT -d &apos;&#123;&quot;weight&quot;:10, &quot;max_fails&quot;:2, &quot;fail_timeout&quot;:10, &quot;down&quot;:0&#125;&apos; http://172.16.2.30:8500/v1/kv/upstreams/test/172.16.2.31:80</span><br><span class="line"></span><br><span class="line">curl -X PUT -d &apos;&#123;&quot;weight&quot;:10, &quot;max_fails&quot;:2, &quot;fail_timeout&quot;:10, &quot;down&quot;:0&#125;&apos; http://172.16.2.30:8500/v1/kv/upstreams/test/172.16.2.32:80</span><br></pre></td></tr></table></figure><h2 id="删除后端服务器-或可以在界面KEY-VALUE操作"><a href="#删除后端服务器-或可以在界面KEY-VALUE操作" class="headerlink" title="删除后端服务器(或可以在界面KEY/VALUE操作)"></a>删除后端服务器(或可以在界面KEY/VALUE操作)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE http://172.16.2.30:8500/v1/kv/upstreams/test/172.16.2.31:80</span><br><span class="line"></span><br><span class="line">curl -X DELETE http://172.16.2.30:8500/v1/kv/upstreams/test/172.16.2.32:80</span><br></pre></td></tr></table></figure><h2 id="调整后端服务的参数-或可以在界面KEY-VALUE操作"><a href="#调整后端服务的参数-或可以在界面KEY-VALUE操作" class="headerlink" title="调整后端服务的参数(或可以在界面KEY/VALUE操作)"></a>调整后端服务的参数(或可以在界面KEY/VALUE操作)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT -d &apos;&#123;&quot;weight&quot;:10, &quot;max_fails&quot;:2, &quot;fail_timeout&quot;:10, &quot;down&quot;:0&#125;&apos; http://172.16.2.30:8500/v1/kv/upstreams/test/172.16.2.31:80</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="nginx-amp-upstream配置"><a href="#nginx-amp-upstream配置" class="headerlink" title="nginx&amp;upstream配置"></a>nginx&amp;upstream配置</h2><p>consul是针对nginx的upstream所做的一项改善，地址池不再需要手动配置，而是从consul的数据中心抓取。新的upstream配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcat_http_server &#123;</span><br><span class="line">        server 127.0.0.1:11111;</span><br><span class="line">        upsync 172.16.2.30:8500/v1/kv/upstreams/test upsync_timeout=6m upsync_interval=500ms upsync_type=consul strong_dependency=off;</span><br><span class="line">        upsync_dump_path /usr/local/nginx/conf/server/server_test.conf;</span><br><span class="line"> </span><br><span class="line">        check interval=1000 rise=2 fall=2 timeout=3000 type=http default_down=false;</span><br><span class="line">        check_http_send &quot;HEAD / HTTP/1.0\r\n\r\n&quot;;</span><br><span class="line">        check_http_expect_alive http_2xx http_3xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server 127.0.0.1:11111是占位机器，这个配置必须要有不然校验配置文件不通过。</p><p>upsync配置语法：</p><p>upsync $consul/etcd.api.com:$port/v1/kv/upstreams/$upstream_name/ [upsync_type=consul/etcd] [upsync_interval=second/minutes] [upsync_timeout=second/minutes] [strong_dependency=off/on]</p><p>默认upsync_interval=5s upsync_timeout=6m strong_dependency=off</p><p>172.16.2.30:8500/v1/kv/upstreams/tomcat_http_server为同步地址；upsync_timeout同步超时时间；upsync_interval同步间隔；upsync_type同步类型，默认为consul；strong_dependency，配置为on时，每次启动或重启nginx，都会强制去consul拉一次upstream servers。</p><p>upsync_dump_path将拉取到的upstreams地址池写入一个文件；</p><p>此处想要多说两句，即使consul中途挂掉，nginx仍然可以从upsync_dump_path配置的文件中取到数据，继续分发流量，只是此时upstream池变为静态了，跟之前的情形一样，启停重启nginx等操作并没有问题。所以consul单节点配置中心的可用性也是很高的。</p><p>check代表健康检查；interval检查间隔，单位为毫秒；rise成功该次数后，标记为up；fall失败该次数后，标记为down；timeout；type包括tcp、ssl_hello、http、mysql、ajp、fastcgi；default_down设置后端server的初始状态；</p><p>默认配置interval=30000 fall=5 rise=2 timeout=1000 default_down=true type=tcp</p><p>check_http_send 健康检查发送的请求包；</p><p>check_http_expect_alive 这些状态代表后端server是活着的；</p><h2 id="查询健康检查状态"><a href="#查询健康检查状态" class="headerlink" title="查询健康检查状态"></a>查询健康检查状态</h2><p>健康检查模块提供了一个接口check_status，用于检查consul数据中心配置的所有server的健康检查状态。需要在nginx稍作配置：</p><p>在80端口下，配置nstatus的接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /nstatus &#123;</span><br><span class="line">        check_status;</span><br><span class="line">        access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 运维部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ngins </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>负载均衡之LVS-基本概念和三种模式</title>
      <link href="/2018/06/11/load-balance-lvs-base.html"/>
      <url>/2018/06/11/load-balance-lvs-base.html</url>
      <content type="html"><![CDATA[<h1 id="LVS简介"><a href="#LVS简介" class="headerlink" title="LVS简介"></a>LVS简介</h1><p>LVS中文官方手册：<a href="http://www.linuxvirtualserver.org/zh/index.html。这个手册对于了解lvs的背景知识很有帮助。" target="_blank" rel="noopener">http://www.linuxvirtualserver.org/zh/index.html。这个手册对于了解lvs的背景知识很有帮助。</a></p><p>LVS英文官方手册：<a href="http://www.linuxvirtualserver.org/Documents.html。这个手册比较全面，对于了解和学习lvs的原理、配置很有帮助。" target="_blank" rel="noopener">http://www.linuxvirtualserver.org/Documents.html。这个手册比较全面，对于了解和学习lvs的原理、配置很有帮助。</a></p><p>LVS是章文嵩开发的一个国产开源负载均衡软件。LVS最初是他在大学期间的玩具，随着后来使用的用户越来越多，LVS也越来越完善，最终集成到了Linux的内核中。有不少开源牛人都为LVS开发过辅助工具和辅助组件，最出名的就是Alexandre为LVS编写的Keepalived，它最初专门用于监控LVS，后来加入了通过VRRP实现高可用的功能。<br><a id="more"></a><br>LVS的全称是Linux virtual server，即Linux虚拟服务器。之所以是虚拟服务器，是因为LVS自身是个负载均衡器(director)，不直接处理请求，而是将请求转发至位于它后端真正的服务器realserver上。</p><p>LVS是四层(传输层tcp/udp)、七层(应用层)的负载均衡工具，只不过大众一般都使用它的四层负载均衡功能ipvs，而七层的内容分发负载工具ktcpvs(kernel tcp virtual server)不怎么完善，使用的人并不多。</p><p>ipvs是集成在内核中的框架，可以通过用户空间的程序ipvsadm工具来管理，该工具可以定义一些规则来管理内核中的ipvs。就像iptables和netfilter的关系一样。</p><h1 id="LVS-ipvs三种模式的工作原理"><a href="#LVS-ipvs三种模式的工作原理" class="headerlink" title="LVS-ipvs三种模式的工作原理"></a>LVS-ipvs三种模式的工作原理</h1><p>首先要解释的是LVS相关的几种IP：</p><p>VIP:virtual IP，LVS服务器上接收外网数据包的网卡IP地址。<br>DIP:director IP，LVS服务器上转发数据包到realserver的网卡IP地址。<br>RIP:realserver(常简称为RS)上接收Director转发数据包的IP，即提供服务的服务器IP。<br>CIP:客户端的IP。</p><p><img src="/images/733013-20180211225301232-212054825.png" width="100%" height="100%"><br>LVS的三种工作模式：通过网络地址转换(NAT)将一组服务器构成一个高性能的、高可用的虚拟服务器，是VS/NAT技术。在分析VS/NAT的缺点和网络服务的非对称性的基础上，提出了通过IP隧道实现虚拟服务器的方法VS/TUN（Virtual Server via IP Tunneling），和通过直接路由实现虚拟服务器的方法VS/DR（Virtual Server via Direct Routing），它们可以极大地提高系统的伸缩性。</p><h2 id="VS-NAT模式"><a href="#VS-NAT模式" class="headerlink" title="VS/NAT模式"></a>VS/NAT模式</h2><p>客户端发送的请求到达Director后，Director根据负载均衡算法改写目标地址为后端某个RIP(web服务器池中主机之一)并转发给该后端主机，就像NAT一样。当后端主机处理完请求后，后端主机将响应数据交给Director，并由director改写源地址为VIP后传输给客户端。大多数商品化的IP负载均衡硬件都是使用此方法，如Cisco的LocalDirector、F5的Big/IP。<br><img src="/images/733013-20180211234714295-412364937.png" width="100%" height="100%"><br><strong>这种模式下：</strong></p><ol><li><p>RIP和DIP一般处于同一私有网段中。但并非必须，只要它们能通信即可。</p></li><li><p>各RealServer的网关指向DIP，这样能保证将响应数据交给Director。</p></li><li><p>VS/NAT模式的最大缺点是Director负责所有进出数据：不仅处理客户端发起的请求，还负责将响应传输给客户端。而响应数据一般比请求数据大得多，调度器Director容易出现瓶颈。(也就是像7层负载的处理方式一样，但却没有7层负载那么”多功能”)</p></li><li><p>这种模式配置起来最简单。</p></li></ol><h2 id="VS-TUN模式"><a href="#VS-TUN模式" class="headerlink" title="VS/TUN模式"></a>VS/TUN模式</h2><p>采用NAT技术时，由于请求和响应报文都必须经过调度器地址重写，当客户请求越来越多时，调度器的处理能力将成为瓶颈。为了解决这个问题，调度器把请求报文通过IP隧道转发至真实服务器，而真实服务器将响应直接返回给客户，所以调度器只处理请求报文。由于一般网络服务响应报文比请求报文大许多，采用VS/TUN技术后，调度器得到极大的解放，集群系统的最大吞吐量可以提高10倍。<br><img src="/images/733013-20180213102345546-471661305.png" width="100%" height="100%"><br><strong>VS/TUN模式的工作原理：</strong></p><ul><li><p>(1)IP隧道技术又称为IP封装技术，它可以将带有源和目标IP地址的数据报文使用新的源和目标IP进行第二次封装，这样这个报文就可以发送到一个指定的目标主机上；</p></li><li><p>(2)VS/TUN模式下，调度器和后端服务器组之间使用IP隧道技术。当客户端发送的请求(CIP–&gt;VIP)被director接收后，director修改该报文，加上IP隧道两端的IP地址作为新的源和目标地址，并将请求转发给后端被选中的一个目标；</p></li><li><p>(3)当后端服务器接收到报文后，首先解封报文得到原有的CIP–&gt;VIP，该后端服务器发现自身的tun接口上配置了VIP，因此接受该数据包。</p></li><li><p>(4)当请求处理完成后，结果将不会重新交给director，而是直接返回给客户端。此时响应数据包的源IP为VIP，目标IP为CIP。</p></li></ul><p><strong>采用VS/TUN模式时的基本属性和要求：</strong></p><ol><li><p>RealServer的RIP和director的DIP不用处于同一物理网络中，且RIP必须可以和公网通信。也就是说集群节点可以跨互联网实现。</p></li><li><p>realserver的tun接口上需要配置VIP地址，以便接收director转发过来的数据包，以及作为响应报文的源IP。</p></li><li><p>director给realserver时需要借助隧道，隧道外层的IP头部的源IP是DIP，目标IP是RIP。而realsever响应给客户端的IP头部是根据隧道内层的IP头分析得到的，源IP是VIP，目标IP是CIP。这样客户端就无法区分这个VIP到底是director的还是服务器组中的。</p></li><li><p>director只处理入站请求，响应请求由realserver完成。</p></li><li><p>一般来说，VS/TUN模式会用来负载调度缓存服务器组，这些缓存服务器一般放置在不同网络环境，可以就近返回数据给客户端。在请求对象不能在Cache服务器本地命中的情况下，Cache服务器要向源服务器发请求，将结果取回，最后将结果返回给客户。</p></li></ol><h2 id="VS-DR模式"><a href="#VS-DR模式" class="headerlink" title="VS/DR模式"></a>VS/DR模式</h2><p>VS/TUN模式下，调度器对数据包的处理是使用IP隧道技术进行二次封装。VS/DR模式和VS/TUN模式很类似，只不过调度器对数据包的处理是改写数据帧的目标MAC地址，通过链路层来负载均衡。</p><p>VS/DR通过改写请求报文的目标MAC地址，将请求发送到真实服务器，而真实服务器将响应直接返回给客户。同VS/TUN技术一样，VS/DR技术可极大地提高集群系统的伸缩性。这种方法没有IP隧道的开销，对集群中的真实服务器也没有必须支持IP隧道协议的要求，但是要求调度器与真实服务器都有一块网卡连在同一物理网段上，以便使用MAC地址通信转发数据包。<br><img src="/images/733013-20180213102610124-276805076.png" width="100%" height="100%"><br><strong>VS/DR模式的工作原理：</strong></p><ul><li><p>(1)客户端发送的请求被director接收后，director根据负载均衡算法，改写数据帧的目标MAC地址为后端某RS的MAC地址，并将该数据包转发给该RS(实际上是往整个局域网发送，但只有该MAC地址的RS才不会丢弃)。</p></li><li><p>(2)RS接收到数据包后，发现数据包的目标IP地址为VIP，而RS本身已经将VIP配置在了某个接口上，因此RS会接收下这个数据包并进行处理。</p></li><li><p>(3)处理完毕后，RS直接将响应报文响应给客户端。此时数据包源IP为VIP，目标IP为CIP。<br>也就是说，客户端请求发送到LB上，源和目标IP为CIP:VIP，LB上有VIP和DIP，重新改写MAC地址后通过DIP发送给某个realserver，如RS1，此时源和目标IP还是CIP:VIP，但是目标MAC地址改写为RIP1所在网卡的MAC地址”RS1_MAC”，RS1发现自身有VIP地址，所以收下此数据报文(所以在RS上必须配置VIP)。返回时，RS1根据路由表直接返回给客户端，此时，源和目标IP是VIP–&gt;CIP。但由于流出接口为RIP所在网卡接口，因此源MAC地址为RIP所在接口的MAC地址。这一细节在考虑CIP、RIP不同网段时的配置时很重要。</p></li></ul><p><strong>采用VS/DR模式时的基本属性和要求：</strong></p><ul><li><p>RealServer的RIP和director的DIP必须处于同一网段中，以便使用MAC地址进行通信。</p></li><li><p>realserver上必须配置VIP地址，以便接收director转发过来的数据包，以及作为响应报文的源IP。</p></li><li><p>realsever响应给客户端的数据包的源和目标IP为VIP–&gt;CIP。</p></li><li><p>director只处理入站请求，响应请求由realserver完成。</p></li></ul><h2 id="lvs-ipvs的三种模式比较"><a href="#lvs-ipvs的三种模式比较" class="headerlink" title="lvs-ipvs的三种模式比较"></a>lvs-ipvs的三种模式比较</h2><p><img src="/images/733013-20180213110217531-1638772778.png" width="100%" height="100%"><br>在性能上，VS/DR和VS/TUN远高于VS/NAT，因为调度器只处于从客户到服务器的半连接中，按照半连接的TCP有限状态机进行状态迁移，极大程度上减轻了调度器的压力(真正建立TCP连接的是RS和Client)。VS/DR性能又稍高于VS/TUN，因为少了隧道的开销。但是，VS/DR和VS/TUN的主要区别是VS/TUN可以跨网络实现后端服务器负载均衡(也可以局域网内)，而VS/DR只能和director在局域网内进行负载均衡。</p><h1 id="VS-TUN和VS-DR模式中的ARP问题"><a href="#VS-TUN和VS-DR模式中的ARP问题" class="headerlink" title="VS/TUN和VS/DR模式中的ARP问题"></a>VS/TUN和VS/DR模式中的ARP问题</h1><p>当一个目标IP地址为VIP的数据包进入Director前端的路由器时，路由器会向局域网内发送ARP广播，以找出VIP地址的MAC地址在哪台主机上。<br><img src="/images/733013-20180213170727562-1125645743.png" width="60%" height="60%"></p><p>Director和各RS都配置了VIP。当路由器发送ARP广播后，Director和RS都会收到这个广播包，且都认为这个广播包找的就是自己，于是都回应给路由器，这样路由器上的ARP缓存表中的条目VIP<-->vip_MAC就不断被覆盖直到最后一个回应。这样一来，路由器将把客户端的数据包发送给最后一个回应的主机，这台主机的VIP可能是Director上的，也可能是某个RS上的。在一定时间内，路由器收到目标IP为VIP的数据包都会发送给该主机。但路由器会定时发送ARP广播包，这样一来ARP缓存表中的VIP对应的MAC地址可能会换成另一台主机。</--></p><p>因此，必须要保证路由器只保存Director上VIP对应的MAC地址，即只允许Director才对路由器的ARP广播进行回应。也就是说，所有RS上的VIP必须隐藏起来。</p><p>一般通过将Real Server上的VIP设置在lo接口的别名接口上(如lo:0)，并设置arp_ignore=1和arp_announce=2的方式来隐藏RS上的VIP。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">echo 2 &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.ipv4.conf.all.arp_ignore=1</span><br><span class="line">sysctl -w net.ipv4.conf.all.arp_announce=2</span><br></pre></td></tr></table></figure></p><p>或者将arp参数设置到内核参数配置文件中以让其永久生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;net.ipv4.conf.all.arp_ignore=1&quot; &gt;&gt;/etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.conf.all.arp_announce=2&quot; &gt;&gt;/etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></p><p>在网上几乎所有文章还设置了lo接口上的arp参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line">echo 2 &gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span><br></pre></td></tr></table></figure></p><p>但这没有任何意义，因为从lo接口不受arp参数的影响。</p><p>应该在配置VIP之前就设置arp参数，以防止配置VIP后、设置arp抑制之前被外界主机发现。</p><h1 id="LVS负载均衡的调度算法"><a href="#LVS负载均衡的调度算法" class="headerlink" title="LVS负载均衡的调度算法"></a>LVS负载均衡的调度算法</h1><p>LVS的调度算法，详细内容见官方手册：<a href="http://www.linuxvirtualserver.org/zh/lvs4.html" target="_blank" rel="noopener">http://www.linuxvirtualserver.org/zh/lvs4.html</a> 。</p><p>IPVS在内核中的负载均衡调度是以连接为粒度的。在HTTP协议（非持久）中，每次从WEB服务器上获取资源都需要建立一个TCP连接，同一用户的不同请求会被调度到不同的服务器上，所以这种细粒度的调度在一定程度上可以避免单个用户访问的突发性引起服务器间的负载不平衡。</p><p>LVS分为两种调度方式：静态调度和动态反馈调度。</p><p>静态调度方式是指不管RS的繁忙程度，根据调度算法计算后轮到谁就调度谁。例如两台realserver，一开始双方都在处理500个连接，下一个请求到来前，server1只断开了10个，而server2断开了490个，但是此时轮到了server1，就会调度server1而不管繁忙的程度。</p><p>动态调度方式是指根据RS的繁忙程度反馈，计算出下一个连接应该调度谁(动态反馈负载均衡算法考虑服务器的实时负载和响应情况，不断调整服务器间处理请求的比例，来避免有些服务器超载时依然收到大量请求，从而提高整个系统的吞吐率)。</p><p>在内核中的连接调度算法上，IPVS已实现了以下八种调度算法：默认的算法为wlc。</p><p><strong>静态调度：</strong></p><ul><li><p>轮叫调度（Round-Robin Scheduling,rr）</p></li><li><p>加权轮叫调度（Weighted Round-Robin Scheduling,wrr），按照权重比例作为轮询标准</p></li><li><p>目标地址散列调度（Destination Hashing Scheduling,dh），目标地址哈希，对于同一目标IP的请求总是发往同一服务器</p></li><li><p>源地址散列调度（Source Hashing Scheduling,sh），源地址哈希，在一定时间内，只要是来自同一个客户端的请求，就发送至同一个realserver</p></li></ul><p><strong>动态反馈调度：</strong></p><ul><li><p>最小连接调度（Least-Connection Scheduling,lc），调度器需要记录各个服务器已建立连接的数目，当一个请求被调度到某服务器，其连接数加1；当连接中止或超时，其连接数减1。当各个服务器的处理能力不同时，该算法不理想。</p></li><li><p>加权最小连接调度（Weighted Least-Connection Scheduling,wlc）</p></li><li><p>基于本地的最少连接（Locality-Based Least Connections Scheduling,lblc），目前该算法主要用于cache集群系统。</p></li><li><p>带复制的基于局部性最少连接（Locality-Based Least Connections with Replication Scheduling,lblcr），目前主要用于Cache集群系统。</p></li></ul>]]></content>
      
      <categories>
          
          <category> LVS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LVS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>部署Gitolite、Centos7记录</title>
      <link href="/2018/06/08/deployment-gitolite-recode.html"/>
      <url>/2018/06/08/deployment-gitolite-recode.html</url>
      <content type="html"><![CDATA[<h1 id="Gitolite架构"><a href="#Gitolite架构" class="headerlink" title="Gitolite架构"></a>Gitolite架构</h1><p><img src="/images/15174104_13760152809DNT.png" width="100%" height="100%"></p><a id="more"></a><h1 id="安装Gitolie-服务端操作"><a href="#安装Gitolie-服务端操作" class="headerlink" title="安装Gitolie(服务端操作)"></a>安装Gitolie(服务端操作)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># install from EPEL</span><br><span class="line">[root@server01 ~]# yum --enablerepo=epel -y install gitolite3</span><br><span class="line">[root@server01 ~]# su - gitolite3</span><br><span class="line"></span><br><span class="line">-sh-4.2$ ssh-keygen -f ~/.ssh/gitadmin </span><br><span class="line">-sh-4.2$ gitolite setup -pk ~/.ssh/gitadmin.pub</span><br><span class="line">-sh-4.2$ vi ~/.ssh/config</span><br><span class="line"></span><br><span class="line"># create new</span><br><span class="line"># any name you like</span><br><span class="line">host GitServer</span><br><span class="line">    user gitolite3</span><br><span class="line">    # Git server&apos;s hostname or IP address</span><br><span class="line">    hostname 172.16.2.30</span><br><span class="line">    port 22</span><br><span class="line">    # secret key</span><br><span class="line">    identityfile ~/.ssh/gitadmin</span><br><span class="line"></span><br><span class="line">-sh-4.2$ chmod 600 ~/.ssh/config </span><br><span class="line">-sh-4.2$ git config --global user.name &quot;gitolite3&quot; </span><br><span class="line">-sh-4.2$ git config --global user.email &quot;ywthings@qq.com&quot; </span><br><span class="line">-sh-4.2$ git config --global push.default simple</span><br><span class="line">-sh-4.2$ git clone ssh://GitServer/gitolite-admin</span><br><span class="line"></span><br><span class="line">至此，gitolite已经安装完成</span><br></pre></td></tr></table></figure><h1 id="生成SSH-Key（客户端操作，以下linux操作，windows使用git工具）"><a href="#生成SSH-Key（客户端操作，以下linux操作，windows使用git工具）" class="headerlink" title="生成SSH Key（客户端操作，以下linux操作，windows使用git工具）"></a>生成SSH Key（客户端操作，以下linux操作，windows使用git工具）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server02 ~]# ssh-keygen</span><br><span class="line"></span><br><span class="line">#一路回车键即可，不要输入密码，如输入密码，git clone时会提示输入密码</span><br></pre></td></tr></table></figure><h1 id="将生成的SSH-public-key拷贝到服务器（客户端操作）"><a href="#将生成的SSH-public-key拷贝到服务器（客户端操作）" class="headerlink" title="将生成的SSH public key拷贝到服务器（客户端操作）"></a>将生成的SSH public key拷贝到服务器（客户端操作）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server02 ~]# scp /root/.ssh/id_rsa.pub gitolite3@172.16.2.30:/var/lib/gitolite3/gitolite-admin/keydir</span><br><span class="line"></span><br><span class="line">#可以直接复制密钥内容即可，以上方式注意权限问题</span><br></pre></td></tr></table></figure><h1 id="修改gitolite配置文件（服务端操作）"><a href="#修改gitolite配置文件（服务端操作）" class="headerlink" title="修改gitolite配置文件（服务端操作）"></a>修改gitolite配置文件（服务端操作）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#使用gitolite3用户登录服务器</span><br><span class="line">#客户端的公钥保存在/var/lib/gitolite3/gitolite-admin/keydir</span><br><span class="line">#修改权限/var/lib/gitolite3/gitolite-admin/conf/gitolite.conf</span><br><span class="line">#上传代码即可</span><br></pre></td></tr></table></figure><h1 id="增加仓库"><a href="#增加仓库" class="headerlink" title="增加仓库"></a>增加仓库</h1><p>只需要在/var/lib/gitolite3/gitolite-admin/conf/gitolite.conf文件修改即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">repo    ljs-bis</span><br><span class="line">        RW+     =  @developer</span><br></pre></td></tr></table></figure></p><p>然后提交代码，自动创建git仓库</p>]]></content>
      
      <categories>
          
          <category> 运维部署记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitolite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS 7上使用Tripwire监控和检测修改的文件</title>
      <link href="/2018/05/30/linux-filesystem-tripwire.html"/>
      <url>/2018/05/30/linux-filesystem-tripwire.html</url>
      <content type="html"><![CDATA[<p>Tripwire是一个免费的开源入侵检测系统（IDS）。 它是用于监视和警告系统上文件更改的安全工具。 Tripwire是一个功能强大的IDS，可以保护您的系统免受不必要的更改。 您可以使用它来监控您的系统文件，包括网站文件，因此当有不需要的文件更改时，Tripwire会检查您的系统，如果设置正确，可以通过电子邮件提醒您。<br><a id="more"></a></p><h1 id="在CentOS-7上安装Tripwire"><a href="#在CentOS-7上安装Tripwire" class="headerlink" title="在CentOS 7上安装Tripwire"></a>在CentOS 7上安装Tripwire</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install epel-release</span><br><span class="line">yum install tripwire</span><br></pre></td></tr></table></figure><p>安装完成后，我们需要生成新的密钥文件。</p><p>Tripwire使用2个关键文件。</p><ol><li>site-key：它用于保护Tripwire配置。 因此，除非我们再次生成配置，否则对tripwire配置所做的任何更改都不会生效，我们会提示您输入“site-key”密码。</li><li>local-key：它用于验证tripwire二进制文件。 当我们想要更新tripwire系统数据库时，我们需要运行tripwire命令，并且会提示我们输入’local-key’的密码。</li></ol><p>我们使用下面的命令生成新的tripwire密钥文件（站点和本地密钥）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tripwire-setup-keyfiles</span><br></pre></td></tr></table></figure></p><p>该命令将生成两个密钥文件“site-key”和“local-key”，并且您将被要求输入每个密码。</p><p>输入您自己的“ 网站密钥 ”密码，然后按Enter键。<br><img src="/images/tripwire-site.png" width="100%" height="100%"></p><p>输入您自己的“ 本地密钥 ”密码并再次按Enter键。<br><img src="/images/tripwire-local.png" width="100%" height="100%"></p><p>接下来，使用’site-key’签署tripwire配置,输入您的“ 网站密钥 ”密码。<br><img src="/images/tripwire-site-key.png" width="100%" height="100%"><br>现在，为了签署Tripwire政策，请输入您的“ 本地密钥 ”密码。<br><img src="/images/tripwire-local-key.png" width="100%" height="100%"></p><h1 id="配置Tripwire策略"><a href="#配置Tripwire策略" class="headerlink" title="配置Tripwire策略"></a>配置Tripwire策略</h1><p>使用下面的tripwire命令初始化tripwire数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tripwire --init</span><br></pre></td></tr></table></figure></p><p>您可能会收到错误消息“no such directory”，如下所示</p><p><img src="/images/tripwire-error.png" width="100%" height="100%"><br>是因为系统没有在tripwire配置中已经定义的目录和文件。 为了解决这个错误，我们需要编辑tripwire配置’twpol.txt’并重新签署tripwire配置。</p><p>现在使用下面的命令从tripwire生成日志错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;tripwire --check | grep Filename &gt; no-directory.txt&quot;</span><br></pre></td></tr></table></figure></p><p>所有不存在于CentOS 7系统上的目录和文件都列在文件no-directory.txt中<br>使用以下bash脚本编辑tripwire配置’twpol.txt’ - 在终端上运行此脚本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for f in $(grep &quot;Filename:&quot; no-directory.txt | cut -f2 -d:); do</span><br><span class="line">sed -i &quot;s|\($f\) |#\\1|g&quot; /etc/tripwire/twpol.txt</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>毕竟，我们需要使用twadmin命令重新生成并重新签署tripwire配置，如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twadmin -m P /etc/tripwire/twpol.txt</span><br></pre></td></tr></table></figure></p><p>输入您的“网站密钥”密码。重新初始化tripwire数据库，并确保没有错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tripwire --init</span><br></pre></td></tr></table></figure></p><h1 id="验证Tripwire配置和检查系统"><a href="#验证Tripwire配置和检查系统" class="headerlink" title="验证Tripwire配置和检查系统"></a>验证Tripwire配置和检查系统</h1><p>要验证tripwire配置，我们可以运行系统检查命令如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tripwire --check</span><br></pre></td></tr></table></figure></p><h1 id="将新规则添加到Tripwire策略"><a href="#将新规则添加到Tripwire策略" class="headerlink" title="将新规则添加到Tripwire策略"></a>将新规则添加到Tripwire策略</h1><p>在这一步中，我们将向您展示如何将新规则添加到tripwire策略配置“twpol.txt”。</p><p>要执行这项工作，我们需要定义规则名称，严重程度，监视目录和文件类型。 在这一步中，我们将在/var/www/目录下为我们的WordPress安装创建一个名为Wordpress Data的新规则，严重程度为HIGH/SIG_HI,并且该目录中的所有文件都是关键的以及源代码不能更改）。</p><p>转到tripwire配置目录/etc/tripwire并使用vim编辑配置文件twpol.txt。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/tripwire/</span><br><span class="line">vim twpol.txt</span><br></pre></td></tr></table></figure></p><p>转到该行的末尾，并在那里粘贴以下WordPress规则。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Ruleset for Wordpress</span><br><span class="line"> (</span><br><span class="line">   rulename = &quot;Wordpress Data&quot;,</span><br><span class="line">   severity= $(SIG_HI)</span><br><span class="line"> )</span><br><span class="line"> &#123;</span><br><span class="line">         /var/www        -&gt; $(SEC_CRIT);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>保存并退出。</p><p>使用twadmin命令重新生成并重新签名配置，如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twadmin -m P /etc/tripwire/twpol.txt</span><br></pre></td></tr></table></figure></p><p>输入您的“网站密钥”密码。现在我们需要再次重新生成tripwire数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tripwire --init</span><br></pre></td></tr></table></figure></p><p>输入“本地密钥”密码。新的规则集已添加并应用于Tripwire策略配置。</p><h1 id="安装Tripwire电子邮件通知和Cron"><a href="#安装Tripwire电子邮件通知和Cron" class="headerlink" title="安装Tripwire电子邮件通知和Cron"></a>安装Tripwire电子邮件通知和Cron</h1><p>在这一步中，我们将为特定tripwire规则集策略配置通知，并配置用于自动系统检查的cronjob。 我们会将任何违反WordPress数据规则的报告发送到电子邮件地址<a href="mailto:myemail@gmail.com" target="_blank" rel="noopener">myemail@gmail.com</a>。</p><p>对于电子邮件通知，tripwire在配置中提供了一个emailto功能。 默认情况下，tripwire使用Postfix或Sendmail通过电子邮件发送报告。</p><p>在配置电子邮件通知之前，请使用以下命令测试tripwire通知功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tripwire --test --email email@gmail.com</span><br></pre></td></tr></table></figure></p><p>现在进入/etc/tripwire目录并编辑twpol.txt配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/tripwire/</span><br><span class="line">vim twpol.txt</span><br></pre></td></tr></table></figure></p><p>在WordPress数据规则中添加新行emailto，如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Ruleset for Wordpress</span><br><span class="line"> (</span><br><span class="line">   rulename = &quot;Wordpress Data&quot;,</span><br><span class="line">   severity= $(SIG_HI),</span><br><span class="line">   emailto = myemail@gmail.com</span><br><span class="line"> )</span><br><span class="line"> &#123;</span><br><span class="line">         /var/www        -&gt; $(SEC_CRIT);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>保存并退出。使用twadmin命令重新生成并签署配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twadmin -m P /etc/tripwire/twpol.txt</span><br></pre></td></tr></table></figure></p><p>输入您的“网站密钥”密码。并重新生成tripwire数据库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tripwire --init</span><br></pre></td></tr></table></figure></p><p>输入您的tripwire’local-key’密码。Tripwire电子邮件通知的配置已完成。<br><strong>注意：</strong></p><ul><li>–email-report：将系统报告发送到每个规则中定义的电子邮件地址。</li></ul><p>接下来，我们将使用cron setup启用自动Tripwire系统检查。 为此，请使用下面的crontab命令在root用户下创建一个新的cron脚本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e -u root</span><br></pre></td></tr></table></figure></p><p>粘贴以下cron配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 * * * tripwire --check --email-report</span><br></pre></td></tr></table></figure></p><p>保存并退出。</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tripwire </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>winscp 普通用户登录sftp后切换到root权限</title>
      <link href="/2018/05/25/winscp-switch-root.html"/>
      <url>/2018/05/25/winscp-switch-root.html</url>
      <content type="html"><![CDATA[<p>工具： Xshell、winscp<br>服务器环境： linux RedHat 6.4<br>遇到的问题：普通用户使用winscp账户登录服务器，没有操作权限！</p><a id="more"></a><h2 id="一、普通用户，通过Xshell登录服务器。"><a href="#一、普通用户，通过Xshell登录服务器。" class="headerlink" title="一、普通用户，通过Xshell登录服务器。"></a>一、普通用户，通过Xshell登录服务器。</h2><p>输入以下命令，再输入密码。切换为root。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure></p><h2 id="二、先查找sftp-server-文件夹所在的系统路径，得到sftp-server文件路径后。"><a href="#二、先查找sftp-server-文件夹所在的系统路径，得到sftp-server文件路径后。" class="headerlink" title="二、先查找sftp-server 文件夹所在的系统路径，得到sftp-server文件路径后。"></a>二、先查找sftp-server 文件夹所在的系统路径，得到sftp-server文件路径后。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@LJS-CSS-APP3 ~]# cat /etc/ssh/sshd_config|grep sftp</span><br><span class="line">[root@LJS-CSS-APP3 ~]# /usr/libexec/openssh/sftp-server</span><br></pre></td></tr></table></figure><p><img src="/images/stfp.png" width="100%" height="100%"></p><p>再输入vim命令来编辑修改 /etc/sudoers配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@LJS-CSS-APP3 ~]# vim /etc/sudoers 或者visudo</span><br></pre></td></tr></table></figure></p><p>修改内容具体如下：<br><strong> 1、在文本中找到下语句 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root ALL=(ALL) ALL</span><br></pre></td></tr></table></figure></p><p><strong> 2、在其下面增加以下语句（ljs是普通用户名,改成你自己的!）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ljs ALL=NOPASSWD:/usr/libexec/openssh/sftp-server</span><br></pre></td></tr></table></figure></p><p><strong> 3、然后向上找到下面语句，将其注释掉 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Defaults requiretty</span><br><span class="line">修改为</span><br><span class="line">#Defaults requiretty</span><br></pre></td></tr></table></figure></p><p><strong> 4、保存并退出 </strong></p><h2 id="三、打开winscp-设置-sftp和shell"><a href="#三、打开winscp-设置-sftp和shell" class="headerlink" title="三、打开winscp, 设置 sftp和shell"></a>三、打开winscp, 设置 sftp和shell</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/libexec/openssh/sftp-server</span><br><span class="line">sudu -i</span><br></pre></td></tr></table></figure><p><img src="/images/stfp1.png" alt=""><br><img src="/images/stfp2.png" alt=""></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CentOS 7 安装NFS</title>
      <link href="/2018/05/18/CentOS7-install-NFS.html"/>
      <url>/2018/05/18/CentOS7-install-NFS.html</url>
      <content type="html"><![CDATA[<p><strong><em> 备注 </em></strong><br>简易安装nfs，用于k8s持久化存储</p><p>1、安装NFS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nfs-utils rpcbind</span><br></pre></td></tr></table></figure><a id="more"></a><p>2、启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rpcbind.service</span><br><span class="line">systemctl enable rpcbind.service</span><br><span class="line">systemctl start nfs.service</span><br><span class="line">systemctl enable nfs.service</span><br></pre></td></tr></table></figure><p>3、配置nfs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server01 ~]# cat /etc/exports</span><br><span class="line"></span><br><span class="line">/nfsdata *(rw,sync,no_root_squash)</span><br></pre></td></tr></table></figure><p>4、加载nfs配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exportfs -rv</span><br></pre></td></tr></table></figure><p>5、测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nfs服务器挂载情况</span><br><span class="line">showmount -e</span><br><span class="line">挂载测试</span><br><span class="line">mount -t nfs 172.16.2.30:/nfsdata /test</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> nfs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>k8s简易安装1.11.0</title>
      <link href="/2018/05/15/k8s-simple-install-1.11.0.html"/>
      <url>/2018/05/15/k8s-simple-install-1.11.0.html</url>
      <content type="html"><![CDATA[<p><strong> 备注 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">运行环境：CentOS 7.4</span><br><span class="line">k8s镜像：采用阿里云及阿里云私有仓库</span><br><span class="line">系统架构：master 172.16.2.30；node 172.16.2.31</span><br><span class="line"></span><br><span class="line">官网：https://kubernetes.io/docs/tasks/tools/install-kubeadm/</span><br><span class="line">      https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/</span><br><span class="line">日志：/var/log/message</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>由于kubernetes迭代速度快，变更版本不一致问题，安装方法移至github<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/hyman0603/k8s-deploy</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ELK5.x安装过程中所遇到的问题</title>
      <link href="/2017/11/30/install-ELK5.x-some-problem.html"/>
      <url>/2017/11/30/install-ELK5.x-some-problem.html</url>
      <content type="html"><![CDATA[<p><strong>问题一</strong></p><p>[2017-11-30T17:37:20,165][WARN ][o.e.b.JNANatives         ] unable to install syscall filter:<br>java.lang.UnsupportedOperationException: seccomp unavailable: requires kernel 3.5+ with CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER compiled in</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">解决：使用linux内核3.5版本，不更换也可以。</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>问题二</strong><br>[2017-11-30T17:37:24,329][WARN ][o.e.b.BootstrapChecks    ] [m42Pcik] max number of threads [1024] for user [logtest] is too low, increase to at least [2048]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">解决：切换到root用户，进入limits.d目录下修改配置文件。</span><br><span class="line"></span><br><span class="line">vi /etc/security/limits.d/90-nproc.conf </span><br><span class="line"></span><br><span class="line">修改如下内容：</span><br><span class="line">* soft nproc 1024</span><br><span class="line">#修改为</span><br><span class="line">* soft nproc 2048</span><br></pre></td></tr></table></figure><p><strong>问题三</strong><br>[2017-11-30T17:04:38,295][WARN ][o.e.b.BootstrapChecks    ] [m42Pcik] max file descriptors [65535] for elasticsearch process is too low, increase to at least [65536]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">解决：切换到root用户，编辑limits.conf 添加类似如下内容</span><br><span class="line"></span><br><span class="line">vi /etc/security/limits.conf </span><br><span class="line"></span><br><span class="line">添加如下内容:</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br></pre></td></tr></table></figure><p><strong>问题四</strong><br>max number of threads [1024] for user [lish] likely too low, increase to at least [2048]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">解决：切换到root用户修改配置sysctl.conf</span><br><span class="line"></span><br><span class="line">vi /etc/sysctl.conf </span><br><span class="line"></span><br><span class="line">添加下面配置：</span><br><span class="line">vm.max_map_count=655360</span><br><span class="line">并执行命令：</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p><strong>问题五</strong><br>org.elasticsearch.bootstrap.StartupException: java.lang.IllegalStateException: failed to obtain node locks, tried [[/usr/local/elasticsearch-5.2.0/data/my-application]] with lock id [0]; maybe these locations are not writable or multiple nodes were started without increasing </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解决：</span><br><span class="line">cd /usr/local/elasticsearch-5.2.0/data</span><br><span class="line">rm -rf nodes/</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>据说是小米招聘运维工程师的题目</title>
      <link href="/2017/11/16/%E6%8D%AE%E8%AF%B4%E6%98%AF%E5%B0%8F%E7%B1%B3%E6%8B%9B%E8%81%98%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E9%A2%98%E7%9B%AE.html"/>
      <url>/2017/11/16/%E6%8D%AE%E8%AF%B4%E6%98%AF%E5%B0%8F%E7%B1%B3%E6%8B%9B%E8%81%98%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E9%A2%98%E7%9B%AE.html</url>
      <content type="html"><![CDATA[<h1 id="第一部分：Linux基础"><a href="#第一部分：Linux基础" class="headerlink" title="第一部分：Linux基础"></a>第一部分：Linux基础</h1><h2 id="题目1："><a href="#题目1：" class="headerlink" title="题目1："></a>题目1：</h2><p>有一百个图片文件，它们的地址都是<br><a href="http://down.xiaomi.com/img/1.png" target="_blank" rel="noopener">http://down.xiaomi.com/img/1.png</a><br><a href="http://down.xiaomi.com/img/2.png" target="_blank" rel="noopener">http://down.xiaomi.com/img/2.png</a><br>…<br>一直到<a href="http://down.xiaomi.com/img/100.png" target="_blank" rel="noopener">http://down.xiaomi.com/img/100.png</a><br>批量下载这100个图片文件，并找出其中大于500KB的文件。<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">同相册的图片地址会有一定的规律，可以用：</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# echo http://down.xiaomi.com/img/&#123;001..100&#125;.png &gt; url.txt</span><br><span class="line"></span><br><span class="line">得到图片的地址是用空格分开的,再用vim编辑url文件，把空格替换成回车（\r）</span><br><span class="line">：s/ /\r/g</span><br><span class="line"></span><br><span class="line">在用wget命令批量下载：</span><br><span class="line">[root@localhost ~]# wget -i url.txt -P ./photo</span><br><span class="line">wget命令的-i参数是从指定的文件读取地址，-P参数是把下载的文件放到指定的路径下。</span><br><span class="line"></span><br><span class="line">找出其中大于500KB的文件</span><br><span class="line">[root@localhost ~]# find ./photo -type f -size +500k</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;downloading the picture......&quot;</span><br><span class="line">for i in &#123;1..100&#125;</span><br><span class="line">do</span><br><span class="line">    wget &quot;http://down.xiaomi.com/img/$i.png&quot;</span><br><span class="line">done</span><br><span class="line"> </span><br><span class="line">echo &quot;download done!&quot;</span><br><span class="line">echo &quot;find the file which is big than 500k&quot;</span><br><span class="line">find . -type f -size +500c -print</span><br></pre></td></tr></table></figure><h2 id="题目2："><a href="#题目2：" class="headerlink" title="题目2："></a>题目2：</h2><p>一个文本文件info.txt的内容如下：</p><p>aa,201<br>zz,502<br>bb,1<br>ee,42</p><p>每行都是按照逗号分隔，其中第二列都是数字，请对该文件按照第二列数字从大到小排列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# sort  -n -r -k 2 -t&apos;,&apos; info.txt </span><br><span class="line">zz,502</span><br><span class="line">aa,201</span><br><span class="line">ee,42</span><br><span class="line">bb,1</span><br></pre></td></tr></table></figure><h2 id="题目3："><a href="#题目3：" class="headerlink" title="题目3："></a>题目3：</h2><p>查看当前Linux服务器是否监听80端口，如果在监听，请找出其进程ID，并结束该进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# netstat -an | grep -i listen | grep 80</span><br><span class="line">[root@localhost ~]# lsof -i:80</span><br><span class="line">[root@localhost ~]# kill -9 PID</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方法一：使用for </span><br><span class="line">for i in `netstat -tanp |grep 3306 |awk &apos;&#123;print $NF&#125;&apos; |cut -d &quot;/&quot; -f 1`;do kill -9 $i;done</span><br><span class="line"></span><br><span class="line">方法二：使用xargs</span><br><span class="line">netstat -tanp |grep 3306 |awk &apos;&#123;print $NF&#125;&apos; |cut -d &quot;/&quot; -f 1 |xargs -I &apos;&#123;&#125;&apos; kill -9 &#123;&#125;</span><br><span class="line"></span><br><span class="line">方法三：使用awk</span><br><span class="line">netstat -tanp |grep 3306 |awk &apos;&#123;print $NF&#125;&apos; |cut -d &quot;/&quot; -f 1 |awk &apos;&#123;print &quot;kill -9 &quot;$0&#125;&apos; |bash</span><br></pre></td></tr></table></figure><h2 id="题目4："><a href="#题目4：" class="headerlink" title="题目4："></a>题目4：</h2><p>使用curl或wget命令获取http服务的header信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# curl -I http://www.xiaomi.com</span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Server: Tengine</span><br><span class="line">Date: Thu, 16 Nov 2017 06:44:46 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 275</span><br><span class="line">Connection: close</span><br><span class="line">Location: https://www.mi.com</span><br></pre></td></tr></table></figure><h2 id="题目5："><a href="#题目5：" class="headerlink" title="题目5："></a>题目5：</h2><p>关于Linux的用户账号，下面说法正确的有：</p><p>A.用户的密码，是以明文形式存储在 /etc/passwd 文件中的</p><p>B.用户的密码，是以密文形式存储在 /etc/passwd 文件中的</p><p><strong>C.用户的密码，是以密文形式存储在 /etc/shadow 文件中的</strong></p><p>D.用户登录的时候，会把用户的密码明文与保存的密码做对比</p><h2 id="题目6："><a href="#题目6：" class="headerlink" title="题目6："></a>题目6：</h2><p>对于N块硬盘组成的硬盘阵列，下面的说法哪个是错误的：</p><p><strong>A.raid1 与 raid5 相比，读取数据的速度 raid5 更快</strong></p><p>B.raid1 与 raid5 相比，raid5 的磁盘空间利用率更高</p><p>C.raid1 在 （N-1）块磁盘损坏的情况下，不影响数据的完整性</p><p>D.raid0 相比于raid1、raid5，读写速度最快</p><h2 id="题目7："><a href="#题目7：" class="headerlink" title="题目7："></a>题目7：</h2><p>负载均衡，你了解的常用软件有哪些？请写出至少三种以上，并评价各自的缺点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Nginx的缺点是：</span><br><span class="line">1. Nginx仅能支持http、https和Email协议，这样就在适用范围上面小些，这个是它的缺点。 </span><br><span class="line">2. 对后端服务器的健康检查，只支持通过端口来检测，不支持通过url来检测。不支持Session的直接保持，但能通过ip_hash来解决。</span><br><span class="line"></span><br><span class="line">LVS的缺点是：   </span><br><span class="line">1. 软件本身不支持正则表达式处理（仅仅支持4层负载均衡），不能做动静分离；而现在许多网站在这方面都有较强的需求，这个是Nginx/HAProxy+Keepalived的优势所在。 </span><br><span class="line">2. 如果是网站应用比较庞大的话，LVS/DR+Keepalived实施起来就比较复杂了，特别后面有 Windows Server的机器的话，如果实施及配置还有维护过程就比较复杂了，相对而言Nginx/HAProxy+Keepalived就简单多了。</span><br></pre></td></tr></table></figure><h2 id="题目8："><a href="#题目8：" class="headerlink" title="题目8："></a>题目8：</h2><p>执行 $ time sleep 2，输出如下：</p><p>real    0m2.003s<br>user   0m0.004s<br>sys    0m0.000s</p><p>请说明 real、user、sys三者具体代表的意思和区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当测试一个程序或比较不同算法时，执行时间是非常重要的，一个好的算法应该是用时最短的。所有类UNIX系统都包含time命令，使用这个命令可以统计时间消耗。</span><br><span class="line"></span><br><span class="line">real时间是指挂钟时间，也就是命令开始执行到结束的时间。这个短时间包括其他进程所占用的时间片，和进程被阻塞时所花费的时间。</span><br><span class="line">user时间是指进程花费在用户模式中的CPU时间，这是唯一真正用于执行进程所花费的时间，其他进程和花费阻塞状态中的时间没有计算在内。 </span><br><span class="line">sys时间是指花费在内核模式中的CPU时间，代表在内核中执系统调用所花费的时间，这也是真正由进程使用的CPU时间。</span><br></pre></td></tr></table></figure><h2 id="题目9："><a href="#题目9：" class="headerlink" title="题目9："></a>题目9：</h2><p>nginx rewrite 规则中 last、break、redirect、permanent 的含义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">rewite</span><br><span class="line"></span><br><span class="line">在server块下，会优先执行rewrite部分，然后才会去匹配location块 </span><br><span class="line">server中的rewrite break和last没什么区别，都会去匹配location，所以没必要用last再发起新的请求，可以留空</span><br><span class="line"></span><br><span class="line">location中的rewirte：</span><br><span class="line"></span><br><span class="line">不写last和break - 那么流程就是依次执行这些rewrite </span><br><span class="line">1. rewrite break - url重写后，直接使用当前资源，不再执行location里余下的语句，完成本次请求，地址栏url不变 </span><br><span class="line">2. rewrite last - url重写后，马上发起一个新的请求，再次进入server块，重试location匹配，超过10次匹配不到报500错误，地址栏url不变 </span><br><span class="line">3. rewrite redirect – 返回302临时重定向，地址栏显示重定向后的url，爬虫不会更新url（因为是临时） </span><br><span class="line">4. rewrite permanent – 返回301永久重定向, 地址栏显示重定向后的url，爬虫更新url</span><br><span class="line"></span><br><span class="line">使用last会对server标签重新发起请求</span><br><span class="line"></span><br><span class="line">如果location中rewrite后是对静态资源的请求，不需要再进行其他匹配，一般要使用break或不写，直接使用当前location中的数据源，完成本次请求 </span><br><span class="line">如果location中rewrite后，还需要进行其他处理，如动态fastcgi请求(.php,.jsp)等，要用last继续发起新的请求 </span><br><span class="line">(根的location使用last比较好, 因为如果有.php等fastcgi请求还要继续处理)</span><br><span class="line"></span><br><span class="line">使用alias指定源：必须使用last</span><br><span class="line"></span><br><span class="line">if语句主要用来判断一些在rewrite语句中无法直接匹配的条件,比如检测文件存在与否,http header,cookie等</span><br><span class="line"></span><br><span class="line">location匹配规则及优先级</span><br><span class="line"></span><br><span class="line">= 严格匹配这个查询。如果找到，停止搜索。</span><br><span class="line">^~ 匹配路径的前缀，如果找到，停止搜索。</span><br><span class="line">~ 为区分大小写的正则匹配</span><br><span class="line">~* 为不区分大小写匹配 </span><br><span class="line">优先级： =, ^~, ~/~*, 无</span><br><span class="line">break语句</span><br><span class="line"></span><br><span class="line">放在server块rewrite语句前面 </span><br><span class="line">如果是直接请求某个真实存在的文件,则用break语句停止rewrite检查 </span><br><span class="line">if (-f $request_filename) &#123; </span><br><span class="line">break; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目10："><a href="#题目10：" class="headerlink" title="题目10："></a>题目10：</h2><p>WEB 服务 cookies 和 session 的区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、cookie数据存放在客户的浏览器上，session数据放在服务器上 </span><br><span class="line">2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行 </span><br><span class="line">3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能 </span><br><span class="line">4、单个cookie在客户端的限制是3K，就是说一个站点在客户端存放的COOKIE不能大于3K。</span><br><span class="line"></span><br><span class="line">出处：http://blog.csdn.net/u010168160/article/details/47128443</span><br><span class="line"></span><br><span class="line">更多解释：</span><br><span class="line">https://www.zhihu.com/question/19786827</span><br></pre></td></tr></table></figure><h2 id="题目11："><a href="#题目11：" class="headerlink" title="题目11："></a>题目11：</h2><p>http 1.0 和 http 1.1下有何区别？http 2.0的主要变化或优势有哪些？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTTP 协议老的标准是HTTP/1.0，目前最通用的标准是HTTP/1.1。　　</span><br><span class="line"></span><br><span class="line">在同一个tcp的连接中可以传送多个HTTP请求和响应,多个请求和响应可以重叠，多个请求和响应可以同时进行,更加多的请求头和响应头(比如HTTP1.0没有host的字段)。</span><br><span class="line"></span><br><span class="line">它们最大的区别：</span><br><span class="line">1、在 HTTP/1.0 中,大多实现为每个请求/响应交换使用新的连接。HTTP 1.0规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求。</span><br><span class="line"></span><br><span class="line">2、在 HTTP/1.1 中,一个连接可用于一次或多次请求/响应交换,尽管连接可能由于各种原因被关闭。HTTP 1.1支持持久连接，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。一个包含有许多图像的网页文件的多个请求和应答可以在一个连接中传输，但每个单独的网页文件的请求和应答仍然需要使用各自的连接。HTTP 1.1还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间。</span><br><span class="line"></span><br><span class="line">相比 HTTP/1.x，HTTP/2 在底层传输做了很大的改动和优化：</span><br><span class="line"></span><br><span class="line">１.HTTP/2 采用二进制格式传输数据，而非 HTTP/1.x 的文本格式。二进制格式在协议的解析和优化扩展上带来更多的优势和可能。 </span><br><span class="line">2.HTTP/2 对消息头采用 HPACK 进行压缩传输，能够节省消息头占用的网络的流量。而 HTTP/1.x 每次请求，都会携带大量冗余头信息，浪费了很多带宽资源。头压缩能够很好的解决该问题。 </span><br><span class="line">3.多路复用，直白的说就是所有的请求都是通过一个 TCP 连接并发完成。HTTP/1.x 虽然通过 pipeline 也能并发请求，但是多个请求之间的响应会被阻塞的，所以 pipeline 至今也没有被普及应用，而 HTTP/2 做到了真正的并发请求。同时，流还支持优先级和流量控制。 </span><br><span class="line">4.Server Push：服务端能够更快的把资源推送给客户端。例如服务端可以主动把 JS 和 CSS 文件推送给客户端，而不需要客户端解析 HTML 再发送这些请求。当客户端需要的时候，它已经在客户端了。</span><br></pre></td></tr></table></figure><h1 id="第二部分：安全部分"><a href="#第二部分：安全部分" class="headerlink" title="第二部分：安全部分"></a>第二部分：安全部分</h1><h2 id="题目12："><a href="#题目12：" class="headerlink" title="题目12："></a>题目12：</h2><p>请列举WEB常见安全问题（不少于三项），阐述其原理、危害。</p><h2 id="题目13："><a href="#题目13：" class="headerlink" title="题目13："></a>题目13：</h2><p>请列举常见DOS攻击类型，并分别介绍其原理和防御方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://blog.csdn.net/libin_1/article/details/8116091</span><br></pre></td></tr></table></figure><h2 id="题目14："><a href="#题目14：" class="headerlink" title="题目14："></a>题目14：</h2><p>服务器遭到入侵，作为安全管理人员，你应做如何处理？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.cnblogs.com/lidong94/p/7161793.html</span><br></pre></td></tr></table></figure><h1 id="第三部分：网络部分"><a href="#第三部分：网络部分" class="headerlink" title="第三部分：网络部分"></a>第三部分：网络部分</h1><h2 id="题目15："><a href="#题目15：" class="headerlink" title="题目15："></a>题目15：</h2><p>请简述TCP的三次握手过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TCP(Transmission Control Protocol)　传输控制协议</span><br><span class="line"></span><br><span class="line">TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接:</span><br><span class="line"></span><br><span class="line">位码即tcp标志位,有6种标示:SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)</span><br><span class="line"></span><br><span class="line">Sequence number(顺序号码) Acknowledge number(确认号码)</span><br><span class="line"></span><br><span class="line">第一次握手：主机A发送位码为syn＝1,随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</span><br><span class="line"></span><br><span class="line">第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1),syn=1,ack=1,随机产生seq=7654321的包</span><br><span class="line"></span><br><span class="line">第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1,以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1),ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</span><br><span class="line"></span><br><span class="line">完成三次握手，主机A与主机B开始传送数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。 </span><br><span class="line">第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认； </span><br><span class="line">第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。 完成三次握手，客户端与服务器开始传送数据.</span><br></pre></td></tr></table></figure><h2 id="题目16："><a href="#题目16：" class="headerlink" title="题目16："></a>题目16：</h2><p>发现系统中存在大量TIME_WAIT，分析原因并提出三条以上优化建议。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://blog.sina.com.cn/s/blog_5d74fde50102x3di.html</span><br><span class="line">http://kerry.blog.51cto.com/172631/105233/</span><br></pre></td></tr></table></figure><h1 id="第四部分：Python部分"><a href="#第四部分：Python部分" class="headerlink" title="第四部分：Python部分"></a>第四部分：Python部分</h1><h2 id="题目17："><a href="#题目17：" class="headerlink" title="题目17："></a>题目17：</h2><p>xrange和range的异同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">range range([start,] stop[, step])，根据start与stop指定的范围以及step设定的步长，生成一个序列。</span><br><span class="line"></span><br><span class="line">xrange 用法与 range 完全相同，所不同的是生成的不是一个list对象，而是一个生成器。要生成很大的数字序列的时候，用xrange会比range性能优很多，因为不需要一上来就开辟一块很大的内存空间。</span><br></pre></td></tr></table></figure><h2 id="题目18："><a href="#题目18：" class="headerlink" title="题目18："></a>题目18：</h2><p>列表 A 和 B，使用Python快速获取 A 和 B 中的共有元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(set(A) &amp; set(B))</span><br><span class="line"></span><br><span class="line">for i in A:</span><br><span class="line">    if i in B:</span><br><span class="line">        print i</span><br></pre></td></tr></table></figure><p>题目19：</p><p>有20台服务器，需要在所有机器上 echo “123”，要求同时并行操作5台服务器，请使用Python或shell写出相关代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># encoding:utf-8</span><br><span class="line"> </span><br><span class="line">import time</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import threadpool</span><br><span class="line"> </span><br><span class="line">def cmd(ip):</span><br><span class="line">    #需先设置远程无密码执行命令</span><br><span class="line">    os.system(‘ssh ip echo &quot;123&quot; 2&gt;&amp;1’)</span><br><span class="line">    time.sleep(2)</span><br><span class="line"> </span><br><span class="line">pool = threadpool.ThreadPool(5)                     #创建一个线程池，包括线程数10个</span><br><span class="line">requests = threadpool.makeRequests(cmd, ip_list)    #传递函数和参数</span><br><span class="line">[pool.putRequest(req) for req in requests]          #将请求放入线程池进行处理</span><br><span class="line">pool.wait()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> linux招聘题目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Haproxy配置支持https协议转发</title>
      <link href="/2017/11/06/Haproxy-configuration-https.html"/>
      <url>/2017/11/06/Haproxy-configuration-https.html</url>
      <content type="html"><![CDATA[<h2 id="haproxy版本"><a href="#haproxy版本" class="headerlink" title="haproxy版本"></a>haproxy版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# haproxy -v</span><br><span class="line">HA-Proxy version 1.5.4 2014/09/02</span><br><span class="line">Copyright 2000-2014 Willy Tarreau &lt;w@1wt.eu&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="生成pem文件"><a href="#生成pem文件" class="headerlink" title="生成pem文件"></a>生成pem文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##申请通过的域名证书，下载后有两个文件1_52yifu.wang_bundle.crt和2_52yifu.wang.key</span><br><span class="line">##两个文件合成一个pem文件即可</span><br><span class="line"></span><br><span class="line">cat 1_52yifu.wang_bundle.crt 52yifu.pem | tree 52yifu.pem</span><br></pre></td></tr></table></figure><h2 id="http跳转https"><a href="#http跳转https" class="headerlink" title="http跳转https"></a>http跳转https</h2><p>把所有请求<a href="http://www.52yifu.wang的地址全部跳转为https://www.52yifu.com这个地址。" target="_blank" rel="noopener">http://www.52yifu.wang的地址全部跳转为https://www.52yifu.com这个地址。</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line">tune.ssl.default-dh-param 2048</span><br><span class="line"></span><br><span class="line">frontend app</span><br><span class="line">    bind *:80</span><br><span class="line">acl is_http hdr_beg(host) 52yifu.wang</span><br><span class="line">redirect scheme https if !&#123; ssl_fc &#125;</span><br><span class="line">bind *:443 ssl crt /etc/haproxy/ilanni.com.pem</span><br><span class="line">#acl cloud   url_sub -i /cloud</span><br><span class="line"></span><br><span class="line">use_backend app      if cloud</span><br><span class="line">use_backend nginx  if is_http</span><br><span class="line"></span><br><span class="line">default_backend       app</span><br><span class="line"></span><br><span class="line">backend nginx</span><br><span class="line">balance source</span><br><span class="line">server web1 127.0.0.1:86 maxconn 1024 weight 3 check inter 2000 rise 2 fall 3</span><br><span class="line"></span><br><span class="line">backend app</span><br><span class="line">balance source</span><br><span class="line">server web1 127.0.0.1:8080 maxconn 1024 weight 3 check inter 2000 rise 2 fall 3</span><br></pre></td></tr></table></figure></p><h2 id="http与https并存配置"><a href="#http与https并存配置" class="headerlink" title="http与https并存配置"></a>http与https并存配置</h2><p>服务器同时开放<a href="http://52yifu.wang和https://52yifu.wang的访问形式。" target="_blank" rel="noopener">http://52yifu.wang和https://52yifu.wang的访问形式。</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line">tune.ssl.default-dh-param 2048</span><br><span class="line"></span><br><span class="line">frontend app</span><br><span class="line">    bind *:80</span><br><span class="line">acl is_http hdr_beg(host) 52yifu.wang</span><br><span class="line">redirect scheme https if !&#123; ssl_fc &#125;</span><br><span class="line">bind *:443 ssl crt /etc/haproxy/ilanni.com.pem</span><br><span class="line"></span><br><span class="line">use_backend nginx  if is_http</span><br><span class="line">default_backend       tomcat</span><br><span class="line"></span><br><span class="line">backend nginx</span><br><span class="line">balance source</span><br><span class="line">server web1 127.0.0.1:86 maxconn 1024 weight 3 check inter 2000 rise 2 fall 3</span><br><span class="line"></span><br><span class="line">backend tomcat</span><br><span class="line">balance source</span><br><span class="line">server web1 127.0.0.1:8080 maxconn 1024 weight 3 check inter 2000 rise 2 fall 3</span><br><span class="line"></span><br><span class="line">frontend app443</span><br><span class="line">bind *:443 ssl crt /etc/haproxy/52yifu.pem</span><br><span class="line">acl is_443 hdr_beg(host) 52yifu.wang</span><br><span class="line"></span><br><span class="line">use_backend nginx443  if is_443</span><br><span class="line">default_backend           tomcat443</span><br><span class="line"></span><br><span class="line">backend nginx443</span><br><span class="line">balance source</span><br><span class="line">server web1 127.0.0.1:86 maxconn 1024 weight 3 check inter 2000 rise 2 fall 3</span><br><span class="line"></span><br><span class="line">backend tomcat443</span><br><span class="line">balance source</span><br><span class="line">server web1 127.0.0.1:8080 maxconn 1024 weight 3 check inter 2000 rise 2 fall 3</span><br></pre></td></tr></table></figure></p><h2 id="同台服务器不同域名之间的https与http配置"><a href="#同台服务器不同域名之间的https与http配置" class="headerlink" title="同台服务器不同域名之间的https与http配置"></a>同台服务器不同域名之间的https与http配置</h2><p>同一台服务器对52yifu.wang域名访问的全部跳转为<a href="https://52yifu.wan，而对52yifu.com访问走http协议，也就是跳转到http://52yifu.com这个地址。" target="_blank" rel="noopener">https://52yifu.wan，而对52yifu.com访问走http协议，也就是跳转到http://52yifu.com这个地址。</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line">tune.ssl.default-dh-param 2048</span><br><span class="line"></span><br><span class="line">frontend weblb</span><br><span class="line">bind *:80</span><br><span class="line">acl is_com hdr_beg(host) 52yifu.com</span><br><span class="line">acl is_wang hdr_beg(host) 52yifu.wang</span><br><span class="line">redirect prefix https://52yifu.wang if is_wang</span><br><span class="line"></span><br><span class="line">use_backend haproxyserver if is_com</span><br><span class="line"></span><br><span class="line">backend haproxyserver</span><br><span class="line">balance source</span><br><span class="line">server web1 127.0.0.1:9090 maxconn 1024 weight 3 check inter 2000 rise 2 fall 3</span><br><span class="line"></span><br><span class="line">frontend weblb443</span><br><span class="line">bind *:443 ssl crt /etc/haproxy/52yifu.pem</span><br><span class="line">acl is_443 hdr_beg(host) 52yifu.wang</span><br><span class="line"></span><br><span class="line">use_backend httpserver443 if is_443</span><br><span class="line"></span><br><span class="line">backend httpserver443</span><br><span class="line">balance source</span><br><span class="line">server web1 127.0.0.1:7070 maxconn 1024 weight 3 check inter 2000 rise 2 fall 3</span><br></pre></td></tr></table></figure></p><h2 id="同台服务器多域名均使用https配置"><a href="#同台服务器多域名均使用https配置" class="headerlink" title="同台服务器多域名均使用https配置"></a>同台服务器多域名均使用https配置</h2><p>同一台服务器对52yifu.wang和52yifu.com访问走https是协议。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line">tune.ssl.default-dh-param 2048</span><br><span class="line"></span><br><span class="line">frontend web80</span><br><span class="line">bind *:80</span><br><span class="line">acl is_http hdr_beg(host) 52yifu.wang</span><br><span class="line">redirect scheme https if !&#123; ssl_fc &#125;</span><br><span class="line"></span><br><span class="line">bind *:443 ssl crt /etc/haproxy/52yfiu.pem</span><br><span class="line">acl is_haproxy hdr_beg(host) 52yifu.com</span><br><span class="line">redirect scheme https if !&#123; ssl_fc &#125;</span><br><span class="line"></span><br><span class="line">bind *:443 ssl crt /etc/haproxy/52yifu.pem</span><br><span class="line">use_backend httpserver if is_http</span><br><span class="line">use_backend haproxyserver if is_haproxy</span><br><span class="line"></span><br><span class="line">backend httpserver</span><br><span class="line">balance source</span><br><span class="line">server web1 127.0.0.1:6060 maxconn 1024 weight 3 check inter 2000 rise 2 fall 3</span><br><span class="line"></span><br><span class="line">backend haproxyserver</span><br><span class="line">balance source</span><br><span class="line">server web1 127.0.0.1:9090 maxconn 1024 weight 3 check inter 2000 rise 2 fall 3</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> haproxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> harpoxy </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL备份说明</title>
      <link href="/2017/10/23/MySQL-backup-explain.html"/>
      <url>/2017/10/23/MySQL-backup-explain.html</url>
      <content type="html"><![CDATA[<h2 id="使用规范"><a href="#使用规范" class="headerlink" title="使用规范"></a>使用规范</h2><h3 id="实例级备份恢复"><a href="#实例级备份恢复" class="headerlink" title="实例级备份恢复"></a>实例级备份恢复</h3><p>使用innobackupex，在业务空闲期执行，考虑到IO影响及 FLUSH TABLE WITH READ LOCAK 拷贝非INNODB文件的锁表时间。</p><p>常规备份中，使用innobackupex在从库备份执行，在无从库的情况下，允许在业务低峰期对整个实例拷贝。<br><a id="more"></a></p><h3 id="库、表级别备份恢复"><a href="#库、表级别备份恢复" class="headerlink" title="库、表级别备份恢复"></a>库、表级别备份恢复</h3><p>考虑 数据量、磁盘IO情况、恢复难度问题。</p><p>mysqldump锁表时间长，备份时间长，但是导入方便，适合数据量小但是表格多 的库/表级别备份。</p><p>innobackupex锁表时间短，备份时间短，但是恢复较复杂，需要discord tablespace及 import TABLESPACE，除非允许备份文件成立单个实例，适合表数据量大但表格数量少的库/表级别备份。</p><h3 id="SQL结果备份及恢复"><a href="#SQL结果备份及恢复" class="headerlink" title="SQL结果备份及恢复"></a>SQL结果备份及恢复</h3><p>如果是单表简单查询，使用mysqldump，添加where条件，例如：mysqldump -S /tmp/mysql3330.sock -uroot -p –databases db1 –tables tb1 tb2 tb3 -d &gt;/data/backup/3330/mysqldump_20161229.sql 。</p><p>如果是复杂SQL查询结果，使用 INTO OUTFILE，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#FIELDS TERMINATED BY &apos;,&apos; 字段间分割符</span><br><span class="line">#OPTIONALLY ENCLOSED BY &apos;&quot;&apos; 将字段包围 对数值型无效</span><br><span class="line">#LINES TERMINATED BY &apos;\n&apos; 换行符</span><br><span class="line"> </span><br><span class="line">#查询导出</span><br><span class="line">select * into outfile &apos;/tmp/pt.txt&apos; FIELDS TERMINATED BY &apos;,&apos; OPTIONALLY ENCLOSED BY &apos;&quot;&apos; LINES TERMINATED BY &apos;\n&apos; from pt where id &gt;3;</span><br><span class="line"> </span><br><span class="line">#加载数据</span><br><span class="line">load data infile &apos;/tmp/pt1.txt&apos;  into table pt FIELDS TERMINATED BY &apos;,&apos; OPTIONALLY ENCLOSED BY &apos;&quot;&apos; LINES TERMINATED BY &apos;\n&apos;</span><br></pre></td></tr></table></figure></p><h3 id="表结构备份"><a href="#表结构备份" class="headerlink" title="表结构备份"></a>表结构备份</h3><p>使用mysqldump，添加-d参数。</p><h2 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h2><p>支持功能多且全面，但是锁表时间是个风险点，使用时注意，同时，若是5.6版本之前的，要充分考虑buffer pool的使用情况。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过general log查看mysqldump运行原理，详细流程见代码块 mysqldump。</p><p>mysqldump运行中，第一步，会检查数据库的配置情况，例如是否设置GTID模式及参数配置；第二步，锁所有表格，只允许读操作；第三步，逐个拷贝表格，生成创建表格上SQL（字符集为binary），再SELECT * FROM 表格 生成数据脚步（字符集为UTF8）；第4步，解锁。</p><p>当导出全实例或者大数据库时，这里有2个需要注意到问题：</p><ul><li>锁表的时间<br>基本可以算是从开始到结束都是锁表期间，不能对数据库进行写操作，只能读<br>线上主库无法支持这么长时间的锁表操作<br>线上从库，应考虑对复制到影响</li><li>buffer pool的影响<br>由于是采用SELECT * 生成SQL语句，大量读操作，会把缓存里的数据清理出来，导致热点数据移出，对线上DML操作带来严重影响<br>5.6后版本,新增了young buffer pool，一秒内以这个数据被再次访问，则会进入到buffer pool 的warm区。youny区占buffer pool的3/8，剩下的5/8为warm区，可以有效保证热点数据不被清出。</li></ul><h3 id="重要参数"><a href="#重要参数" class="headerlink" title="重要参数"></a>重要参数</h3><p>以下参数在使用过程中，需要留意，根据实际情况添加：</p><ul><li>–master-data=1 /2<br>生产change master to语句，这里注意，lock table 的时间，会提前到最开始的时候，不过相差的时间段非常小。<br>1 则是生产 change master to语句 不加注释符号，直接执行；<br>2 生成change master to语句，加注释符号</li><li>–singe-transaction<br>确保事物一致性，建议在GTID模式添加</li><li>–set-gtid-purged=ON / OFF<br>在GTID模式下的dump语句，会自动在备份文件之前生成<br>如果打算把该脚本放在非GTID模式的数据库执行，建议添加 –set-gtid-purged=OFF ，关闭生成purge 或者是去文件中注释掉该语句</li><li><p>-d<br>只导出表结构</p></li><li><p>–databases<br>不更随–tables的时候，可以指定多个db，如果指定了–tables，则默认第一个是database，其他的是table<br>也就是只允许导多个DB的数据文件，或者导同个DB的多个table文件；不允许到不同DB的某些table文件</p></li></ul><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>语法主要有以下三类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Usage: mysqldump [OPTIONS] database [tables]</span><br><span class="line">OR     mysqldump [OPTIONS] --databases [OPTIONS] DB1 [DB2 DB3...]</span><br><span class="line">OR     mysqldump [OPTIONS] --all-databases [OPTIONS]</span><br></pre></td></tr></table></figure></p><h4 id="实例备份恢复"><a href="#实例备份恢复" class="headerlink" title="实例备份恢复"></a>实例备份恢复</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#实例备份</span><br><span class="line">mysqldump -S /tmp/mysql3330.sock -uroot -p --all-datqabases &gt;/data/backup/3330/mysqldump_20161229.sql</span><br><span class="line"> </span><br><span class="line">#实例恢复</span><br><span class="line">#新建实例后，导入脚本</span><br><span class="line">mysql --socket=/tmp/mysql3306.sock -uroot -p &lt; /data/backup/3330/mysqldump_20161229.sql</span><br></pre></td></tr></table></figure><h4 id="部分备份恢复"><a href="#部分备份恢复" class="headerlink" title="部分备份恢复"></a>部分备份恢复</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#指定单个或者多个DB备份</span><br><span class="line">mysqldump -S /tmp/mysql3330.sock -uroot -p db1 db2 db3 &gt;/data/backup/3330/mysqldump_20161229.sql</span><br><span class="line">mysqldump -S /tmp/mysql3330.sock -uroot -p --databases db1 db2 db3 &gt;/data/backup/3330/mysqldump_20161229.sql</span><br><span class="line"> </span><br><span class="line">#指定单个或者多个表格备份</span><br><span class="line">mysqldump -S /tmp/mysql3330.sock -uroot -p --databases db1 --tables tb1 tb2 tb3 &gt;/data/backup/3330/mysqldump_20161229.sql</span><br><span class="line">mysqldump -S /tmp/mysql3330.sock -uroot -p db1 tb1 tb2 tb3 &gt;/data/backup/3330/mysqldump_20161229.sql</span><br><span class="line"> </span><br><span class="line">#只导出单个表格的某些行数据</span><br><span class="line">mysqldump -S /tmp/mysql3330.sock -uroot -pycf.com zero pt --where=&apos;1=1 limit 2&apos; &gt;/data/backup/3330/mysqldump_20161229.sql</span><br><span class="line"> </span><br><span class="line">#只备份表结构，不要表数据</span><br><span class="line">mysqldump -S /tmp/mysql3330.sock -uroot -p --databases db1 --tables tb1 tb2 tb3 -d &gt;/data/backup/3330/mysqldump_20161229.sql</span><br><span class="line"> </span><br><span class="line">#只备份表数据，不要表结构</span><br><span class="line">mysqldump -S /tmp/mysql3330.sock -uroot -pycf.com zero pt --where=&apos;id&gt;3&apos; --no-create-info  &gt;/data/backup/3330/mysqldump_20161229.sql</span><br><span class="line"> </span><br><span class="line">#恢复数据</span><br><span class="line">source /data/backup/3330/mysqldump_20161229.sql</span><br></pre></td></tr></table></figure><h2 id="PerconaXtraBackup"><a href="#PerconaXtraBackup" class="headerlink" title="PerconaXtraBackup"></a>PerconaXtraBackup</h2><p>PerconaXtraBackup软件中，含有xtrabackup跟innobackupex，xtrabackup中不备份表结构，innobackupex调用xtrabackup子线程后再备份表结构，故常用innobackupex，xtraback不做日常使用。目前支持 Myisam,innodb，可以备份 .frm, .MRG, .MYD, .MYI, .MAD, .MAI, .TRG, .TRN, .ARM, .ARZ, .CSM, CSV, .opt, .par, innoDB data 及innobdb log 文件。</p><h3 id="innobackupex原理（全量说明）"><a href="#innobackupex原理（全量说明）" class="headerlink" title="innobackupex原理（全量说明）"></a>innobackupex原理（全量说明）</h3><p>对数据库文件进行copy操作，同时建立多一个xtrabackup log 同步mysql的redo线程，copy数据文件结束时，flush table with read lock，拷贝非innodb数据文件的文件，拷贝结束后解锁。原理图见下图（图片来自知数堂）。通过general log查看mysqldump运行原理，详细流程见代码块 innobackupex。</p><p><img src="http://images2015.cnblogs.com/blog/608061/201612/608061-20161228162608179-421054534.png" alt=""></p><p>这里需要注意2个点：</p><ul><li><p>锁表时间<br>innobackupex锁表时间是 data文件及log文件copy结束时，才锁表，锁表时长为拷贝non-InnoDB tables and files的时长，相对时间较短，对业务影响小。</p></li><li><p>大事务<br>copy数据文件的过程中，由于是不锁表，允许数据进行DML操作，这里需要注意，如果这个时候，拷贝的过程中有大事务一直没有提交，界面显示log scanned up，持续copy binlog追上数据库的binlog文件，并且该时间点刚好所有事务已提交（这里测试的时候，如果是单条 insert ，delete，update的大事务，则是要等待单条完成才提交，但是如果是begin事务里边的，不用等待是否commit or rollback，begin里边的单条事务执行结束，则就开始提交，恢复的时候，当作是undo 事务，不会提交该事物，回滚该事务）。大事务容易导致备份时长加长，IO占用。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">2016-12-26T15:18:39.627366Z     1659 Connect    root@localhost on  using Socket</span><br><span class="line">2016-12-26T15:18:39.627789Z     1659 Query    SET SESSION wait_timeout=2147483</span><br><span class="line">2016-12-26T15:18:39.628193Z     1659 Query    SHOW VARIABLES </span><br><span class="line">#记录LSN号码，开始copy ibd文件</span><br><span class="line">2016-12-26T15:18:55.673740Z     1659 Query    SET SESSION lock_wait_timeout=31536000</span><br><span class="line">2016-12-26T15:18:55.674281Z     1659 Query    FLUSH NO_WRITE_TO_BINLOG TABLES</span><br><span class="line">#强制把没有 还没写入binlog 磁盘文件的缓存 强制刷新到磁盘</span><br><span class="line">#开始拷贝数据库文件，这里需要注意，如果这个时候，拷贝的过程中有大事务一直没有提交，则会一直拷贝其产生的 ，界面显示log scanned up，直到copy binlog追上数据库的binlog文件，并且该时间点刚好所有事务已提交（这里测试的时候，如果是单条 insert ，delete，update的大事务，则是要等待单条完成才提交，但是如果是begin事务里边的，不用等待是否commit or rollback，begin里边的单条事务执行结束，则就开始提交，恢复的时候，当作是undo 事务，不会提交该事物，回滚该事务。 ）</span><br><span class="line">2016-12-26T15:18:55.676345Z     1659 Query    FLUSH TABLES WITH READ LOCK</span><br><span class="line">#锁表，只允许读，不允许写及其他架构修改操作</span><br><span class="line">#拷贝除innodb 数据文件外的其他所有文件，包括表结构等，Starting to backup non-InnoDB tables and files</span><br><span class="line">2016-12-26T15:18:59.691409Z     1659 Query    SHOW MASTER STATUS</span><br><span class="line">#记录 备份到的 binlog文件及position位置，这个记录在 xtrabackup_binlog_info 文件，可提供复制使用</span><br><span class="line">2016-12-26T15:18:59.734418Z     1659 Query    SHOW VARIABLES</span><br><span class="line">2016-12-26T15:18:59.754530Z     1659 Query    FLUSH NO_WRITE_TO_BINLOG ENGINE LOGS</span><br><span class="line">2016-12-26T15:18:59.968452Z     1659 Query    UNLOCK TABLES</span><br><span class="line">#解锁，表格恢复可写，架构可修改</span><br><span class="line">2016-12-26T15:18:59.991046Z     1659 Query    SELECT UUID()</span><br><span class="line">2016-12-26T15:19:00.005980Z     1659 Query    SELECT VERSION()</span><br></pre></td></tr></table></figure><h3 id="重要参数-1"><a href="#重要参数-1" class="headerlink" title="重要参数"></a>重要参数</h3><h4 id="备份参数"><a href="#备份参数" class="headerlink" title="备份参数"></a>备份参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">innobackupex [--compress] [--compress-threads=NUMBER-OF-THREADS] [--compress-chunk-size=CHUNK-SIZE]</span><br><span class="line">             [--encrypt=ENCRYPTION-ALGORITHM] [--encrypt-threads=NUMBER-OF-THREADS] [--encrypt-chunk-size=CHUNK-SIZE]</span><br><span class="line">             [--encrypt-key=LITERAL-ENCRYPTION-KEY] | [--encryption-key-file=MY.KEY]</span><br><span class="line">             [--include=REGEXP]</span><br><span class="line">             [--user=NAME]</span><br><span class="line">             [--password=WORD] [--port=PORT] [--socket=SOCKET]</span><br><span class="line">             [--no-timestamp] [--ibbackup=IBBACKUP-BINARY]</span><br><span class="line">             [--slave-info] [--galera-info] [--stream=tar|xbstream]</span><br><span class="line">             [--defaults-file=MY.CNF] [--defaults-group=GROUP-NAME]</span><br><span class="line">             [--databases=LIST]</span><br><span class="line">             [--no-lock] #不执行FLUSH TABLES WITH READ LOCK，建议不使用，不会拷贝undo及redo文件</span><br><span class="line">             [--no-timestamp]</span><br><span class="line">             [--kill-long-queries-timeout=#] </span><br><span class="line">             [--tmpdir=DIRECTORY] [--tables-file=FILE]</span><br><span class="line">             [--history=NAME]</span><br><span class="line">             [--incremental] [--incremental-basedir]</span><br><span class="line">             [--incremental-dir] [--incremental-force-scan] [--incremental-lsn]</span><br><span class="line">             [--incremental-history-name=NAME] [--incremental-history-uuid=UUID]</span><br><span class="line">             [--close-files] [--compact]  BACKUP-ROOT-DIR</span><br></pre></td></tr></table></figure><h4 id="准备还原参数"><a href="#准备还原参数" class="headerlink" title="准备还原参数"></a>准备还原参数</h4><p>根据 BACKUP-DIR/xtrabackup_logfile创建新的logfile，xtrabackup为子进程，不连接数据库服务.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --apply-log [--use-memory=B]</span><br><span class="line">             [--defaults-file=MY.CNF]</span><br><span class="line">             [--export] [--redo-only] [--ibbackup=IBBACKUP-BINARY]</span><br><span class="line">             BACKUP-DIR</span><br></pre></td></tr></table></figure></p><h4 id="备份目录拷贝参数"><a href="#备份目录拷贝参数" class="headerlink" title="备份目录拷贝参数"></a>备份目录拷贝参数</h4><p>拷贝备份目录到指定目录，备份目录及拷贝目录文件均存在<br>innobackupex –copy-back [–defaults-file=MY.CNF] [–defaults-group=GROUP-NAME] BACKUP-DIR</p><p>移动备份目录到指定目录，备份目录为空<br>innobackupex –move-back [–defaults-file=MY.CNF] [–defaults-group=GROUP-NAME] BACKUP-DIR</p><h3 id="使用说明-1"><a href="#使用说明-1" class="headerlink" title="使用说明"></a>使用说明</h3><h4 id="实例备份及恢复"><a href="#实例备份及恢复" class="headerlink" title="实例备份及恢复"></a>实例备份及恢复</h4><h5 id="全量备份"><a href="#全量备份" class="headerlink" title="全量备份"></a>全量备份</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#全量备份 实例备份及恢复</span><br><span class="line">#备份</span><br><span class="line">innobackupex --defaults-file=/data/mysql/mysql3330.cnf --user=root --password=ycf.com --no-timestamp  /data/backup/3330/20161229</span><br><span class="line">innobackupex --apply-log  /data/backup/3330/20161229</span><br><span class="line"> </span><br><span class="line">#恢复</span><br><span class="line">innobackupex --copy-back --datadir=/data/mysql/mysql3350/data /data/backup/3330/20161229</span><br></pre></td></tr></table></figure><h5 id="增量备份恢复"><a href="#增量备份恢复" class="headerlink" title="增量备份恢复"></a>增量备份恢复</h5><p>#增量备份<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --defaults-file=/data/mysql/mysql3376.cnf --user=root --password=ycf.com --no-timestamp --incremental-basedir=/data/backup/3330/20161229 --incremental /data/backup/mysql3376/20161230diff</span><br><span class="line"> </span><br><span class="line">innobackupex --defaults-file=/data/mysql/mysql3376.cnf --user=root --password=ycf.com --no-timestamp --incremental-basedir=/data/backup/3330/20161230diff --incremental /data/backup/mysql3376/20161231diff</span><br><span class="line"> </span><br><span class="line">#增量恢复</span><br><span class="line">#现在完整备份文件中中应用redo日志，记得是redo-only， redo-only， redo-only， redo-only， 不是readonly，打死记得，不要乱来！！！！！！</span><br><span class="line">innobackupex --apply-log --redo-only /data/backup/3330/20161229</span><br><span class="line"> </span><br><span class="line">#应用第一个增量备份文件的redo日志到完整备份文件夹中</span><br><span class="line">innobackupex --apply-log --redo-only /data/backup/3330/20161229 --incremental-dir=/data/backup/mysql3376/20161230diff</span><br><span class="line"> </span><br><span class="line">#应用最后一个增量备份文件的redo日志到完整备份文件夹中，可以直接apply-log</span><br><span class="line">innobackupex --apply-log /data/backup/3330/20161229 --incremental-dir=/data/backup/mysql3376/20161231diff</span><br></pre></td></tr></table></figure></p><h5 id="部分备份"><a href="#部分备份" class="headerlink" title="部分备份"></a>部分备份</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#部分备份</span><br><span class="line">#指定数据库备份</span><br></pre></td></tr></table></figure><p>innobackupex –defaults-file=/data/mysql/mysql3330.cnf –databases=’zero mysql’ –user=root –password=ycf.com –no-timestamp /data/backup/3330/20161202</p><p>#指定表格备份</p><p>#3.1 –include 使用正则表达式</p><p>#3.2 –table-file 备份的完整表名写在file文件中<br>vim /tmp/backupfile #每行写一个库名，或者一个表的全名（database.table），写完库名或者表名后，千万不要有空格或者其他空白符号，会导致识别不了该表格或者库名，从而导致跳过<br>innobackupex –defaults-file=/data/mysql/mysql3330.cnf –tables-file=/tmp/backupfile –user=root –password=ycf.com –no-timestamp  /data/backup/3330/20161204</p><p>#3.3 –databases 完整库名和表名写在一起，用空格隔开<br>innobackupex –defaults-file=/data/mysql/mysql3330.cnf –user=root –password=ycf.com –no-timestamp –databases=zero.s1 /data/backup/3330/20161229</p><p>#指定表格恢复(开启独立表空间)</p><p>#首先要自己现在需要恢复的数据库上，创建该表格，然后discard tablespace,拷贝ibd文件过来，chown 文件所有者及用户组为mysql，再 import tablespace。</p><p>#如果有大量表格，用这个操作就比较麻烦，需要一个个来创建，包括指定数据库，也是这样处理，整个数据库先创建之后，在一个个表格discard，再import。<br>ALTER TABLE S1 DISCARD TABLESPACE;<br>ALTER TABLE S1 import TABLESPACE;<br><code>`</code></p>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python基本算法</title>
      <link href="/2017/08/23/Python-base-operation.html"/>
      <url>/2017/08/23/Python-base-operation.html</url>
      <content type="html"><![CDATA[<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>用来评估算法运行效率的一个东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    print(&quot;hello world&quot;)</span><br><span class="line"> </span><br><span class="line">def func1(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        print(&quot;hello world&quot;)</span><br><span class="line"> </span><br><span class="line">def func2(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        for j in range(n):</span><br><span class="line">            print(&quot;hello world&quot;)</span><br><span class="line"> </span><br><span class="line">def func3(n):</span><br><span class="line">    for i in range(n):</span><br><span class="line">        for j in range(n):</span><br><span class="line">            for k in range(n):</span><br><span class="line">                print(&quot;hello world&quot;)</span><br><span class="line"></span><br><span class="line">时间复杂度分别为：O(1),O(n),O(n^2),O(n^3)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>特殊的时间复杂度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def func4(n):</span><br><span class="line">    while n &gt;1:</span><br><span class="line">        print(n)</span><br><span class="line">        n = n//2</span><br><span class="line"></span><br><span class="line">时间复杂度叫O(logn)</span><br></pre></td></tr></table></figure></p><p>时间复杂度是用来估计算法运行时间的一个式子（单位）</p><p>一般来说，时间复杂度高的算法比复杂度低的算法慢</p><p>常见的时间复杂度（按效率排序）</p><p>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n*nlogn)&lt;O(n^3)</p><p>通常简单的判断时间复杂度的方法：</p><p>循环减半的过程——O(logn)</p><p>基层循环就是n的几次方的复杂度</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>用来评估算法内存占用大小的一个式子</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>二分查找又叫折半查找，二分查找应该属于减治技术的成功应用。所谓减治法，就是将原问题分解成若干个子问题后，利用了规模为n的原问题的解与较小规模（通常是n/2）的子问题的解之间的关系。<br>二分查找利用了记录按关键码有序的特点，其基本思想为：在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键码相等，则查找成功；若给定值小于中间记录的关键码，则在中间记录的左半边继续查找；若给定值大于中间记录的关键码，则在中间记录右半边区继续查找。不断重复上述过程，直到查找成功，或所查找的区域无记录，查找失败。<br>二分查找的时间复杂度是O(log(n))，最坏情况下的时间复杂度是O(n)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在一个排序数组中找一个数，返回该数出现的任意位置，如果不存在，返回-1</span><br><span class="line">样例</span><br><span class="line">给出数组 [1, 2, 2, 4, 5, 5].</span><br><span class="line"></span><br><span class="line">对于 target = 2, 返回 1 或者 2.</span><br><span class="line">对于 target = 5, 返回 4 或者 5.</span><br><span class="line">对于 target = 6, 返回 -1.</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">#coding=utf-8</span><br><span class="line"></span><br><span class="line">#自定义函数，实现二分查找，并返回查找结果</span><br><span class="line">def binary_search(find, list1) :</span><br><span class="line">  low = 0</span><br><span class="line">  high = len(list1)</span><br><span class="line">  while low &lt;= high :</span><br><span class="line">    mid = (low + high) / 2</span><br><span class="line">    if list1[mid] == find :</span><br><span class="line">      return mid</span><br><span class="line">    #左半边</span><br><span class="line">    elif list1[mid] &gt; find :</span><br><span class="line">      high = mid -1</span><br><span class="line">    #右半边</span><br><span class="line">    else :</span><br><span class="line">      low = mid + 1</span><br><span class="line">  #未找到返回-1</span><br><span class="line">  return -1</span><br><span class="line"></span><br><span class="line">list1 = [1,2,3,7,8,9,10,5]</span><br><span class="line">#进行二分查找算法前必须保证要查找的序列时有序的，这里假设是升序列表</span><br><span class="line">list1.sort()</span><br><span class="line"></span><br><span class="line">print &quot;原有序列表为:&quot;,list1</span><br><span class="line">try :</span><br><span class="line">  find = int(raw_input(&quot;请输入要查找的数：&quot;))</span><br><span class="line">except :</span><br><span class="line">  print &quot;请输入正整数！&quot;</span><br><span class="line">  exit()</span><br><span class="line"></span><br><span class="line">result = binary_search(find, list1)</span><br><span class="line">if result != -1 : </span><br><span class="line">  print &quot;要找的元素%d的序号为：%d&quot; %(find,result)</span><br><span class="line">else :</span><br><span class="line">  print &quot;未找到！&quot;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">list = [55,45,345,6,7,2,88,53,12,889,21]</span><br><span class="line">print list</span><br><span class="line"></span><br><span class="line">def insert_sort(list):</span><br><span class="line">        count = len(list)</span><br><span class="line">        for i in range(1,count):</span><br><span class="line">                k = list[i]</span><br><span class="line">                #print i</span><br><span class="line">                #print k</span><br><span class="line">                j = i -1</span><br><span class="line">                #print list[j]</span><br><span class="line">                while j &gt;= 0:</span><br><span class="line">                        if list[j] &gt;k:</span><br><span class="line">                                list[j+1]=list[j]</span><br><span class="line">                                list[j]=k</span><br><span class="line">                        j -=1</span><br><span class="line">                        #print list</span><br><span class="line">        return list</span><br><span class="line">print insert_sort(list)</span><br></pre></td></tr></table></figure></p><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。<br>每一趟只能将一个数归位, 如果有n个数进行排序,只需将n-1个数归位, 也就是说要进行n-1趟操作(已经归位的数不用再比较)<br>缺点: 冒泡排序解决了桶排序浪费空间的问题, 但是冒泡排序的效率特别低<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">def bubbleSort(nums):</span><br><span class="line">    for i in range(len(nums)-1):    # 这个循环负责设置冒泡排序进行的次数</span><br><span class="line">        for j in range(len(nums)-i-1):  # ｊ为列表下标</span><br><span class="line">            if nums[j] &gt; nums[j+1]:</span><br><span class="line">                nums[j], nums[j+1] = nums[j+1], nums[j]</span><br><span class="line">    return nums</span><br><span class="line"></span><br><span class="line">nums = [5,2,45,6,8,2,1]</span><br><span class="line"></span><br><span class="line">print bubbleSort(nums)</span><br></pre></td></tr></table></figure></p><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>基本思想：第1趟，在待排序记录r1 ~ r[n]中选出最小的记录，将它与r1交换；第2趟，在待排序记录r2 ~ r[n]中选出最小的记录，将它与r2交换；以此类推，第i趟在待排序记录r[i] ~ r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">def selectSort(nums):</span><br><span class="line">    for i in range(len(nums)):</span><br><span class="line">        max_index = 0</span><br><span class="line">        for j in range(len(nums)-i):</span><br><span class="line">            if nums[max_index] &lt; nums[j]:</span><br><span class="line">                max_index = j</span><br><span class="line">        nums[max_index], nums[len(nums)-i-1] = nums[len(nums)-i-1], nums[max_index]</span><br><span class="line">    return nums</span><br><span class="line"></span><br><span class="line">nums = [6,2,54435,3141]</span><br><span class="line">print selectSort(nums)</span><br></pre></td></tr></table></figure></p><h4 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h4><p>通排序非常浪费空间, 比如需要排序的范围在0~2000之间, 需要排序的数是[3,9,4,2000], 同样需要2001个空间</p><p>注意: 通排序不能排序小数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">def bucketSort(nums):</span><br><span class="line">    # 选择一个最大的数</span><br><span class="line">    max_num = max(nums)</span><br><span class="line">    # 创建一个元素全是0的列表, 当做桶</span><br><span class="line">    bucket = [0]*(max_num+1)</span><br><span class="line">    # 把所有元素放入桶中, 即把对应元素个数加一</span><br><span class="line">    for i in nums:</span><br><span class="line">        bucket[i] += 1</span><br><span class="line"></span><br><span class="line">    # 存储排序好的元素</span><br><span class="line">    sort_nums = []</span><br><span class="line">    # 取出桶中的元素</span><br><span class="line">    for j in range(len(bucket)):</span><br><span class="line">        if bucket[j] != 0:</span><br><span class="line">            for y in range(bucket[j]):</span><br><span class="line">                sort_nums.append(j)</span><br><span class="line"></span><br><span class="line">    return sort_nums</span><br><span class="line"></span><br><span class="line">nums = [5,6,3,2,1,65,2,0,8,0]</span><br><span class="line">print bucketSort(nums)</span><br></pre></td></tr></table></figure></p><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>希尔排序的实质就是分组插入排序，该方法又称缩小增量排序，因DL．Shell于1959年提出而得名。<br>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。<br>希尔排序是基于插入排序的以下两点性质而提出改进方法的：<br>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率<br>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># coding:utf-8</span><br><span class="line"></span><br><span class="line">def shellSort(nums):</span><br><span class="line">    # 设定步长</span><br><span class="line">    step = len(nums)/2</span><br><span class="line">    while step &gt; 0:</span><br><span class="line">        for i in range(step, len(nums)):</span><br><span class="line">            # 类似插入排序, 当前值与指定步长之前的值比较, 符合条件则交换位置</span><br><span class="line">            while i &gt;= step and nums[i-step] &gt; nums[i]:</span><br><span class="line">                nums[i], nums[i-step] = nums[i-step], nums[i]</span><br><span class="line">                i -= step</span><br><span class="line">        step = step/2</span><br><span class="line">    return nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    nums = [9,3,5,8,2,7,1]</span><br><span class="line">    print shellSort(nums)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux几个常用命令使用介绍</title>
      <link href="/2017/08/10/Linux-some-command-recommend.html"/>
      <url>/2017/08/10/Linux-some-command-recommend.html</url>
      <content type="html"><![CDATA[<h3 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h3><p>文本查找命令, 能够使用正则表达式的方式搜索文本，其搜索对象可以是单个或则多个文件<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">基本格式 grep [option] [regex] [path]</span><br><span class="line"></span><br><span class="line">-o 只按行显示匹配的字符</span><br><span class="line">-c 只输出匹配行的数目</span><br><span class="line">-n 显示匹配行的行号</span><br><span class="line">-v 显示不包含匹配文本的行</span><br><span class="line">-i 不区分大小写 (grep是大小写敏感的)</span><br><span class="line">-R 文件夹下递归搜索</span><br><span class="line">-l 只显示匹配的文件名 </span><br><span class="line">-H 显示文件名</span><br><span class="line">-A NUM(after)显示匹配的后几行</span><br><span class="line">-B NUM(before)显示匹配的前几行</span><br><span class="line">-C NUM显示匹配的前后几行 </span><br><span class="line">–color 标出颜色</span><br></pre></td></tr></table></figure></p><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><p>ls是命令行中用的最多的命令之一了，用于显示目录下的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">基本格式 ls [option]</span><br><span class="line"></span><br><span class="line">-a 列出所有文件，包括’.’开头的隐藏文件</span><br><span class="line">-h 使打印结果易于使用者查看(human readable)</span><br><span class="line">-l 列出文件的详细信息：创建者，创建时间，读写权限等</span><br><span class="line">-s 显示文件大小</span><br><span class="line">-t 按时间进行文件的排序</span><br><span class="line">-S 以大小进行排序</span><br><span class="line">-r 当前条件逆序</span><br><span class="line">-L 显示文件链接名</span><br><span class="line">-R 将目录中所有文件都递归显示出来</span><br></pre></td></tr></table></figure></p><h3 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h3><p>文件查找命令,find命令将递归的搜索目录下符合要求的所有文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">基本格式 find [path] [option] [expression]</span><br><span class="line"></span><br><span class="line">-name 查找名为filename的文件</span><br><span class="line">-perm 查找符合执行权限 -user 按照文件的所属主查找</span><br><span class="line">-mtime -n +n 按照文件的更改时间查找文件，n代表天数</span><br><span class="line">-ctime -n +n 按照创建时间查找</span><br><span class="line">-newer f1 !f2 查更改时间在f1和f2之间的文件 </span><br><span class="line">-size n 查找长度为n块的文件，一块为512 bytes</span><br><span class="line">-depth 使得查找在进入子目录前先行查找完本目录</span><br><span class="line">-prune 查找时忽略某个目录 -type 按文件类型查找，b为块设备，d为目录，f为普通文档</span><br></pre></td></tr></table></figure></p><h3 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h3><p>用于统计输入中的字节数，字数，行数并输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">基本格式 wc [option] [filename]</span><br><span class="line"></span><br><span class="line">-c 统计字节数</span><br><span class="line">-l 统计行数</span><br><span class="line">-m 统计字符数</span><br><span class="line">-w 统计字数，一个字为由空白，跳格或换行字符分隔的字符串</span><br></pre></td></tr></table></figure></p><h3 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h3><p>连结命令(Concatenation)，连结多个文本，或者以标准输出形式打印文件的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基本格式 cat [option] [filename]</span><br><span class="line"></span><br><span class="line">-n 队输出的所有行编号</span><br><span class="line">-b 与-n类似，但空行不编号</span><br></pre></td></tr></table></figure></p><h3 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h3><p>文本查看命令，可以看文本的最后几行。tail命令的优点在于其内容能够与输入同步更新，非常适用于查看实时日志。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">基本格式 tail [option] [filename]</span><br><span class="line"></span><br><span class="line">-n number 定位参数，+5表示从第五行开始显示，10或-10表示显示最后10行</span><br><span class="line"></span><br><span class="line">-f 监控文本变化，更新内容</span><br><span class="line"></span><br><span class="line">-k number 从number所指的KB处开始读取</span><br></pre></td></tr></table></figure></p><h3 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h3><p>该命令与tail命令类似，默认显示文件前两行的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">基本格式 head [option] [filename]</span><br><span class="line"></span><br><span class="line">-n number 显示前几行,-5表示文件中除了最后5行之外的所有内容</span><br><span class="line"></span><br><span class="line">-c number 显示前几个字节</span><br></pre></td></tr></table></figure></p><h3 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h3><p>该命令用于查看系统中文件和目录所占用的空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">基本格式 du [option] [name]</span><br><span class="line"></span><br><span class="line">-h 用human readable的方式显示</span><br><span class="line"></span><br><span class="line">--max-depth=number 最大的查询层次</span><br><span class="line"></span><br><span class="line">-a 显示所有文件的大小，默认只显示目录的大小</span><br></pre></td></tr></table></figure></p><h3 id="which和whereis"><a href="#which和whereis" class="headerlink" title="which和whereis"></a>which和whereis</h3><p>which命令的作用是在PATH变量制定的路径中，查找系统命令的位置。<br>whereis命令用于程序名的搜索，且只能搜索｛二进制文件，man说明文件，源代码文件｝。whereis的查询时通过查询系统的数据库文件记录，所以速度比find更快，但由于数据库的更新频率较为缓慢，其结果与实际状况并不一定一致。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-m 只查找说明文件</span><br><span class="line"></span><br><span class="line">-b 只查找二进制文件</span><br></pre></td></tr></table></figure></p><h3 id="sort命令"><a href="#sort命令" class="headerlink" title="sort命令"></a>sort命令</h3><p>sort命令用于对文本进行排序，并将结果输出。其以文本的每一行为单位，从首字符向后，依次按照ascii码值进行比较，最后升序排列。（默认是忽略每行前面空格的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">基本格式 sort [option] [filename]</span><br><span class="line"></span><br><span class="line">-u 忽略重复行</span><br><span class="line"></span><br><span class="line">-n 按照数字大小排序</span><br><span class="line"></span><br><span class="line">-r 逆序</span><br><span class="line"></span><br><span class="line">-k start,endstart为比较的起始位置，end为结束位置</span><br></pre></td></tr></table></figure></p><h3 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h3><p>netstat用于输出linux系统的网络情况信息，以前面试的时候还被问过：“如何查看占用某个端口的程序的pid?”，这个问题实际用netstat -anp输出，然后再grep一下即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">基本格式 netstat [option]</span><br><span class="line"></span><br><span class="line">-a 显示所有socket连接</span><br><span class="line"></span><br><span class="line">-l 显示监控中(listening)的socket连接</span><br><span class="line"></span><br><span class="line">-n 直接使用ip地址，而不使用域名服务器</span><br><span class="line"></span><br><span class="line">-p 显示正在使用socket的程序的pid和名称</span><br><span class="line"></span><br><span class="line">-r 打印路由表</span><br><span class="line"></span><br><span class="line">-t 显示TCP传输协议的连线状况</span><br><span class="line"></span><br><span class="line">-u 显示UDP传输协议的连线状况</span><br><span class="line"></span><br><span class="line">-s 显示网络工作信息统计表</span><br></pre></td></tr></table></figure></p><h3 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h3><p>more命令用于显示文件的内容，与cat和tail等命令不同的是，more命令是按页显示文件内容，同时具有搜寻字符串的功能。（由于more具有向前翻页功能，因此该命令会加载整个文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">基本格式 more [option] [filename]</span><br><span class="line"></span><br><span class="line">+n 从第n行开始显示</span><br><span class="line"></span><br><span class="line">-n 定义屏幕大小为n行</span><br><span class="line"></span><br><span class="line">+/pattern 再显示前按pattern匹配子串并显示</span><br><span class="line"></span><br><span class="line">-s 把连续的多个空行显示为一行</span><br><span class="line"></span><br><span class="line">常用操作命令：</span><br><span class="line"></span><br><span class="line">Enter 向下n行，默认为1行</span><br><span class="line"></span><br><span class="line">Ctrl+F 跳过一屏</span><br><span class="line"></span><br><span class="line">Ctrl+B 返回上一屏</span><br><span class="line"></span><br><span class="line">空格键 向下滚动一屏</span><br><span class="line"></span><br><span class="line">= 输出当前行的行号</span><br><span class="line"></span><br><span class="line">在more模式中回车，输入/pattern可以持续向下搜索</span><br></pre></td></tr></table></figure></p><h3 id="less命令"><a href="#less命令" class="headerlink" title="less命令"></a>less命令</h3><p>less命令与more命令对应，既可以前后翻看文件，同时还有前后搜索功能，除此之外，less在查看前不会加载整个文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">基本格式 less [option] [filename]</span><br><span class="line"></span><br><span class="line">－N 显示每行的行号</span><br><span class="line"></span><br><span class="line">-i 忽略搜索时的大小写</span><br><span class="line"></span><br><span class="line">-s 将连续空行显示为一行</span><br><span class="line"></span><br><span class="line">-m 显示百分比</span><br><span class="line"></span><br><span class="line">常用操作命令：</span><br><span class="line"></span><br><span class="line">/字符串 向下搜索“字符串”功能</span><br><span class="line"></span><br><span class="line">?字符串 向上搜索“字符串”功能</span><br><span class="line"></span><br><span class="line">n 重复前一个搜索</span><br><span class="line"></span><br><span class="line">空格键 滚动一页</span><br><span class="line"></span><br><span class="line">d 滚动半页</span><br><span class="line"></span><br><span class="line">b 回溯一页</span><br><span class="line"></span><br><span class="line">y 回溯一行</span><br><span class="line"></span><br><span class="line">q 退出less命令</span><br></pre></td></tr></table></figure></p><h3 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h3><p>ps命令用来在Linux系统中显示进程的状态快照，其参数选项可谓非常之多。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">基本格式 ps [option]</span><br><span class="line"></span><br><span class="line">-a 显示所有用户的进程</span><br><span class="line"></span><br><span class="line">-x 显示没有控制终端的进程</span><br><span class="line"></span><br><span class="line">-u 按照用户名称查询进程</span><br><span class="line"></span><br><span class="line">-f 列出全部信息，常和其它选项联用</span><br><span class="line"></span><br><span class="line">-j 用任务格式来显示进程</span><br><span class="line"></span><br><span class="line">-e 显示所有进程</span><br></pre></td></tr></table></figure></p><h3 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h3><p>kill命令用于终止指定的进程，其工作原理是通过向进程发送指定的信号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">基本格式 kill [params] [pid]</span><br><span class="line"></span><br><span class="line">常用的是：</span><br><span class="line"></span><br><span class="line">kill -9 pid //强制终止</span><br><span class="line"></span><br><span class="line">-1 Hup 终端断线</span><br><span class="line"></span><br><span class="line">-2 INT 中断（同Ctrl+c）</span><br><span class="line"></span><br><span class="line">-3 QUIT 退出(同Ctrl+\)</span><br><span class="line"></span><br><span class="line">-15 TERM 终止，是默认的信号，如果应用本身会捕获该信号，则不能终止</span><br><span class="line"></span><br><span class="line">-9 KILL 强制终止</span><br><span class="line"></span><br><span class="line">-18 CONT 继续</span><br><span class="line"></span><br><span class="line">-19 STOP 暂停(同Ctrl+z)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grep </tag>
            
            <tag> sed </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>备份数据库脚本并将备份数据库同步到又拍云存储空间</title>
      <link href="/2017/08/09/%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC%E5%B9%B6%E5%B0%86%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8C%E6%AD%A5%E5%88%B0%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4.html"/>
      <url>/2017/08/09/%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E8%84%9A%E6%9C%AC%E5%B9%B6%E5%B0%86%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8C%E6%AD%A5%E5%88%B0%E5%8F%88%E6%8B%8D%E4%BA%91%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4.html</url>
      <content type="html"><![CDATA[<p>经历过一次意外，可能某拥有服务器权限的同事将测试器将全部数据给删除了，导致服务器数据库全部丢失，服务器崩溃，只能重装。特弄了一个简单的数据库脚本备份并将数据库同步到又拍云存储空间。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##又拍云UPX工具</span><br><span class="line"></span><br><span class="line">https://github.com/polym/upx</span><br></pre></td></tr></table></figure></p><p>同步脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost backup]# cat backup.sh </span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">##用于本地目录中的所有文件同步上传到又拍云存储，用时监控目录变化</span><br><span class="line"></span><br><span class="line">service_name=&quot;testbackup&quot;</span><br><span class="line">username=&quot;******&quot;</span><br><span class="line">password=&quot;******&quot;</span><br><span class="line"></span><br><span class="line">/home/backup/upx login testbackup ****** ******</span><br><span class="line"></span><br><span class="line">/home/backup/upx sync /home/backup</span><br></pre></td></tr></table></figure><p>mysql备份脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost backup]# cat xtrabackup-full.sh </span><br><span class="line">#!/bin/bash  </span><br><span class="line"> </span><br><span class="line">user=&apos;root&apos; </span><br><span class="line">passwd=&apos;123456&apos;</span><br><span class="line">host=&apos;127.0.0.1&apos;</span><br><span class="line">port=&apos;3307&apos;</span><br><span class="line">database=&apos;cloud_yssj&apos; </span><br><span class="line">my_config=&apos;/usr/local/mysql-test1/my.cnf&apos; </span><br><span class="line">log=$database-$(date +%Y%m%d%H%M).log  </span><br><span class="line">str=$database-$(date +%Y%m%d%H%M).tar.gz  </span><br><span class="line">backup_dir=&apos;/home/backup/mysql&apos;</span><br><span class="line"></span><br><span class="line">echo &quot;Start to backup at $(date +%Y%m%d%H%M)&quot;  </span><br><span class="line">if [ ! -d &quot;$backup_dir&quot; ];then  </span><br><span class="line">    mkdir -p $backup_dir  </span><br><span class="line">fi  </span><br><span class="line"></span><br><span class="line">/usr/bin/innobackupex --defaults-file=$my_config --user=$user --password=$passwd --port=$port --host=$host --database=$database --stream=tar $backup_dir 2&gt;$backup_dir/$log | gzip 1&gt;$backup_dir/$str  </span><br><span class="line"> </span><br><span class="line">if [ $? -eq 0 ];then  </span><br><span class="line">    echo &quot;Backup is finish! at $(date +%Y%m%d%H%M)&quot;  </span><br><span class="line">    exit 0  </span><br><span class="line">else  </span><br><span class="line">    echo &quot;Backup is Fail! at $(date +%Y%m%d%H%M)&quot;  </span><br><span class="line">    exit 1  </span><br><span class="line">fi  </span><br><span class="line">echo &quot;Backup Process Done&quot;</span><br></pre></td></tr></table></figure></p><p>mongodb、redis备份脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost backup]# cat mongodb.sh </span><br><span class="line">#!/bin/bash  </span><br><span class="line"></span><br><span class="line">host=&apos;127.0.0.1:37018&apos;</span><br><span class="line">database=&apos;cloud_yssj&apos; </span><br><span class="line"> </span><br><span class="line">backup_dir1=&apos;/home/backup/mongodb&apos;</span><br><span class="line">backup_dir2=&apos;/home/backup/redis&apos;</span><br><span class="line"> </span><br><span class="line">if [ ! -d &quot;$backup_dir1&quot; ];then  </span><br><span class="line">    mkdir -p $backup_dir1  </span><br><span class="line">fi  </span><br><span class="line"></span><br><span class="line">if [ ! -d &quot;$backup_dir2&quot; ];then  </span><br><span class="line">    mkdir -p $backup_dir2  </span><br><span class="line">fi  </span><br><span class="line"></span><br><span class="line">/home/mongodb/bin/mongodump -h $host -d $database -o $backup_dir1  </span><br><span class="line"> </span><br><span class="line">tar zcvf $backup_dir1/mongodb-$(date +%Y%m%d%H%M).tar.gz $backup_dir1/$database</span><br><span class="line"></span><br><span class="line">rm -rf /home/backup/mongodb/cloud_yssj</span><br><span class="line"></span><br><span class="line">tar zcvf $backup_dir2/redis-$(date +%Y%m%d%H%M).tar.gz /home/redis/data/dump8000.rdb</span><br></pre></td></tr></table></figure></p><p>增加定时任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost backup]# crontab -l</span><br><span class="line">30 1 * * * /home/backup/mongodb.sh</span><br><span class="line">20 2 * * * /home/backup/xtrabackup-full.sh</span><br><span class="line">40 3 * * * /home/backup/backup.sh</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 备份 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> mongodb </tag>
            
            <tag> redis </tag>
            
            <tag> xtrabackup </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Xtrabackup进行MySQL备份</title>
      <link href="/2017/08/08/use-Xtrabackup-MySQL-backup.html"/>
      <url>/2017/08/08/use-Xtrabackup-MySQL-backup.html</url>
      <content type="html"><![CDATA[<h2 id="Xtrabackup介绍"><a href="#Xtrabackup介绍" class="headerlink" title="Xtrabackup介绍"></a>Xtrabackup介绍</h2><p>Xtrabackup是由percona提供的mysql数据库备份工具，据官方介绍，这也是世界上惟一一款开源的能够对innodb和xtradb数据库进行热备的工具。特点：</p><p>备份过程快速、可靠；<br>备份过程不会打断正在执行的事务；<br>能够基于压缩等功能节约磁盘空间和流量；<br>自动实现备份检验；<br>还原速度快；<br><a id="more"></a></p><h2 id="下载安装xtrabackup"><a href="#下载安装xtrabackup" class="headerlink" title="下载安装xtrabackup"></a>下载安装xtrabackup</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://www.percona.com/downloads/XtraBackup/LATEST/</span><br><span class="line"></span><br><span class="line">[root@node1 ~]# yum localinstall percona-xtrabackup-24-2.4.8-1.el6.x86_64.rpm</span><br><span class="line">[root@node1 ~]# yum install http://mirrors.sohu.com/fedora-epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><h3 id="完全备份"><a href="#完全备份" class="headerlink" title="完全备份"></a>完全备份</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# innobackupex --defaults-file=/usr/local/mysql-test3/my.cnf --user=root --password=123456 --port=3312 --host=127.0.0.1 /home/backup/</span><br></pre></td></tr></table></figure><p>使用innobakupex备份时，其会调用xtrabackup备份所有的InnoDB表，复制所有关于表结构定义的相关文件(.frm)、以及MyISAM、MERGE、CSV和ARCHIVE表的相关文件，同时还会备份触发器和数据库配置信息相关的文件。这些文件会被保存至一个以时间命令的目录中。</p><p>在备份的同时，innobackupex还会在备份目录中创建如下文件：<br>(1)xtrabackup_checkpoints – 备份类型（如完全或增量）、备份状态（如是否已经为prepared状态）和LSN(日志序列号)范围信息；每个InnoDB页(通常为16k大小)都会包含一个日志序列号，即LSN。LSN是整个数据库系统的系统版本号，每个页面相关的LSN能够表明此页面最近是如何发生改变的。</p><p>(2)xtrabackup_binlog_info – mysql服务器当前正在使用的二进制日志文件及至备份这一刻为止二进制日志事件的位置。</p><p>(3)xtrabackup_binlog_pos_innodb – 二进制日志文件及用于InnoDB或XtraDB表的二进制日志文件的当前position。</p><p>(4)xtrabackup_binary – 备份中用到的xtrabackup的可执行文件；</p><p>(5)backup-my.cnf – 备份命令用到的配置选项信息；</p><p>在使用innobackupex进行备份时，还可以使用–no-timestamp选项来阻止命令自动创建一个以时间命名的目录；如此一来，innobackupex命令将会创建一个BACKUP-DIR目录来存储备份数据。</p><h4 id="准备-prepare-一个完全备份"><a href="#准备-prepare-一个完全备份" class="headerlink" title="准备(prepare)一个完全备份"></a>准备(prepare)一个完全备份</h4><p>一般情况下，在备份完成后，数据尚且不能用于恢复操作，因为备份的数据中可能会包含尚未提交的事务或已经提交但尚未同步至数据文件中的事务。因此，此时数据文件仍处理不一致状态。“准备”的主要作用正是通过回滚未提交的事务及同步已经提交的事务至数据文件也使得数据文件处于一致性状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# innobackupex --defaults-file=/usr/local/mysql-test3/my.cnf --user=root --password=123456 --port=3312 --host=127.0.0.1 --apply-log /home/backup/2017-08-08_15-28-09/</span><br></pre></td></tr></table></figure><p>在实现“准备”的过程中，innobackupex通常还可以使用–use-memory选项来指定其可以使用的内存的大小，默认通常为100M。如果有足够的内存可用，可以多划分一些内存给prepare的过程，以提高其完成速度。</p><h4 id="从一个完全备份中恢复数据"><a href="#从一个完全备份中恢复数据" class="headerlink" title="从一个完全备份中恢复数据"></a>从一个完全备份中恢复数据</h4><p>innobackupex命令的–copy-back选项用于执行恢复操作，其通过复制所有数据相关的文件至mysql服务器DATADIR目录中来执行恢复过程。innobackupex通过backup-my.cnf来获取DATADIR目录的相关信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rm -rf data/*</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# innobackupex --defaults-file=/usr/local/mysql-test3/my.cnf  --copy-back /home/backup/2017-08-08_15-28-09/</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# chown -R mysql:mysql data</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# killall mysqld</span><br><span class="line"></span><br><span class="line">#####可以不用启动mysql恢复数据#####</span><br></pre></td></tr></table></figure></p><h3 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h3><p>每个InnoDB的页面都会包含一个LSN信息，每当相关的数据发生改变，相关的页面的LSN就会自动增长。这正是InnoDB表可以进行增量备份的基础，即innobackupex通过备份上次完全备份之后发生改变的页面来实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# innobackupex --defaults-file=/usr/local/mysql-test3/my.cnf --user=root --password=123456 --port=3312 --host=127.0.0.1 --incremental /home/backup/ --incremental-basedir=/home/backup/2017-08-08_15-28-09/</span><br></pre></td></tr></table></figure></p><p>此命令执行结束后，innobackupex命令会在/backup目录中创建一个新的以时间命名的目录以存放所有的增量备份数据。另外，在执行过增量备份之后再一次进行增量备份时，其–incremental-basedir应该指向上一次的增量备份所在的目录。</p><p>需要注意的是，增量备份仅能应用于InnoDB或XtraDB表，对于MyISAM表而言，执行增量备份时其实进行的是完全备份。</p><p>“准备”(prepare)增量备份与整理完全备份有着一些不同，尤其要注意的是：<br>(1)需要在每个备份(包括完全和各个增量备份)上，将已经提交的事务进行“重放”。“重放”之后，所有的备份数据将合并到完全备份上。<br>(2)基于所有的备份将未提交的事务进行“回滚”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# innobackupex --defaults-file=/usr/local/mysql-test3/my.cnf --user=root --password=123456 --port=3312 --host=127.0.0.1 --apply-log --redo-only /home/backup/2017-08-08_15-28-09/</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# innobackupex --defaults-file=/usr/local/mysql-test3/my.cnf --user=root --password=123456 --port=3312 --host=127.0.0.1 --apply-log --redo-only /home/backup/2017-08-08_15-28-09/ --incremental-dir=/home/backup/2017-08-08_16-10-12/</span><br></pre></td></tr></table></figure></p><h3 id="Xtrabackup的“流”及“备份压缩”功能"><a href="#Xtrabackup的“流”及“备份压缩”功能" class="headerlink" title="Xtrabackup的“流”及“备份压缩”功能"></a>Xtrabackup的“流”及“备份压缩”功能</h3><p>Xtrabackup对备份的数据文件支持“流”功能，即可以将备份的数据通过STDOUT传输给tar程序进行归档，而不是默认的直接保存至某备份目录中。要使用此功能，仅需要使用–stream选项即可。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --stream=tar  /backup | gzip &gt; /backup/`date +%F_%H-%M-%S`.tar.gz</span><br></pre></td></tr></table></figure><p>甚至也可以使用类似如下命令将数据备份至其它服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --stream=tar  /backup | ssh   &quot;cat -  &gt; /backups/`date +%F_%H-%M-%S`.tar&quot;</span><br></pre></td></tr></table></figure></p><p>此外，在执行本地备份时，还可以使用–parallel选项对多个文件进行并行复制。此选项用于指定在复制时启动的线程数目。当然，在实际进行备份时要利用此功能的便利性，也需要启用innodb_file_per_table选项或共享的表空间通过innodb_data_file_path选项存储在多个ibdata文件中。对某一数据库的多个文件的复制无法利用到此功能。其简单使用方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --parallel  /path/to/backup</span><br></pre></td></tr></table></figure></p><p>同时，innobackupex备份的数据文件也可以存储至远程主机，这可以使用–remote-host选项来实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --remote-host=root@ww agedu.com /path/IN/REMOTE/HOST/to/backup</span><br></pre></td></tr></table></figure></p><h3 id="导入或导出单张表"><a href="#导入或导出单张表" class="headerlink" title="导入或导出单张表"></a>导入或导出单张表</h3><p>默认情况下，InnoDB表不能通过直接复制表文件的方式在mysql服务器之间进行移植，即便使用了innodb_file_per_table选项。而使用Xtrabackup工具可以实现此种功能，不过，此时需要“导出”表的mysql服务器启用了innodb_file_per_table选项（严格来说，是要“导出”的表在其创建之前，mysql服务器就启用了innodb_file_per_table选项），并且“导入”表的服务器同时启用了innodb_file_per_table和innodb_expand_import选项。</p><p>(1)“导出”表<br>导出表是在备份的prepare阶段进行的，因此，一旦完全备份完成，就可以在preparef过程中通过–export选项将某表导出了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --apply-log --export /path/to/backup</span><br></pre></td></tr></table></figure></p><p>此命令会为每个innodb表的表空间创建一个以.exp结尾的文件，这些以.exp结尾的文件则可以用于导入至其它服务器。</p><p>(2)“导入”表<br>要在mysql服务器上导入来自于其它服务器的某innodb表，需要先在当前服务器上创建一个跟原表表结构一致的表，而后才能实现将表导入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE mytable (...)  ENGINE=InnoDB;</span><br></pre></td></tr></table></figure></p><p>然后将此表的表空间删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE mydatabase.mytable  DISCARD TABLESPACE;</span><br></pre></td></tr></table></figure></p><p>接下来，将来自于“导出”表的服务器的mytable表的mytable.ibd和mytable.exp文件复制到当前服务器的数据目录，然后使用如下命令将其“导入”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE mydatabase.mytable  IMPORT TABLESPACE;</span><br></pre></td></tr></table></figure></p><h3 id="使用Xtrabackup对数据库进行部分备份"><a href="#使用Xtrabackup对数据库进行部分备份" class="headerlink" title="使用Xtrabackup对数据库进行部分备份"></a>使用Xtrabackup对数据库进行部分备份</h3><p>Xtrabackup也可以实现部分备份，即只备份某个或某些指定的数据库或某数据库中的某个或某些表。但要使用此功能，必须启用innodb_file_per_table选项，即每张表保存为一个独立的文件。同时，其也不支持–stream选项，即不支持将数据通过管道传输给其它程序进行处理。</p><p>此外，还原部分备份跟还原全部数据的备份也有所不同，即你不能通过简单地将prepared的部分备份使用–copy-back选项直接复制回数据目录，而是要通过导入表的方向来实现还原。当然，有些情况下，部分备份也可以直接通过–copy-back进行还原，但这种方式还原而来的数据多数会产生数据不一致的问题，因此，无论如何不推荐使用这种方式。</p><p>(1)创建部分备份</p><p>创建部分备份的方式有三种：正则表达式(–include), 枚举表文件(–tables-file)和列出要备份的数据库(–databases)。</p><p>(a)使用–include<br>使用–include时，要求为其指定要备份的表的完整名称，即形如databasename.tablename，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --include=&apos;^mageedu[.]tb1&apos;  /path/to/backup</span><br></pre></td></tr></table></figure></p><p>(b)使用–tables-file<br>此选项的参数需要是一个文件名，此文件中每行包含一个要备份的表的完整名称；如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e &apos;mageedu.tb1\nmageedu.tb2&apos; &gt; /tmp/tables.txt</span><br><span class="line">innobackupex --tables-file=/tmp/tables.txt  /path/to/backup</span><br></pre></td></tr></table></figure></p><p>(c)使用–databases<br>此选项接受的参数为数据名，如果要指定多个数据库，彼此间需要以空格隔开；同时，在指定某数据库时，也可以只指定其中的某张表。此外，此选项也可以接受一个文件为参数，文件中每一行为一个要备份的对象。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --databases=&apos;mageedu.tb1 testdb&quot;  /path/to/backup</span><br></pre></td></tr></table></figure></p><p>(2)整理(preparing)部分备份</p><p>prepare部分备份的过程类似于导出表的过程，要使用–export选项进行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --apply-log --export  /pat/to/partial/backup</span><br></pre></td></tr></table></figure></p><p>此命令执行过程中，innobackupex会调用xtrabackup命令从数据字典中移除缺失的表，因此，会显示出许多关于“表不存在”类的警告信息。同时，也会显示出为备份文件中存在的表创建.exp文件的相关信息。</p><p>(3)还原部分备份</p><p>还原部分备份的过程跟导入表的过程相同。当然，也可以通过直接复制prepared状态的备份直接至数据目录中实现还原，不要此时要求数据目录处于一致状态。</p>]]></content>
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> xtrabackup </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redis4.0配置文件介绍</title>
      <link href="/2017/08/01/redis4.0-config-file-explain.html"/>
      <url>/2017/08/01/redis4.0-config-file-explain.html</url>
      <content type="html"><![CDATA[<p>Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daemonize no</span><br></pre></td></tr></table></figure></p><p>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidfile /var/run/redis.pid</span><br></pre></td></tr></table></figure></p><p>指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">port 6379</span><br></pre></td></tr></table></figure></p><p>绑定的主机地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind 127.0.0.1</span><br></pre></td></tr></table></figure></p><p>当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeout 300</span><br></pre></td></tr></table></figure></p><p>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loglevel verbose</span><br></pre></td></tr></table></figure></p><p>日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logfile stdout</span><br></pre></td></tr></table></figure></p><p>设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">databases 16</span><br></pre></td></tr></table></figure></dbid></p><p>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</p><p>save <seconds> <changes><br>Redis默认配置文件中提供了三个条件：</changes></seconds></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><p>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</p><p>指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdbcompression yes</span><br></pre></td></tr></table></figure></p><p>指定本地数据库文件名，默认值为dump.rdb<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbfilename dump.rdb</span><br></pre></td></tr></table></figure></p><p>指定本地数据库存放目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir ./</span><br></pre></td></tr></table></figure></p><p>设置当本机为slave服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure></p><p>当master服务设置了密码保护时，slave服务连接master的密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masterauth &lt;master-password&gt;</span><br></pre></td></tr></table></figure></p><p>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass foobared</span><br></pre></td></tr></table></figure></password></p><p>设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxclients 128</span><br></pre></td></tr></table></figure></p><p>指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxmemory &lt;bytes&gt;</span><br></pre></td></tr></table></figure></p><p>指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendonly no</span><br></pre></td></tr></table></figure></p><p>指定更新日志文件名，默认为appendonly.aof<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendfilename appendonly.aof</span><br></pre></td></tr></table></figure></p><p>指定更新日志条件，共有3个可选值：<br>no：表示等操作系统进行数据缓存同步到磁盘（快）<br>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）<br>everysec：表示每秒同步一次（折衷，默认值）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendfsync everysec</span><br></pre></td></tr></table></figure></p><p>指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm-enabled no</span><br></pre></td></tr></table></figure></p><p>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm-swap-file /tmp/redis.swap</span><br></pre></td></tr></table></figure></p><p>将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm-max-memory 0</span><br></pre></td></tr></table></figure></p><p>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm-page-size 32</span><br></pre></td></tr></table></figure></p><p>设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，在磁盘上每8个pages将消耗1byte的内存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm-pages 134217728</span><br></pre></td></tr></table></figure></p><p>设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm-max-threads 4</span><br></pre></td></tr></table></figure></p><p>设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glueoutputbuf yes</span><br></pre></td></tr></table></figure></p><p>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hash-max-zipmap-entries 64</span><br><span class="line">hash-max-zipmap-value 512</span><br></pre></td></tr></table></figure></p><p>指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activerehashing yes</span><br></pre></td></tr></table></figure></p><p>指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /path/to/local.conf</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SaltStack学习记录</title>
      <link href="/2017/05/09/SaltStack-stuty-record.html"/>
      <url>/2017/05/09/SaltStack-stuty-record.html</url>
      <content type="html"><![CDATA[<h3 id="SaltStack-介绍"><a href="#SaltStack-介绍" class="headerlink" title="SaltStack 介绍"></a>SaltStack 介绍</h3><p>salt是一个新的基础平台管理工具, 只需要花费数分钟即可运行起来, 扩展性足以支撑管理上万台服务器, 数秒钟即可完成数据传递。 经常被描述为Func加强版+Puppet精简版。 SaltStack采用C/S架构。简单的说: salt是一种全新的基础设施管理方式, 部署轻松, 在几分钟内可运行起来, 扩展性好。很容易管理上万台服务器, 速度快, 服务器之间秒级通信。 salt底层采用动态的连接总线, 使其可以用于编配, 远程执行, 配置管理等等。最为重要的一点, salt是开源的。 而且是python实现的自动化运维工具, 这意味着我们可以对其进行一些改动, 在其基础之上加上我们想要的功能, 对其进行二次开发。<br><a id="more"></a></p><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>系统Centos7.2 x64两台, 一台为master,另一台为minion。</p><h3 id="SaltStack安装"><a href="#SaltStack安装" class="headerlink" title="SaltStack安装"></a>SaltStack安装</h3><h4 id="两台安装epel"><a href="#两台安装epel" class="headerlink" title="两台安装epel"></a>两台安装epel</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# rpm -Uvh http://ftp.linux.ncsu.edu/pub/epel/7/x86_64/e/epel-release-7-9.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="在master安装"><a href="#在master安装" class="headerlink" title="在master安装"></a>在master安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install salt-master</span><br></pre></td></tr></table></figure><h4 id="在minion上运行"><a href="#在minion上运行" class="headerlink" title="在minion上运行"></a>在minion上运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# yum -y install salt-minion</span><br></pre></td></tr></table></figure><h3 id="SAltStack配置"><a href="#SAltStack配置" class="headerlink" title="SAltStack配置"></a>SAltStack配置</h3><h4 id="修改master配置文件，并启动服务"><a href="#修改master配置文件，并启动服务" class="headerlink" title="修改master配置文件，并启动服务"></a>修改master配置文件，并启动服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/salt/master</span><br><span class="line">修改interface: 192.168.1.226 #master ip地址</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# systemctl start salt-master</span><br></pre></td></tr></table></figure><h4 id="修改被管理端-minion-，并启动服务"><a href="#修改被管理端-minion-，并启动服务" class="headerlink" title="修改被管理端(minion)，并启动服务"></a>修改被管理端(minion)，并启动服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/salt/minion</span><br><span class="line">修改master： 192.168.1.226</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# systemctl start salt-minion</span><br></pre></td></tr></table></figure><h4 id="master接受minion的托管请求，在master上操作"><a href="#master接受minion的托管请求，在master上操作" class="headerlink" title="master接受minion的托管请求，在master上操作"></a>master接受minion的托管请求，在master上操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# salt-key -L</span><br><span class="line">Accepted Keys:</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">192.168.1.136</span><br><span class="line">Rejected Keys:</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# salt-key -a 192.168.1.136</span><br><span class="line">The following keys are going to be accepted:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">192.168.1.136</span><br><span class="line">Proceed? [n/Y] y</span><br><span class="line">Key for minion 192.168.1.136 accepted.</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# salt-key -L</span><br><span class="line">Accepted Keys:</span><br><span class="line">192.168.1.136</span><br><span class="line">Denied Keys:</span><br><span class="line">Unaccepted Keys:</span><br><span class="line">Rejected Keys:</span><br></pre></td></tr></table></figure><h3 id="SAltStack操作"><a href="#SAltStack操作" class="headerlink" title="SAltStack操作"></a>SAltStack操作</h3><h4 id="基本操作命令通用格式"><a href="#基本操作命令通用格式" class="headerlink" title="基本操作命令通用格式"></a>基本操作命令通用格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式: 命令 对象 执行模块 参数salt ‘*’ cmd.run “ping -c 4 www.baidu.com&quot;</span><br></pre></td></tr></table></figure><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# salt &apos;*&apos; cmd.run &apos;uptime&apos;</span><br><span class="line">192.168.1.136:</span><br><span class="line">     21:14:44 up 1 day,  2:29,  3 users,  load average: 0.10, 0.18, 0.13</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# salt &apos;*&apos; cmd.run &apos;date&apos;</span><br><span class="line">192.168.1.136:</span><br><span class="line">    Fri May  5 21:14:51 CST 2017</span><br><span class="line"></span><br><span class="line">[root@object1 ~]# salt &apos;*&apos; disk.usage</span><br></pre></td></tr></table></figure><p><strong>默认情况下master和minion之间使用以下端口进行通信:<br>4505(publish_port)：salt的消息发布系统<br>4506(ret_port)：salt客户端与服务端通信的端口<br>cmd.run 为模块,又称之为超级命令. 可以执行Linux中的任何命令</strong></p><h3 id="Salt-States"><a href="#Salt-States" class="headerlink" title="Salt States"></a>Salt States</h3><p>SLS(代表Salt State文件)是Salt State系统的核心。SLS描述了系统的目标状态, 由格式简单的数据构成。 这经常被称作配置管理。</p><h4 id="默认的数据-YAML"><a href="#默认的数据-YAML" class="headerlink" title="默认的数据 - YAML"></a>默认的数据 - YAML</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> saltstack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录redis的RDB、AOF持久化</title>
      <link href="/2017/05/08/record-redis-RDB%E3%80%81AOF-persistence.html"/>
      <url>/2017/05/08/record-redis-RDB%E3%80%81AOF-persistence.html</url>
      <content type="html"><![CDATA[<p>Redis是个支持持久化的内存数据库，redis需要经常将内存中的数据同步到磁盘来保证持久化。<br><a id="more"></a></p><h3 id="快照（Snapshotting）默认持久化方式"><a href="#快照（Snapshotting）默认持久化方式" class="headerlink" title="快照（Snapshotting）默认持久化方式"></a>快照（Snapshotting）默认持久化方式</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">snapshotting：       </span><br><span class="line">save 900 1          #900秒内如果超过1个key被修改，则发起快照保存</span><br><span class="line">save 300 10         #300秒内如果超过10个key被修改，则发起快照保存</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ol><li><p>Redis使用fork函数复制一份当前进程（父进程）的副本（子进程）；</p></li><li><p>父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入硬盘中的临时文件；</p></li><li><p>当子进程写入完所有数据后会用该临时文件替换旧的RDB文件，至此一次快照操作完成。　　</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4></li></ol><ul><li><p>RDB是个非常紧凑的文件，保存了redis在某个时间点上的数据集，使得我们可以通过定时备份RDB文件来实现Redis数据库备份和灾难恢复，也可以将其传送到其他的数据中心用于保存。</p></li><li><p>RDB可以最大化redis的性能，执行RDB持久化时只需要fork一个子进程，并由子进程进行持久化工作，父进程不需要处理任何磁盘I/O操作。</p></li><li><p>RDB在恢复大数据集时比AOF要快，启动效率要高许多。</p></li><li><p>RDB文件是经过压缩（可以配置rdbcompression参数以禁用压缩节省CPU占用）的二进制格式，所以占用的空间会小于内存中的数据大小，更加利于传输。</p></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p>每次快照持久化都是将内存数据完整写入到磁盘一次，并不是增量的只同步增数据。如果数据量大的话，而且写操作比较多，必然会引起大量的磁盘io操作，可能会严重影响性能。</p></li><li><p>快照方式是在一定间隔时间做一次的，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改，有一些数据丢失的风险。</p></li><li><p>client的save通知redis做一次快照持久化不推荐。save操作是在主线程中保存快照的，由于redis是用一个主线程来处理所有client的请求，这种方式会阻塞所有client请求，所以不推荐使用。</p></li></ul><h3 id="日志追加方式（append-only-file）方式"><a href="#日志追加方式（append-only-file）方式" class="headerlink" title="日志追加方式（append-only file）方式"></a>日志追加方式（append-only file）方式</h3><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aof：</span><br><span class="line">appendonly yes         #启动aof持久化方式有三种修改方式</span><br><span class="line">#appendfsync always    #收到写命令就立即写入到硬盘，效率最慢，但是保证完全持久化</span><br><span class="line">#appendfsync everysec  #每秒种就写入一次硬盘，在性能和持久化方面做了折中</span><br><span class="line">#appendfsync no        #完全依赖操作系统，性能最好，但是持久化没保证，不知道何时持久化</span><br></pre></td></tr></table></figure><h4 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h4><ol><li><p>redis调用fork ，现在有父子两个进程</p></li><li><p>子进程根据内存中的数据库快照，往临时文件中写入重建数据库状态的命令</p></li></ol><ol><li><p>父进程继续处理client请求，除了把写命令写入到原来的aof文件中。同时把收到的写命令缓存起来。这样就能保证如果子进程重写失败的话并不会出问题。</p></li><li><p>当子进程把快照内容写入已命令方式写到临时文件中后，子进程发信号通知父进程。然后父进程把缓存的写命令也写入到临时文件。</p></li><li><p>现在父进程可以使用临时文件替换老的aof文件，并重命名，后面收到的写命令也开始往新的aof文件中追加。</p></li></ol><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li><p>该机制可以带来更高的数据安全性，即数据持久性。</p></li><li><p>由于该机制对日志文件的写入操作采用的是append模式，因此在写入过程中即使出现宕机现象，也不会破坏日志文件中已经存在的内容。然而如果我们本次操作只是写入了一半数据就出现了系统崩溃问题，不用担心，在Redis下一次启动之前，我们可以通过redis-check-aof工具来帮助我们解决数据一致性的问题。</p></li><li><p>如果日志过大，Redis可以自动启用rewrite机制。即Redis以append模式不断的将修改数据写入到老的磁盘文件中，同时Redis还会创建一个新的文件用于记录此期间有哪些修改命令被执行。因此在进行rewrite切换时可以更好的保证数据安全性。</p></li><li><p>AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。事实上，也可以通过该文件完成数据的重建。</p></li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li><p>对于相同数量的数据集而言，AOF文件通常要大于RDB文件，持久化文件会变的越来越大。</p></li><li><p>根据同步策略的不同，AOF在运行效率上往往会慢于RDB。</p></li></ul>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS 7用DevStack安装OpenStack</title>
      <link href="/2017/05/05/CentOS7-DevStack-install-OpenStack.html"/>
      <url>/2017/05/05/CentOS7-DevStack-install-OpenStack.html</url>
      <content type="html"><![CDATA[<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="OpenStack源码"><a href="#OpenStack源码" class="headerlink" title="OpenStack源码"></a>OpenStack源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/openstack</span><br></pre></td></tr></table></figure><h3 id="DevStack源码"><a href="#DevStack源码" class="headerlink" title="DevStack源码"></a>DevStack源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://git.openstack.org/cgit/openstack-dev/devstack</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="设置aliyun的base源"><a href="#设置aliyun的base源" class="headerlink" title="设置aliyun的base源"></a>设置aliyun的base源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">[root@compute ~]# yum makecache</span><br></pre></td></tr></table></figure><h3 id="DevStack和OpenStack源码可以替换为TryStack镜像"><a href="#DevStack和OpenStack源码可以替换为TryStack镜像" class="headerlink" title="DevStack和OpenStack源码可以替换为TryStack镜像"></a>DevStack和OpenStack源码可以替换为TryStack镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># use TryStack git mirror</span><br><span class="line">GIT_BASE=http://git.trystack.cn</span><br><span class="line">NOVNC_REPO=http://git.trystack.cn/kanaka/noVNC.git</span><br><span class="line">SPICE_REPO=http://git.trystack.cn/git/spice/spice-html5.git</span><br></pre></td></tr></table></figure><h3 id="pip源地址可以换为国内的豆瓣源"><a href="#pip源地址可以换为国内的豆瓣源" class="headerlink" title="pip源地址可以换为国内的豆瓣源"></a>pip源地址可以换为国内的豆瓣源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@compute ~]# mkdir /root/.pip</span><br><span class="line">[root@compute ~]# cat /root/.pip/pip.conf</span><br><span class="line">[global]</span><br><span class="line">index-url = http://pypi.douban.com/simple/</span><br><span class="line">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure><h2 id="安装阶段"><a href="#安装阶段" class="headerlink" title="安装阶段"></a>安装阶段</h2><h3 id="下载DevStack"><a href="#下载DevStack" class="headerlink" title="下载DevStack"></a>下载DevStack</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone http://git.trystack.cn/openstack-dev/devstack.git -b stable/ocata</span><br></pre></td></tr></table></figure><h3 id="创建stack用户"><a href="#创建stack用户" class="headerlink" title="创建stack用户"></a>创建stack用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@controller home]# mkdir -p /home/stack/logs</span><br><span class="line">[root@controller home]# cd devstack/tools/</span><br><span class="line">[root@controller home]# sudo ./create-stack-user.sh</span><br><span class="line">[root@controller home]# sudo passwd stack</span><br><span class="line">[root@controller home]# sudo chown –R stack:stack /home/devstack</span><br><span class="line">[root@controller home]# sudo chown –R stack:stack /home/stack</span><br></pre></td></tr></table></figure><h3 id="授权stack用户"><a href="#授权stack用户" class="headerlink" title="授权stack用户"></a>授权stack用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# vim /etc/sudoers</span><br><span class="line">第98行，添加1行</span><br><span class="line">stack ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure><h3 id="创建local-conf文件"><a href="#创建local-conf文件" class="headerlink" title="创建local.conf文件"></a>创建local.conf文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# cat /home/devstack/local.conf </span><br><span class="line">[[local|localrc]]</span><br><span class="line"></span><br><span class="line"># use TryStack git mirror</span><br><span class="line">GIT_BASE=http://git.trystack.cn</span><br><span class="line">NOVNC_REPO=http://git.trystack.cn/kanaka/noVNC.git</span><br><span class="line">SPICE_REPO=http://git.trystack.cn/git/spice/spice-html5.git</span><br><span class="line"></span><br><span class="line">#OFFLINE=True</span><br><span class="line">RECLONE=True</span><br><span class="line"></span><br><span class="line"># Define images to be automatically downloaded during the DevStack built process.</span><br><span class="line">DOWNLOAD_DEFAULT_IMAGES=False</span><br><span class="line">IMAGE_URLS=&quot;http://images.trystack.cn/cirros/cirros-0.3.4-x86_64-disk.img&quot;</span><br><span class="line"></span><br><span class="line">HOST_IP=192.168.1.225</span><br><span class="line"></span><br><span class="line"># Credentials</span><br><span class="line">DATABASE_PASSWORD=pass</span><br><span class="line">ADMIN_PASSWORD=pass</span><br><span class="line">SERVICE_PASSWORD=pass</span><br><span class="line">SERVICE_TOKEN=pass</span><br><span class="line">RABBIT_PASSWORD=pass</span><br><span class="line"></span><br><span class="line">HORIZON_BRANCH=stable/ocata</span><br><span class="line">KEYSTONE_BRANCH=stable/ocata</span><br><span class="line">NOVA_BRANCH=stable/ocata</span><br><span class="line">NEUTRON_BRANCH=stable/ocata</span><br><span class="line">GLANCE_BRANCH=stable/ocata</span><br><span class="line">CINDER_BRANCH=stable/ocata</span><br><span class="line"></span><br><span class="line">#keystone</span><br><span class="line">KEYSTONE_TOKEN_FORMAT=UUID</span><br><span class="line"></span><br><span class="line">##Heat</span><br><span class="line">HEAT_BRANCH=stable/ocata</span><br><span class="line">enable_service h-eng h-api h-api-cfn h-api-cw</span><br><span class="line"></span><br><span class="line">## Swift</span><br><span class="line">SWIFT_BRANCH=stable/ocata</span><br><span class="line">ENABLED_SERVICES+=,s-proxy,s-object,s-container,s-account</span><br><span class="line">SWIFT_REPLICAS=1</span><br><span class="line">SWIFT_HASH=011688b44136573e209e</span><br><span class="line"></span><br><span class="line"># Enabling Neutron (network) Service</span><br><span class="line">disable_service n-net</span><br><span class="line">enable_service q-svc</span><br><span class="line">enable_service q-agt</span><br><span class="line">enable_service q-dhcp</span><br><span class="line">enable_service q-l3</span><br><span class="line">enable_service q-meta</span><br><span class="line">enable_service q-metering</span><br><span class="line">enable_service neutron</span><br><span class="line"></span><br><span class="line">## Neutron options</span><br><span class="line">Q_USE_SECGROUP=True</span><br><span class="line">FLOATING_RANGE=&quot;192.168.1.0/24&quot;</span><br><span class="line">FIXED_RANGE=&quot;10.0.0.0/24&quot;</span><br><span class="line">NETWORK_GATEWAY=&quot;10.0.0.2&quot;</span><br><span class="line">Q_FLOATING_ALLOCATION_POOL=start=192.168.1.150,end=192.168.1.180</span><br><span class="line">PUBLIC_NETWORK_GATEWAY=&quot;192.168.1.200&quot;</span><br><span class="line">Q_L3_ENABLED=True</span><br><span class="line">PUBLIC_INTERFACE=eth0</span><br><span class="line">Q_USE_PROVIDERNET_FOR_PUBLIC=True</span><br><span class="line">OVS_PHYSICAL_BRIDGE=br-ex</span><br><span class="line">PUBLIC_BRIDGE=br-ex</span><br><span class="line">OVS_BRIDGE_MAPPINGS=public:br-ex</span><br><span class="line"></span><br><span class="line"># #VLAN configuration.</span><br><span class="line">Q_PLUGIN=ml2</span><br><span class="line">ENABLE_TENANT_VLANS=True</span><br><span class="line"></span><br><span class="line"># Logging</span><br><span class="line">LOGFILE=/home/stack/logs/stack.sh.log</span><br><span class="line">VERBOSE=True</span><br><span class="line">LOG_COLOR=True</span><br><span class="line">SCREEN_LOGDIR=/home/stack/logs</span><br></pre></td></tr></table></figure><h3 id="以stack用户身份运行脚本安装"><a href="#以stack用户身份运行脚本安装" class="headerlink" title="以stack用户身份运行脚本安装"></a>以stack用户身份运行脚本安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@controller ~]# su stack</span><br><span class="line">[root@controller ~]# cd /home/devstack/</span><br><span class="line">[root@controller devstack]# ./stack.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>CentOS 7 安装KVM虚拟机</title>
      <link href="/2017/05/04/CentOS7-install-KVM.html"/>
      <url>/2017/05/04/CentOS7-install-KVM.html</url>
      <content type="html"><![CDATA[<p>kvm相关安装包及其作用<br>qemu-kvm    主要的KVM程序包<br>python-virtinst    创建虚拟机所需要的命令行工具和程序库<br>virt-manager    GUI虚拟机管理工具<br>virt-top    虚拟机统计命令<br>virt-viewer    GUI连接程序，连接到已配置好的虚拟机<br>libvirt    C语言工具包，提供libvirt服务<br>libvirt-client    为虚拟客户机提供的C语言工具包<br>virt-install    基于libvirt服务的虚拟机创建命令<br>bridge-utils    创建和管理桥接设备的工具<br><a id="more"></a></p><h2 id="验证CPU是否支持KVM；如果结果中有vmx（Intel）或svm-AMD-字样，就说明CPU的支持的。"><a href="#验证CPU是否支持KVM；如果结果中有vmx（Intel）或svm-AMD-字样，就说明CPU的支持的。" class="headerlink" title="验证CPU是否支持KVM；如果结果中有vmx（Intel）或svm(AMD)字样，就说明CPU的支持的。"></a>验证CPU是否支持KVM；如果结果中有vmx（Intel）或svm(AMD)字样，就说明CPU的支持的。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# egrep &apos;(vmx|svm)&apos; /proc/cpuinfo</span><br></pre></td></tr></table></figure><h2 id="安装KVM及其依赖项"><a href="#安装KVM及其依赖项" class="headerlink" title="安装KVM及其依赖项"></a>安装KVM及其依赖项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# yum install qemu-kvm virt-install bridge-utils libvirt virt-install virt-manager -y</span><br></pre></td></tr></table></figure><h2 id="验证安装结果"><a href="#验证安装结果" class="headerlink" title="验证安装结果"></a>验证安装结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# lsmod | grep kvm</span><br><span class="line">kvm_intel             162153  0 </span><br><span class="line">kvm                   525409  1 kvm_intel</span><br></pre></td></tr></table></figure><h2 id="开启kvm服务，并且设置其开机自动启动"><a href="#开启kvm服务，并且设置其开机自动启动" class="headerlink" title="开启kvm服务，并且设置其开机自动启动"></a>开启kvm服务，并且设置其开机自动启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# systemctl start libvirtd</span><br><span class="line">[root@object1 ~]# systemctl enable libvirtd</span><br></pre></td></tr></table></figure><h2 id="配置网桥模式"><a href="#配置网桥模式" class="headerlink" title="配置网桥模式"></a>配置网桥模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//创建 ifcfg-br0 文件</span><br><span class="line">[root@object1 ~]# cat /etc/sysconfig/network-scripts/ifcfg-br0 </span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEVICE=&quot;br0&quot;</span><br><span class="line">NAME=&quot;br0&quot;</span><br><span class="line">TYPE=&quot;Bridge&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.1.226&quot;</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;</span><br><span class="line">GATEWAY=&quot;192.168.1.200&quot;</span><br><span class="line">DNS1=&quot;114.114.114.114&quot;</span><br><span class="line">DNS2=&quot;8.8.8.8&quot;</span><br><span class="line"></span><br><span class="line">//修改ifcfg-eno16777736 文件</span><br><span class="line">[root@object1 ~]# cat /etc/sysconfig/network-scripts/ifcfg-eno16777736 </span><br><span class="line">#TYPE=&quot;Ethernet&quot;</span><br><span class="line">#BOOTPROTO=&quot;static&quot;</span><br><span class="line">#DEFROUTE=&quot;yes&quot;</span><br><span class="line">#PEERDNS=&quot;yes&quot;</span><br><span class="line">#PEERROUTES=&quot;yes&quot;</span><br><span class="line">#IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">#IPV6INIT=&quot;yes&quot;</span><br><span class="line">#IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">#IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">#IPV6_PEERDNS=&quot;yes&quot;</span><br><span class="line">#IPV6_PEERROUTES=&quot;yes&quot;</span><br><span class="line">#IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">#NAME=&quot;eno16777736&quot;</span><br><span class="line">#UUID=&quot;f3f3b4f8-02ad-44f4-83f7-3639f4df3bff&quot;</span><br><span class="line">#DEVICE=&quot;eno16777736&quot;</span><br><span class="line">#ONBOOT=&quot;yes&quot;</span><br><span class="line">#IPADDR=192.168.1.226</span><br><span class="line">#NETMASK=255.255.255.0</span><br><span class="line">#GATEWAY=192.168.1.200</span><br><span class="line">#PEERDNS=&quot;yes&quot;</span><br><span class="line">#DNS1=8.8.8.8</span><br><span class="line">NAME=&quot;eno16777736&quot;</span><br><span class="line">UUID=&quot;f3f3b4f8-02ad-44f4-83f7-3639f4df3bff&quot;</span><br><span class="line">DEVICE=&quot;eno16777736&quot;</span><br><span class="line">BRIDGE=&quot;br0&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br></pre></td></tr></table></figure><h2 id="重启网络服务"><a href="#重启网络服务" class="headerlink" title="重启网络服务"></a>重启网络服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# systemctl restart network</span><br><span class="line">[root@object1 ~]# brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">br08000.000c29e16c76noeno16777736</span><br><span class="line">virbr08000.000000000000yes</span><br></pre></td></tr></table></figure><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><p>//下载cirros linux，下载地址：<a href="http://download.cirros-cloud.net/" target="_blank" rel="noopener">http://download.cirros-cloud.net/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# virt-install -n test001 -r 2048 --disk /home/test.img,format=qcow2,size=1 --network bridge=br0 --os-type=linux --os-variant=rhel7.2 --cdrom /root/cirros-0.3.5-x86_64-disk.img --vnc --vncport=5900 --vnclisten=0.0.0.0</span><br></pre></td></tr></table></figure></p><h2 id="使用VNC-Viewer连接该虚拟机"><a href="#使用VNC-Viewer连接该虚拟机" class="headerlink" title="使用VNC Viewer连接该虚拟机"></a>使用VNC Viewer连接该虚拟机</h2><p>官网下载：<a href="https://www.realvnc.com/download/vnc/" target="_blank" rel="noopener">https://www.realvnc.com/download/vnc/</a></p><p>//通过图形界面操作</p><h2 id="安装X-X-Window-System"><a href="#安装X-X-Window-System" class="headerlink" title="安装X(X Window System)"></a>安装X(X Window System)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# yum groupinstall &quot;X Window System&quot; -y</span><br></pre></td></tr></table></figure><h2 id="安装GNOME-GNOME-Desktop"><a href="#安装GNOME-GNOME-Desktop" class="headerlink" title="安装GNOME(GNOME Desktop)"></a>安装GNOME(GNOME Desktop)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# yum groupinstall &quot;GNOME Desktop&quot; -y</span><br></pre></td></tr></table></figure><h2 id="使用virt-manager管理kvm"><a href="#使用virt-manager管理kvm" class="headerlink" title="使用virt-manager管理kvm"></a>使用virt-manager管理kvm</h2><p>//本地需要安装xmanager和xshell工具 ，并使用xshell建立连接时勾选x11转移。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# virt-manager</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>搭建FastDFS分布式文件系统</title>
      <link href="/2017/05/03/deploy-FastDFS.html"/>
      <url>/2017/05/03/deploy-FastDFS.html</url>
      <content type="html"><![CDATA[<h2 id="FastDFS介绍"><a href="#FastDFS介绍" class="headerlink" title="FastDFS介绍"></a>FastDFS介绍</h2><p>FastDFS是一款类Google FS的开源分布式文件系统，它用纯C语言实现，支持Linux、FreeBSD、AIX等UNIX系统。它只能通过专有API对文件进行存取访问，不支持POSIX接口方式，不能mount使用。准确地讲，Google FS以及FastDFS、mogileFS、HDFS、TFS等类Google FS都不是系统级的分布式文件系统，而是应用级的分布式文件存储服务。<br><a id="more"></a><br>FastDFS是一个开源的，高性能的的分布式文件系统，他主要的功能包括：文件存储，同步和访问，设计基于高可用和负载均衡，fastfd非常适用于基于文件服务的站点，例如图片分享和视频分享网站。<br>FastDFS有两个角色：跟踪服务和存储服务，跟踪服务控制，调度文件以负载均衡的方式访问；存储服务包括：文件存储，文件同步，提供文件访问接口，同时以key value的方式管理文件的元数据。<br>跟踪和存储服务可以由1台或者多台服务器组成，同时可以动态的添加，删除跟踪和存储服务而不会对在线的服务产生影响，在集群中，tracker服务是对等的。<br>存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。</p><h2 id="FastDFS架构"><a href="#FastDFS架构" class="headerlink" title="FastDFS架构"></a>FastDFS架构</h2><p><img src="http://imglf1.nosdn.127.net/img/R3hDdlA4YitONFpPSXdaUEVIeXNxd20wOGd2UFBkR0NIRGkwTzN3RjlOcklzS3NzTzlFY0pRPT0.gif" alt=""><br>客户端和Storage server主动连接Tracker server。Storage server主动向Tracker server报告其状态信息，包括磁盘剩余空间、文件同步状况、文件上传下载次数等统计信息。Storage server会连接集群中所有的Tracker server，向他们报告自己的状态。Storage server启动一个单独的线程来完成对一台Tracker server的连接和定时报告。需要说明的是，一个组包含的Storage server不是通过配置文件设定的，而是通过Tracker server获取到的。<br>不同组的Storage server之间不会相互通信，同组内的Storage server之间会相互连接进行文件同步。<br>Storage server采用binlog文件记录文件上传、删除等更新操作。binlog中只记录文件名，不记录文件内容。<br>文件同步只在同组内的Storage server之间进行，采用push方式，即源头服务器同步给目标服务器。只有源头数据才需要同步，备份数据并不需要再次同步，否则就构成环路了。有个例外，就是新增加一台Storage server时，由已有的一台Storage server将已有的所有数据（包括源头数据和备份数据）同步给该新增服务器。<br>Storage server中由专门的线程根据binlog进行文件同步。为了最大程度地避免相互影响以及出于系统简洁性考虑，Storage server对组内除自己以外的每台服务器都会启动一个线程来进行文件同步。<br>文件同步采用增量同步方式，系统记录已同步的位置（binlog文件偏移量）到标识文件中。标识文件名格式：{dest storage IP}_{port}.mark，例如：192.168.1.14_23000.mark。</p><h2 id="FastDFS文件上传下载交互过程"><a href="#FastDFS文件上传下载交互过程" class="headerlink" title="FastDFS文件上传下载交互过程"></a>FastDFS文件上传下载交互过程</h2><p><img src="http://imglf.nosdn.127.net/img/R3hDdlA4YitONFpPSXdaUEVIeXNxNjRjV2FWQjZZMHovREprSGx6ZnBNSmFoUXp3WDdVZ0p3PT0.gif" alt=""></p><h3 id="文件下载流程"><a href="#文件下载流程" class="headerlink" title="文件下载流程"></a>文件下载流程</h3><ol><li>Client询问Tracker server可以下载指定文件的Storage server，参数为文件ID（包含组名和文件名）；</li><li>Tracker server返回一台可用的Storage server；</li><li>Client直接和该Storage server建立连接，完成文件下载。<br><img src="http://imglf2.nosdn.127.net/img/R3hDdlA4YitONFpPSXdaUEVIeXNxekFWSXFDQW5HOHFTUklySk5adlNHbVJZRDVMMEpkMDBnPT0.gif" alt=""><h3 id="文件上传流程"><a href="#文件上传流程" class="headerlink" title="文件上传流程"></a>文件上传流程</h3></li><li>Client询问Tracker server上传到的Storage server；</li><li>Tracker server返回一台可用的Storage server，返回的数据为该Storage server的IP地址和端口；</li><li>Client直接和该Storage server建立连接，进行文件上传，Storage server返回新生成的文件ID，文件上传结束。</li></ol><h2 id="FastDFS安装"><a href="#FastDFS安装" class="headerlink" title="FastDFS安装"></a>FastDFS安装</h2><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure><h3 id="下载并安装FastDFS依赖包libfastcommon"><a href="#下载并安装FastDFS依赖包libfastcommon" class="headerlink" title="下载并安装FastDFS依赖包libfastcommon"></a>下载并安装FastDFS依赖包libfastcommon</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# wget https://codeload.github.com/happyfish100/libfastcommon/zip/master</span><br><span class="line">[root@object1 ~]# unzip master</span><br><span class="line">[root@object1 ~]# cd libfastcommon-master/</span><br><span class="line">[root@object1 libfastcommon-master]# ./make.sh</span><br><span class="line">[root@object1 libfastcommon-master]# ./make.sh install</span><br></pre></td></tr></table></figure><h3 id="下载并安装FastDFS"><a href="#下载并安装FastDFS" class="headerlink" title="下载并安装FastDFS"></a>下载并安装FastDFS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# wget https://nchc.dl.sourceforge.net/project/fastdfs/FastDFS%20Server%20Source%20Code/FastDFS%20Server%20with%20PHP%20Extension%20Source%20Code%20V5.08/FastDFS_v5.08.tar.gz</span><br><span class="line">[root@object1 ~]# tar zxvf FastDFS_v5.08.tar.gz </span><br><span class="line">[root@object1 ~]# cd FastDFS</span><br><span class="line">[root@object1 FastDFS]# ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure><h3 id="默认脚本目录"><a href="#默认脚本目录" class="headerlink" title="默认脚本目录"></a>默认脚本目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# ll /etc/init.d/ | grep fdfs</span><br></pre></td></tr></table></figure><h3 id="样例配置文件"><a href="#样例配置文件" class="headerlink" title="样例配置文件"></a>样例配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# ll /etc/fdfs/</span><br></pre></td></tr></table></figure><p><strong>注意：虽然FastDFS区分tracker和storage服务器，但是安装的软件及步骤均相同，只是不同的配置文件而已，因此以上安装适用tracker server和storage server</strong></p><h3 id="配置跟踪服务器（tracker-server）"><a href="#配置跟踪服务器（tracker-server）" class="headerlink" title="配置跟踪服务器（tracker server）"></a>配置跟踪服务器（tracker server）</h3><h4 id="拷贝tracker-server和client端样例配置文件并重命名"><a href="#拷贝tracker-server和client端样例配置文件并重命名" class="headerlink" title="拷贝tracker server和client端样例配置文件并重命名"></a>拷贝tracker server和client端样例配置文件并重命名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</span><br><span class="line">[root@object1 ~]# cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf</span><br></pre></td></tr></table></figure><h4 id="修改client-conf"><a href="#修改client-conf" class="headerlink" title="修改client.conf"></a>修改client.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第14行</span><br><span class="line"> tracker_server=192.168.1.226:22122</span><br></pre></td></tr></table></figure><h4 id="启动tracker-server"><a href="#启动tracker-server" class="headerlink" title="启动tracker server"></a>启动tracker server</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# /etc/init.d/fdfs_trackerd start</span><br><span class="line">[root@object1 ~]# ss -tunlp | grep 22122</span><br></pre></td></tr></table></figure><h3 id="配置存储服务器（storage-server）"><a href="#配置存储服务器（storage-server）" class="headerlink" title="配置存储服务器（storage server）"></a>配置存储服务器（storage server）</h3><h4 id="拷贝storage-server样例配置文件并重命名"><a href="#拷贝storage-server样例配置文件并重命名" class="headerlink" title="拷贝storage server样例配置文件并重命名"></a>拷贝storage server样例配置文件并重命名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><h4 id="修改storage-conf"><a href="#修改storage-conf" class="headerlink" title="修改storage.conf"></a>修改storage.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第118行</span><br><span class="line">tracker_server=192.168.1.226:22122</span><br></pre></td></tr></table></figure><h4 id="启动storage-server（启动storage-server的前提是tracker-server必须事先已启动）"><a href="#启动storage-server（启动storage-server的前提是tracker-server必须事先已启动）" class="headerlink" title="启动storage server（启动storage server的前提是tracker server必须事先已启动）"></a>启动storage server（启动storage server的前提是tracker server必须事先已启动）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# /etc/init.d/fdfs_storaged start</span><br><span class="line">[root@object1 ~]# ss -tunlp | grep 23000</span><br></pre></td></tr></table></figure><h3 id="文件上传测试"><a href="#文件上传测试" class="headerlink" title="文件上传测试"></a>文件上传测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# /usr/bin/fdfs_upload_file /etc/fdfs/client.conf /root/test.jpg </span><br><span class="line">group1/M00/00/00/wKgB4lkJlSSADZazAAMuQxWPTP8989.jpg</span><br></pre></td></tr></table></figure><h2 id="存储服务器（storage-server）安装并配置nginx"><a href="#存储服务器（storage-server）安装并配置nginx" class="headerlink" title="存储服务器（storage server）安装并配置nginx"></a>存储服务器（storage server）安装并配置nginx</h2><h3 id="下载并安装fastdfs-nginx-module模块"><a href="#下载并安装fastdfs-nginx-module模块" class="headerlink" title="下载并安装fastdfs-nginx-module模块"></a>下载并安装fastdfs-nginx-module模块</h3><p>注：FastDFS通过Tracker服务器,将文件放在Storage服务器存储，但是同组存储服务器之间需要进入文件复制，有同步延迟的问题。假设Tracker服务器将文件上传到了192.168.1.226，上传成功后文件ID已经返回给客户端。此时FastDFS存储集群机制会将这个文件同步到同组存储192.168.1.227，在文件还没有复制完成的情况下，客户端如果用这个文件ID在192.168.1.227上取文件,就会出现文件无法访问的错误。而fastdfs-nginx-module可以重定向文件连接到源服务器取文件,避免客户端由于复制延迟导致的文件无法访问错误。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# wget http://nchc.dl.sourceforge.net/project/fastdfs/FastDFS%20Nginx%20Module%20Source%20Code/fastdfs-nginx-module_v1.16.tar.gz</span><br><span class="line">[root@object1 ~]# tar zxvf fastdfs-nginx-module_v1.16.tar.gz </span><br><span class="line">[root@object1 ~]# cd fastdfs-nginx-module/src/</span><br><span class="line">[root@object1 src]# vim config </span><br><span class="line">编辑config文件，执行如下命令进行批量替换并保存退出</span><br><span class="line">:%s+/usr/local/+/usr/+g</span><br><span class="line">[root@object1 src]# cp mod_fastdfs.conf /etc/fdfs/</span><br><span class="line">修改mod_fastdfs.conf</span><br><span class="line">第40行</span><br><span class="line">tracker_server=192.168.1.226:22122</span><br></pre></td></tr></table></figure><h3 id="安装nginx依赖库"><a href="#安装nginx依赖库" class="headerlink" title="安装nginx依赖库"></a>安装nginx依赖库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# yum install -y pcre-devel zlib-devel nginx</span><br></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# wget http://nginx.org/download/nginx-1.13.0.tar.gz</span><br><span class="line">[root@object1 ~]# tar zxvf nginx-1.13.0.tar.gz</span><br><span class="line">[root@object1 ~]# cd nginx-1.13.0</span><br><span class="line">[root@object1 nginx-1.13.0]# ./configure --prefix=/usr/local/nginx --add-module=/root/fastdfs-nginx-module/src/</span><br><span class="line">[root@object1 nginx-1.13.0]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h3 id="拷贝FastDFS中的部分配置文件到-etc-fdfs目录中"><a href="#拷贝FastDFS中的部分配置文件到-etc-fdfs目录中" class="headerlink" title="拷贝FastDFS中的部分配置文件到/etc/fdfs目录中"></a>拷贝FastDFS中的部分配置文件到/etc/fdfs目录中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 nginx-1.13.0]# cp /root/FastDFS/conf/http.conf /etc/fdfs/</span><br><span class="line">[root@object1 nginx-1.13.0]# cp /root/FastDFS/conf/mime.types /etc/fdfs/</span><br></pre></td></tr></table></figure><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">修改1行</span><br><span class="line">user root;  #解决下载操作时报404的问题</span><br><span class="line">修改36行</span><br><span class="line">listen       8888;  #storage.conf配置文件一致</span><br><span class="line">添加</span><br><span class="line">location ~/group[0-9]/ &#123;</span><br><span class="line">                ngx_fastdfs_module;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h3 id="拷贝nginx服务到-etc-init-d-目录下并启动"><a href="#拷贝nginx服务到-etc-init-d-目录下并启动" class="headerlink" title="拷贝nginx服务到/etc/init.d/目录下并启动"></a>拷贝nginx服务到/etc/init.d/目录下并启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# cp /usr/local/nginx/sbin/nginx /etc/init.d/</span><br><span class="line">[root@object1 ~]# /etc/init.d/nginx</span><br><span class="line">[root@object1 ~]# ss -tunlp | grep 8888</span><br></pre></td></tr></table></figure><h3 id="通过浏览器访问之前已经上传的文件"><a href="#通过浏览器访问之前已经上传的文件" class="headerlink" title="通过浏览器访问之前已经上传的文件"></a>通过浏览器访问之前已经上传的文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.226:8888/group1/M00/00/00/wKgB4lkJlSSADZazAAMuQxWPTP8989.jpg</span><br><span class="line">访问出现400 Bad Request</span><br><span class="line">查看日志</span><br><span class="line">[root@object1 ~]# vim /usr/local/nginx/logs/error.log </span><br><span class="line"></span><br><span class="line">报错信息</span><br><span class="line">[2017-05-03 17:00:38] ERROR - file: ../common/fdfs_global.c, line: 52, the format of filename &quot;group1/M00/00/00/wKgB4lkJlSSADZazAAMuQxWPTP8989.jpg&quot; is invalid</span><br><span class="line"></span><br><span class="line">解决方法：</span><br><span class="line">[root@object1 ~]# vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line">修改53行</span><br><span class="line">url_have_group_name = true</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> FastDFS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录MongoDB3.4分片的一些配置</title>
      <link href="/2017/05/03/record-MongoDB3.4-shard-some-config.html"/>
      <url>/2017/05/03/record-MongoDB3.4-shard-some-config.html</url>
      <content type="html"><![CDATA[<h2 id="MongoDB介绍"><a href="#MongoDB介绍" class="headerlink" title="MongoDB介绍"></a>MongoDB介绍</h2><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。在高负载的情况下，添加更多的节点，可以保证服务器性能。MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。<br><a id="more"></a></p><h2 id="MongoDB特点"><a href="#MongoDB特点" class="headerlink" title="MongoDB特点"></a>MongoDB特点</h2><ul><li>MongoDB的提供了一个面向文档存储，操作起来比较简单和容易。</li><li>你可以在MongoDB记录中设置任何属性的索引 (如：FirstName=”Ning”,Address=”Beijing”)来实现更快的排序。</li><li>你可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li><li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li><li>Mongo支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li><li>MongoDb 使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li><li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。</li><li>Map和Reduce。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。</li><li>Map函数和Reduce函数是使用Javascript编写的，并可以通过db.runCommand或mapreduce命令来执行MapReduce操作。</li><li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li><li>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li><li>MongoDB支持各种编程语言:RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li></ul><h2 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h2><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><p>官网：<a href="https://docs.mongodb.com/master/tutorial/install-mongodb-on-red-hat/" target="_blank" rel="noopener">https://docs.mongodb.com/master/tutorial/install-mongodb-on-red-hat/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# vim /etc/yum.repos.d/mongodb-org-3.4.repo</span><br><span class="line">[mongodb-org-3.4]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</span><br><span class="line"></span><br><span class="line">[root@object1 ~]#sudo yum install -y mongodb-org</span><br></pre></td></tr></table></figure><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>官网：<a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center?jmp=nav#community</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]#curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.4.4.tgz</span><br><span class="line">[root@object1 ~]#tar -zxvf mongodb-linux-x86_64-rhel70-3.4.4.tgz </span><br><span class="line">[root@object1 ~]# mv mongodb-linux-x86_64-rhel70-3.4.4 /usr/local/mongodb</span><br><span class="line"></span><br><span class="line">#把安装目录添加到系统环境中</span><br><span class="line">export PATH=/usr/local/mongodb/bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>官网：<a href="https://docs.mongodb.com/manual/administration/configuration/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/administration/configuration/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#使用YAML配置也可以使用原ini配置</span><br><span class="line">#基本设置</span><br><span class="line">processManagement:</span><br><span class="line">   fork: true</span><br><span class="line">   pidFilePath: /home/mongodb/mongodb.pid</span><br><span class="line">storage:</span><br><span class="line">   dbPath: /home/mongodb/data</span><br><span class="line">systemLog:</span><br><span class="line">   destination: file</span><br><span class="line">   path: &quot;/home/mongodb/log/mongod.log&quot;</span><br><span class="line">   logAppend: true</span><br><span class="line">storage:</span><br><span class="line">   journal:</span><br><span class="line">      enabled: true</span><br><span class="line"></span><br><span class="line">#安全</span><br><span class="line">security:</span><br><span class="line">   authorization: enabled</span><br><span class="line">net:</span><br><span class="line">   bindIp: 192.168.1.226</span><br><span class="line">   port: 27017</span><br><span class="line"></span><br><span class="line">#副本集</span><br><span class="line">replication:</span><br><span class="line">   replSetName: set0</span><br><span class="line">#副本集安全</span><br><span class="line">security:</span><br><span class="line">   keyFile: /home/mongodb/keyfile</span><br></pre></td></tr></table></figure><p><strong>分片配置</strong><br>分片服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">processManagement:</span><br><span class="line">   fork: true</span><br><span class="line">   pidFilePath: /home/mongodb/mongodb.pid</span><br><span class="line">storage:</span><br><span class="line">   dbPath: /home/mongodb/data</span><br><span class="line">systemLog:</span><br><span class="line">   destination: file</span><br><span class="line">   path: &quot;/home/mongodb/log/mongod.log&quot;</span><br><span class="line">   logAppend: true</span><br><span class="line">storage:</span><br><span class="line">   journal:</span><br><span class="line">      enabled: true</span><br><span class="line">net:</span><br><span class="line">   bindIp: 192.168.1.226</span><br><span class="line">   port: 27017</span><br><span class="line">sharding:</span><br><span class="line">   clusterRole: shardsvr</span><br><span class="line">replication:</span><br><span class="line">   replSetName: shardA</span><br></pre></td></tr></table></figure><p>配置服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">processManagement:</span><br><span class="line">   fork: true</span><br><span class="line">   pidFilePath: /home/mongodb/mongodb.pid</span><br><span class="line">storage:</span><br><span class="line">   dbPath: /home/mongodb/data</span><br><span class="line">systemLog:</span><br><span class="line">   destination: file</span><br><span class="line">   path: &quot;/home/mongodb/log/mongod.log&quot;</span><br><span class="line">   logAppend: true</span><br><span class="line">storage:</span><br><span class="line">   journal:</span><br><span class="line">      enabled: true</span><br><span class="line">sharding:</span><br><span class="line">    clusterRole: configsvr</span><br><span class="line">net:</span><br><span class="line">    bindIp: 192.168.1.226</span><br><span class="line">    port: 27001</span><br><span class="line">replication:</span><br><span class="line">    replSetName: csRS</span><br></pre></td></tr></table></figure><p>路由服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">processManagement:</span><br><span class="line">   fork: true</span><br><span class="line">   pidFilePath: /home/mongodb/mongos.pid</span><br><span class="line">#storage:</span><br><span class="line">#   dbPath: /home/mongodb/data</span><br><span class="line">systemLog:</span><br><span class="line">   destination: file</span><br><span class="line">   path: &quot;/home/mongodb/log/mongos.log&quot;</span><br><span class="line">   logAppend: true</span><br><span class="line">#storage:</span><br><span class="line">#   journal:</span><br><span class="line">#      enabled: true</span><br><span class="line">net:</span><br><span class="line">    bindIp: 192.168.1.226</span><br><span class="line">    port: 28001</span><br><span class="line">sharding:</span><br><span class="line">   configDB: csRS/192.168.1.226:27001,192.168.1.226:27002,192.168.1.226:27003</span><br></pre></td></tr></table></figure><h3 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# /usr/local/mongodb/bin/mongod -f 分片服务器配置文件</span><br><span class="line">[root@object1 ~]# /usr/local/mongodb/bin/mongod -f 配置服务器配置文件</span><br><span class="line">[root@object1 ~]# /usr/local/mongodb/bin/mongos -f 路由服务器配置文件</span><br></pre></td></tr></table></figure><h3 id="初始化mongodb"><a href="#初始化mongodb" class="headerlink" title="初始化mongodb"></a>初始化mongodb</h3><p>分片服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# /usr/local/mongodb/bin/mongo --port 27017</span><br><span class="line">&gt;use admin</span><br><span class="line">&gt;config = &#123;_id:&quot;shardA&quot;,members:[</span><br><span class="line">&#123;_id:0, host:&quot;192.168.1.226:27017&quot;&#125;,</span><br><span class="line">&#123;_id:1, host:&quot;192.168.1.226:27018&quot;&#125;,</span><br><span class="line">&#123;_id:2, host:&quot;192.168.1.226:27019&quot;&#125;</span><br><span class="line">]&#125;</span><br><span class="line">&gt;rs.initiate(config)</span><br></pre></td></tr></table></figure><p>配置服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# /usr/local/mongodb/bin/mongo --port 27001</span><br><span class="line">&gt;use admin</span><br><span class="line">&gt;config = &#123;_id:&quot;csRS&quot;,configsvr:true,members:[</span><br><span class="line">&#123;_id:0, host:&quot;192.168.1.226:27001&quot;&#125;,</span><br><span class="line">&#123;_id:1, host:&quot;192.168.1.226:27002&quot;&#125;,</span><br><span class="line">&#123;_id:2, host:&quot;192.168.1.226:27003&quot;&#125;</span><br><span class="line">]&#125;</span><br><span class="line">&gt;rs.initiate(config)</span><br></pre></td></tr></table></figure></p><h3 id="启动分片"><a href="#启动分片" class="headerlink" title="启动分片"></a>启动分片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 mongodb]# mongo --port 28001</span><br><span class="line">mongos&gt; use admin</span><br><span class="line">mongos&gt; db.runCommand( &#123; addShard: &quot;shardA/192.168.1.226:27017,192.168.1.226:27018,192.168.1.226:27019&quot;&#125; )</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7 LDAP统一认证部署</title>
      <link href="/2017/05/02/CentOS7-LDAP-deployment.html"/>
      <url>/2017/05/02/CentOS7-LDAP-deployment.html</url>
      <content type="html"><![CDATA[<h2 id="LDAP介绍"><a href="#LDAP介绍" class="headerlink" title="LDAP介绍"></a>LDAP介绍</h2><p>LDAP是轻量目录访问协议，英文全称是Lightweight Directory Access Protocol，简称为LDAP。它是基于X.500标准的，但是简单多了并且可以根据需要定制。与X.500不同，LDAP支持TCP/IP。LDAP的核心规范在RFC中都有定义，所有与LDAP相关的RFC都可以在LDAPman RFC网页中找到。<br><a id="more"></a></p><h2 id="使用目的"><a href="#使用目的" class="headerlink" title="使用目的"></a>使用目的</h2><p>使用LDAP对运维相关用户名密码做统一管理。可以实现一个帐号登录多个不同系统。</p><h2 id="LDAP部署"><a href="#LDAP部署" class="headerlink" title="LDAP部署"></a>LDAP部署</h2><h3 id="LDAP-Server端安装"><a href="#LDAP-Server端安装" class="headerlink" title="LDAP Server端安装"></a>LDAP Server端安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# yum install -y openldap openldap-clients openldap-servers migrationtools</span><br></pre></td></tr></table></figure><h3 id="LDAP-配置"><a href="#LDAP-配置" class="headerlink" title="LDAP 配置"></a>LDAP 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">#配置 OpenLDAP Server</span><br><span class="line">[root@object1 ~]# vim /etc/openldap/slapd.d/cn\=config/olcDatabase\=\&#123;2\&#125;hdb.ldif </span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb</span><br><span class="line"></span><br><span class="line">修改两行</span><br><span class="line">olcSuffix: dc=hyman,dc=com</span><br><span class="line">olcRootDN: cn=Manager,dc=hyman,dc=com</span><br><span class="line">新增一行</span><br><span class="line">olcRootPW: 123456</span><br><span class="line"></span><br><span class="line">#配置 Monitoring Database</span><br><span class="line">[root@object1 ~]# vim /etc/openldap/slapd.d/cn\=config/olcDatabase\=\&#123;1\&#125;monitor.ldif</span><br><span class="line">dn: olcDatabase=&#123;1&#125;monitor</span><br><span class="line"></span><br><span class="line">修改一行</span><br><span class="line">olcAccess: &#123;0&#125;to * by dn.base=&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=extern</span><br><span class="line"> al,cn=auth&quot; read by dn.base=&quot;cn=Manager,dc=hyman,dc=com&quot; read by * none</span><br><span class="line"></span><br><span class="line">#初始化 LDAP database</span><br><span class="line">[root@object1 ~]# cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG</span><br><span class="line">[root@object1 ~]# chown -R ldap.ldap /var/lib/ldap/</span><br><span class="line"></span><br><span class="line">#测试 configuration</span><br><span class="line">[root@object1 ~]# slaptest -u</span><br><span class="line"></span><br><span class="line">#启动服务并开机自启</span><br><span class="line">[root@object1 ~]# systemctl start slapd</span><br><span class="line">[root@object1 ~]# systemctl enable slapd</span><br><span class="line"></span><br><span class="line">#查看状态</span><br><span class="line">[root@object1 ~]# netstat -lt | grep ldap</span><br><span class="line"></span><br><span class="line">#将所有的配置LDAP server, 添加到LDAP schemas中</span><br><span class="line">[root@object1 ~]# cd /etc/openldap/schema/</span><br><span class="line"> ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f cosine.ldif</span><br><span class="line">[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f nis.ldif</span><br><span class="line">[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f collective.ldif</span><br><span class="line">[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f corba.ldif</span><br><span class="line">[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f core.ldif</span><br><span class="line">[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f duaconf.ldif</span><br><span class="line">[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f dyngroup.ldif</span><br><span class="line">[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f inetorgperson.ldif</span><br><span class="line">[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f java.ldif</span><br><span class="line">[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f ppolicy.ldif</span><br><span class="line">[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f pmi.ldif</span><br><span class="line">[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f openldap.ldif</span><br><span class="line">[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f misc.ldif</span><br><span class="line"></span><br><span class="line">#使用Migration Tools 创建 LDAP DIT</span><br><span class="line">[root@object1 schema]# cd /usr/share/migrationtools/</span><br><span class="line">[root@object1 migrationtools]# vim migrate_common.ph</span><br><span class="line">修改61行</span><br><span class="line">$NAMINGCONTEXT&#123;&apos;group&apos;&#125;             = &quot;ou=Groups&quot;;</span><br><span class="line">修改71行</span><br><span class="line">$DEFAULT_MAIL_DOMAIN = &quot;hyman.com&quot;;</span><br><span class="line">修改74行</span><br><span class="line">$DEFAULT_BASE = &quot;dc=hyman,dc=com&quot;;</span><br><span class="line">修改90行</span><br><span class="line">$EXTENDED_SCHEMA = 1;</span><br><span class="line"></span><br><span class="line">#创建 base.ldif</span><br><span class="line">[root@object1 migrationtools]# ./migrate_base.pl &gt; /root/base.ldif</span><br><span class="line"></span><br><span class="line">#导入LDAP database</span><br><span class="line">[root@object1 migrationtools]# ldapadd -x -W -D &quot;cn=Manager,dc=hyman,dc=com&quot; -f /root/base.ldif</span><br><span class="line"></span><br><span class="line">#创建用户和用户组，并将其从本地数据库迁移到LDAP数据库</span><br><span class="line">[root@object1 migrationtools]# mkdir /home/guests</span><br><span class="line">[root@object1 migrationtools]# useradd -d /home/guests/ldapuser1 ldapuser1</span><br><span class="line">[root@object1 migrationtools]# useradd -d /home/guests/ldapuser2 ldapuser2</span><br><span class="line">[root@object1 migrationtools]# echo &quot;password&quot; | passwd --stdin ldapuser1</span><br><span class="line">[root@object1 migrationtools]# echo &quot;password&quot; | passwd --stdin ldapuser2</span><br><span class="line"></span><br><span class="line">#过滤掉这些用户和组和密码从/etc/shadow到不同的文件</span><br><span class="line">[root@object1 ~]# getent passwd | tail -n 5 &gt; /root/users</span><br><span class="line">[root@object1 ~]# getent shadow | tail -n 5 &gt; /root/shadow</span><br><span class="line">[root@object1 ~]# getent group | tail -n 5 &gt; /root/groups</span><br><span class="line"></span><br><span class="line">#创建这些用户使用migrationtools</span><br><span class="line">[root@object1 ~]# cd /usr/share/migrationtools/</span><br><span class="line">[root@object1 migrationtools]# vim migrate_passwd.pl </span><br><span class="line">修改188行</span><br><span class="line">把 /etc/shadow 替换为 /root/shadow</span><br><span class="line"></span><br><span class="line">[root@object1 migrationtools]# ./migrate_passwd.pl /root/users &gt; users.ldif</span><br><span class="line">[root@object1 migrationtools]# ./migrate_passwd.pl /root/groups &gt; groups.ldif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#上传这些用户和组LDAP数据库</span><br><span class="line">[root@object1 ~]# ldapadd -x -W -D &quot;cn=Manager,dc=hyman,dc=com&quot; -f users.ldif</span><br><span class="line">[root@object1 ~]# ldapadd -x -W -D &quot;cn=Manager,dc=hyman,dc=com&quot; -f groups.ldif</span><br><span class="line"></span><br><span class="line">#所有记录搜索LDAP DIT</span><br><span class="line">[root@object1 ~]# ldapsearch -x -b &quot;dc=hyman,dc=com&quot; -H ldap://127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="LDAP-客户端验证"><a href="#LDAP-客户端验证" class="headerlink" title="LDAP 客户端验证"></a>LDAP 客户端验证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@block1 ~]# yum install -y nss-pam*</span><br><span class="line">[root@block1 ~]# authconfig-tui </span><br><span class="line">选择第二个Use LDAP</span><br><span class="line">[root@block1 ~]# su ldaduser1</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> LDAP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS 7通过yum安装ansible</title>
      <link href="/2017/04/27/CentOS7-install-ansible.html"/>
      <url>/2017/04/27/CentOS7-install-ansible.html</url>
      <content type="html"><![CDATA[<h1 id="一、ansible介绍"><a href="#一、ansible介绍" class="headerlink" title="一、ansible介绍"></a>一、ansible介绍</h1><h2 id="1、ansible-简介"><a href="#1、ansible-简介" class="headerlink" title="1、ansible 简介"></a>1、ansible 简介</h2><p>Ansible官方的 title 是“Ansible is Simple IT Automation”——简单的自动化IT工具。Ansible是一款为类Unix系统开发的自由开源的配置和自动化工具。它用Python写成，类似于Chef和Puppet，但是有一个不同的优点是我们不需要在节点中安装任何客户端。它使用SSH来和节点进行通信。<br><a id="more"></a></p><h2 id="2、ansible-特点"><a href="#2、ansible-特点" class="headerlink" title="2、ansible 特点"></a>2、ansible 特点</h2><p>（1） No agents：不需要在被管控主机上安装任意客户端；<br>（2） No server：无服务器端，使用时直接运行命令即可；<br>（3） Modules in any languages：基于模块工作，可使用任意语言开发模块<br>（4） YAML，not code：使用yaml语言定制剧本playbook；<br>（5） SSH by default：基于SSH工作；<br>（6） Strong multi-tier solution：可实现多级指挥；</p><h1 id="二、Ansible安装使用"><a href="#二、Ansible安装使用" class="headerlink" title="二、Ansible安装使用"></a>二、Ansible安装使用</h1><h2 id="1、-设置EPEL仓库"><a href="#1、-设置EPEL仓库" class="headerlink" title="1、 设置EPEL仓库"></a>1、 设置EPEL仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# rpm -iUvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-9.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="2、使用yum安装Ansible"><a href="#2、使用yum安装Ansible" class="headerlink" title="2、使用yum安装Ansible"></a>2、使用yum安装Ansible</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# yum install -y ansible</span><br></pre></td></tr></table></figure><h2 id="3、设置用于节点鉴权的SSH密钥"><a href="#3、设置用于节点鉴权的SSH密钥" class="headerlink" title="3、设置用于节点鉴权的SSH密钥"></a>3、设置用于节点鉴权的SSH密钥</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#在Ansible服务端生成密钥</span><br><span class="line">[root@object1 ~]# ssh-keygen </span><br><span class="line">#使用ssh-copy-id命令来复制Ansible公钥到节点中</span><br><span class="line">[root@object1 ~]# ssh-copy-id -i root@192.168.1.215</span><br></pre></td></tr></table></figure><h2 id="4、为Ansible定义节点的清单"><a href="#4、为Ansible定义节点的清单" class="headerlink" title="4、为Ansible定义节点的清单"></a>4、为Ansible定义节点的清单</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 ~]# cat /etc/ansible/hosts</span><br><span class="line">[test]</span><br><span class="line">192.168.1.226</span><br><span class="line">192.168.1.215</span><br></pre></td></tr></table></figure><h2 id="5、尝试在Ansible服务端运行命令"><a href="#5、尝试在Ansible服务端运行命令" class="headerlink" title="5、尝试在Ansible服务端运行命令"></a>5、尝试在Ansible服务端运行命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#使用ping检查ansible节点的连通性</span><br><span class="line">[root@object1 ~]# ansible -m ping &apos;test&apos;</span><br><span class="line">192.168.1.226 | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n&quot;, </span><br><span class="line">    &quot;unreachable&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">192.168.1.215 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#检查Ansible节点的运行时间（uptime）</span><br><span class="line">[root@object1 ~]# ansible -m command -a &quot;uptime&quot; &quot;test&quot;</span><br><span class="line">192.168.1.226 | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n&quot;, </span><br><span class="line">    &quot;unreachable&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">192.168.1.215 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line"> 07:11:16 up 42 days, 13:43,  1 user,  load average: 0.00, 0.00, 0.00</span><br><span class="line"></span><br><span class="line">#检查节点的内核版本</span><br><span class="line">[root@object1 ~]# ansible -m command -a &quot;uname -r&quot; &quot;test&quot;</span><br><span class="line">192.168.1.226 | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false, </span><br><span class="line">    &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n&quot;, </span><br><span class="line">    &quot;unreachable&quot;: true</span><br><span class="line">&#125;</span><br><span class="line">192.168.1.215 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">2.6.32-573.3.1.el6.x86_64</span><br><span class="line"></span><br><span class="line">#给节点增加用户</span><br><span class="line">[root@object1 ~]# ansible -m command -a &quot;useradd test&quot; &quot;test&quot;</span><br><span class="line">192.168.1.226 | SUCCESS | rc=0 &gt;&gt;</span><br><span class="line">192.168.1.215 | SUCCESS | rc=0 &gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="6、模块的使用"><a href="#6、模块的使用" class="headerlink" title="6、模块的使用"></a>6、模块的使用</h2><p>查看各模块的使用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ansible-doc [options] [modules]  ：Show Ansible module documentation </span><br><span class="line">-l 列出所有的ansible模块 </span><br><span class="line">-s 列出该模块的相关指令</span><br><span class="line">可以直接使用 ansible-doc 模块名 来查看模块的使用，如</span><br><span class="line"># ansible-doc htpasswd</span><br></pre></td></tr></table></figure></p><h1 id="三、playbook的使用"><a href="#三、playbook的使用" class="headerlink" title="三、playbook的使用"></a>三、playbook的使用</h1><p>YAML Ain’t Markup Language，即YAML不是XML。不过，在开发的这种语言时，YAML的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。</p><p>YAML的语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。其结构（Structure）通过空格来展示，序列（Sequence）里的项用”-“来代表，Map里的键值对用”:”分隔。</p><h2 id="1、playbook使用"><a href="#1、playbook使用" class="headerlink" title="1、playbook使用"></a>1、playbook使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook test.yaml</span><br></pre></td></tr></table></figure><p>下面就是一个只包含了一个play的playbook，在写playbook的时候，一定要记住在 hosts，yum（模块儿名）等后带空格，否则会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#这个是你选择的主机</span><br><span class="line">- hosts: webservers</span><br><span class="line">#这个是变量</span><br><span class="line">  vars:</span><br><span class="line">    http_port: 80</span><br><span class="line">    max_clients: 200</span><br><span class="line">#远端的执行权限</span><br><span class="line">  remote_user: root  tasks:</span><br><span class="line">#利用yum模块来操作</span><br><span class="line">  - name: ensure apache is at the latest version</span><br><span class="line">    yum: pkg=httpd state=latest</span><br><span class="line">  - name: write the apache config file    </span><br><span class="line">    template: src=/srv/httpd.j2 dest=/etc/httpd.conf</span><br><span class="line"> #触发重启服务器</span><br><span class="line">    notify:</span><br><span class="line">    - restart apache</span><br><span class="line">  - name: ensure apache is running    </span><br><span class="line">    service: name=httpd state=started</span><br><span class="line"> #这里的restart apache 和上面的触发是配对的。这就是handlers的作用。相当于tag</span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart apache</span><br><span class="line">      service: name=httpd state=restarted</span><br></pre></td></tr></table></figure><h2 id="2、playbook案例"><a href="#2、playbook案例" class="headerlink" title="2、playbook案例"></a>2、playbook案例</h2><p>corosync.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">- hosts: hanodes      #指定要执行任务的主机，可由冒号分隔主机组</span><br><span class="line">  remote_user: root   #指定远程主机上执行任务的用户</span><br><span class="line">  vars:  #定义如下2个变量</span><br><span class="line">    crmsh: crmsh-1.2.6.4.el6.x86_64.rpm  </span><br><span class="line">    pssh: pssh-2.3.1-2.el6.x86_64.rpm</span><br><span class="line">  tasks:    #指定需执行的任务列表，每个task都有其name和使用的模块及参数</span><br><span class="line">    - name: test connection      </span><br><span class="line">      ping:        #ping模块无需执行参数</span><br><span class="line">      remote_user: jason  #在task中指定远程主机上执行任务的用户</span><br><span class="line">      sudo: yes   #使用sudo在远程主机上执行任务</span><br><span class="line">    - name: corosync installing      </span><br><span class="line">      yum: name=corosync state=present</span><br><span class="line">    - name: pacemaker installing          #定义一个软件安装任务</span><br><span class="line">      yum: name=pacemaker state=present   #使用yum安装，并配置需安装的软件名（name），及状态（state）</span><br><span class="line">    - name: crmsh rpm packages      </span><br><span class="line">      copy: src=/ansible/corosync/packages/&#123;&#123; crmsh &#125;&#125; dest=/tmp/&#123;&#123; crmsh &#125;&#125;</span><br><span class="line">    - name: pssh rpm packages      </span><br><span class="line">      copy: src=/ansible/corosync/packages/&#123;&#123; pssh &#125;&#125; dest=/tmp/&#123;&#123; pssh &#125;&#125;</span><br><span class="line">    - name: crmsh installing      </span><br><span class="line">      command: yum -y reinstall /tmp/&#123;&#123; crmsh &#125;&#125; /tmp/&#123;&#123; pssh &#125;&#125;</span><br><span class="line">    - name: authkey configure file      </span><br><span class="line">      copy: src=/ansible/corosync/conf/authkey dest=/etc/corosync/authkey</span><br><span class="line">    - name: authkey mode 400   #定义一个文件权限设置任务</span><br><span class="line">      file: path=/etc/corosync/authkey mode=400</span><br><span class="line">      notify:   #定义一个通知，当此任务执行时，可以激发响应的handler</span><br><span class="line">        - restart corosync</span><br><span class="line">    - name: corosync.conf configure file      </span><br><span class="line">      copy: src=/ansible/corosync/conf/corosync.conf dest=/etc/corosync/corosync.conf      </span><br><span class="line">      tags:</span><br><span class="line">        - conf      </span><br><span class="line">      notify:</span><br><span class="line">        - restart corosync</span><br><span class="line">    - name: ensure the corosync service startup on boot      </span><br><span class="line">      service: name=corosync state=started enabled=yes</span><br><span class="line">  handlers:   #定义当关注的资源发生变化时，需采取的操作</span><br><span class="line">    - name: restart corosync  #定义一个服务重启任务</span><br><span class="line">      service: name=corosync state=restarted</span><br></pre></td></tr></table></figure><p>heartbeat.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- hosts: hbhosts</span><br><span class="line">    remote_user: root    </span><br><span class="line">    tasks:</span><br><span class="line">        - name: ensure heartbeat latest version     </span><br><span class="line">         yum: name=heartbeat state=present</span><br><span class="line">        - name: authkeys configure file          </span><br><span class="line">         copy: src=/root/hb_conf/authkeys dest=/etc/ha.d/authkeys</span><br><span class="line">        - name: authkeys mode 600</span><br><span class="line">          file: path=/etc/ha.d/authkeys mode=600</span><br><span class="line">          notify:</span><br><span class="line">            - restart heartbeat</span><br><span class="line">        - name: ha.cf configure file          </span><br><span class="line">         copy: src=/root/hb_conf/ha.cf dest=/etc/ha.d/ha.cf          </span><br><span class="line">         notify:</span><br><span class="line">            - restart heartbeat    </span><br><span class="line">         handlers:</span><br><span class="line">        - name: restart heartbeat        </span><br><span class="line">            service: name=heartbeat state=restarted</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Zookeeper、Dubbo-Admin管理平台的搭建</title>
      <link href="/2017/04/26/Zookeeper-Dubbo-Admin-platform-deploy.html"/>
      <url>/2017/04/26/Zookeeper-Dubbo-Admin-platform-deploy.html</url>
      <content type="html"><![CDATA[<p> ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。</p><p>ZooKeeper官网为：<a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">http://zookeeper.apache.org/</a><br><a id="more"></a><br>Dubbo是Alibaba开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。关于注册中心、协议支持、服务监控等内容。</p><p>Dubbo官网为：<a href="http://dubbo.io/" target="_blank" rel="noopener">http://dubbo.io/</a></p><h2 id="一、zookeeper安装与启动"><a href="#一、zookeeper安装与启动" class="headerlink" title="一、zookeeper安装与启动"></a>一、zookeeper安装与启动</h2><p>首先需要安装JdK，从Oracle的Java网站下载，安装很简单，就不再详述。<br>zookeeper的下载地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.apache.org/dyn/closer.cgi/zookeeper/</span><br></pre></td></tr></table></figure><p>下载后直接解压，不用安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 home]# tar zxvf zookeeper-3.4.10.tar.gz</span><br></pre></td></tr></table></figure><p>修改默认配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 conf]# cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>参数说明:</p><p>tickTime：zookeeper中使用的基本时间单位, 毫秒值这个时间是作为Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。</p><p>dataDir：数据目录. 可以是任意目录，默认情况下，Zookeeper 将写数据</p><p>的日志文件也保存在这个目录里。</p><p>clientPort：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。</p><p>至此, zookeeper的单机模式已经配置好了，启动ZooKeeper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 zookeeper-3.4.10]# sh bin/zkServer.sh start</span><br></pre></td></tr></table></figure><h2 id="二、Dubbo-admin管理平台的安装"><a href="#二、Dubbo-admin管理平台的安装" class="headerlink" title="二、Dubbo-admin管理平台的安装"></a>二、Dubbo-admin管理平台的安装</h2><p>因为zookeeper只是一个黑框，我们无法看到是否存在了什么提供者或消费者，这时就要借助Dubbo-Admin管理平台来实时的查看，也可以通过这个平台来管理提者和消费者。制作了基于jdk1.8打包的dubbo-admin.war</p><p>下载地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://download.csdn.net/detail/qq_30567735/9826361</span><br></pre></td></tr></table></figure><p>dubbo源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/alibaba/dubbo</span><br></pre></td></tr></table></figure><p>下载好dubbo-admin.war后，我们就可以按常用的web部署方式进行部署即可，把war包放到tomcat的webapps目录下，启动tomcat，后再部署下相应的参数。</p><p>启动tomcat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 apache-tomcat-7.0.62]# sh bin/startup.sh</span><br></pre></td></tr></table></figure><p>访问项目地址即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http: //ip地址:端口号/dubbo-admin-2.5.4/</span><br></pre></td></tr></table></figure><p><img src="http://imglf2.nosdn.127.net/img/R3hDdlA4YitONFp2Wm5UbFJ2anArNHgxdEhiT0drYW5QU3FYM1R2cTNhbi9jaWFCcnYvbmtnPT0.jpg?imageView&amp;thumbnail=500x0&amp;quality=96&amp;stripmeta=0&amp;type=jpg" alt=""></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>MySQL自带压力测试工具mysqlslap的使用方法</title>
      <link href="/2017/04/26/MySQL%E8%87%AA%E5%B8%A6%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7mysqlslap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html"/>
      <url>/2017/04/26/MySQL%E8%87%AA%E5%B8%A6%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7mysqlslap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html</url>
      <content type="html"><![CDATA[<p>mysqlslap是从5.1.4版开始的一个MySQL官方提供的压力测试工具。通过模拟多个并发客户端访问MySQL来执行压力测试，并输出计时信息。并且能很好的对比多个存储引擎在相同环境下的并发压力性能差别。可以指定SQL语句。如果没有指定SQL语句，mysqlslap会自动生成查询schema的SELECT语句。<br><a id="more"></a><br>1、查看帮助信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 local]# mysqlslap --help</span><br><span class="line">mysqlslap  Ver 1.0 Distrib 5.7.18, for Linux (x86_64)</span><br><span class="line">Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Run a query multiple times against the server.</span><br><span class="line"></span><br><span class="line">Usage: mysqlslap [OPTIONS]</span><br><span class="line"></span><br><span class="line">Default options are read from the following files in the given order:</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf /usr/etc/my.cnf ~/.my.cnf </span><br><span class="line">The following groups are read: mysqlslap client</span><br><span class="line">The following options may be given as the first argument:</span><br><span class="line">--print-defaults        Print the program argument list and exit.</span><br><span class="line">--no-defaults           Don&apos;t read default options from any option file,</span><br><span class="line">                        except for login file.</span><br><span class="line">--defaults-file=#       Only read default options from the given file #.</span><br><span class="line">--defaults-extra-file=# Read this file after the global files are read.</span><br><span class="line">--defaults-group-suffix=#</span><br><span class="line">                        Also read groups with concat(group, suffix)</span><br><span class="line">--login-path=#          Read this path from the login file.</span><br><span class="line">  -?, --help          Display this help and exit.</span><br><span class="line">  -a, --auto-generate-sql 自动生成测试表和数据</span><br><span class="line">                      Generate SQL where not supplied by file or command line.</span><br><span class="line">  --auto-generate-sql-add-autoincrement 增加auto_increment一列</span><br><span class="line">                      Add an AUTO_INCREMENT column to auto-generated tables.</span><br><span class="line">  --auto-generate-sql-execute-number=# 自动生成的查询的个数</span><br><span class="line">                      Set this number to generate a set number of queries to</span><br><span class="line">                      run.</span><br><span class="line">  --auto-generate-sql-guid-primary 增加基于GUID的主键</span><br><span class="line">                      Add GUID based primary keys to auto-generated tables.</span><br><span class="line">  --auto-generate-sql-load-type=name 测试语句的类型。取值包括：read，key，write，update和mixed(默认)</span><br><span class="line">                      Specify test load type: mixed, update, write, key, or</span><br><span class="line">                      read; default is mixed.</span><br><span class="line">  --auto-generate-sql-secondary-indexes=# 增加二级索引的个数，默认是0</span><br><span class="line">                      Number of secondary indexes to add to auto-generated</span><br><span class="line">                      tables.</span><br><span class="line">  --auto-generate-sql-unique-query-number=# 不同查询的数量，默认值是10</span><br><span class="line">                      Number of unique queries to generate for automatic tests.</span><br><span class="line">  --auto-generate-sql-unique-write-number=# 不同插入的数量，默认是100</span><br><span class="line">                      Number of unique queries to generate for</span><br><span class="line">                      auto-generate-sql-write-number.</span><br><span class="line">  --auto-generate-sql-write-number=# </span><br><span class="line">                      Number of row inserts to perform for each thread (default</span><br><span class="line">                      is 100).</span><br><span class="line">  --commit=#          多少条DML后提交一次</span><br><span class="line">  Commit records every X number of statements.</span><br><span class="line">  -C, --compress      如果服务器和客户端支持都压缩，则压缩信息传递</span><br><span class="line">  Use compression in server/client protocol.</span><br><span class="line">  -c, --concurrency=name 模拟N个客户端并发执行select。可指定多个值，以逗号或者 --delimiter 参数指定的值做为分隔符</span><br><span class="line">                      Number of clients to simulate for query to run.</span><br><span class="line">  --create=name       指定用于创建表的.sql文件或者字串</span><br><span class="line">  File or string to use create tables.</span><br><span class="line">  --create-schema=name 指定待测试的数据库名，MySQL中schema也就是database，默认是mysqlslap</span><br><span class="line">                      Schema to run tests in.</span><br><span class="line">  --csv[=name]        Generate CSV output to named file or to stdout if no file</span><br><span class="line">                      is named.</span><br><span class="line">  -#, --debug[=#]     This is a non-debug version. Catch this and exit.</span><br><span class="line">  --debug-check       This is a non-debug version. Catch this and exit.</span><br><span class="line">  -T, --debug-info    打印内存和CPU的信息</span><br><span class="line">  This is a non-debug version. Catch this and exit.</span><br><span class="line">  --default-auth=name Default authentication client-side plugin to use.</span><br><span class="line">  -F, --delimiter=name 文件中的SQL语句使用分割符号</span><br><span class="line">                      Delimiter to use in SQL statements supplied in file or</span><br><span class="line">                      command line.</span><br><span class="line">  --detach=#           每执行完N个语句，先断开再重新打开连接</span><br><span class="line">  Detach (close and reopen) connections after X number of</span><br><span class="line">                      requests.</span><br><span class="line">  --enable-cleartext-plugin </span><br><span class="line">                      Enable/disable the clear text authentication plugin.</span><br><span class="line">  -e, --engine=name   创建测试表所使用的存储引擎，可指定多个</span><br><span class="line">          Storage engine to use for creating the table.</span><br><span class="line">  -h, --host=name     Connect to host.</span><br><span class="line">  -i, --iterations=#  迭代执行的次数</span><br><span class="line">  Number of times to run the tests.</span><br><span class="line">  --no-drop           Do not drop the schema after the test.</span><br><span class="line">  -x, --number-char-cols=name 自动生成的测试表中包含多少个字符类型的列，默认1</span><br><span class="line">                      Number of VARCHAR columns to create in table if</span><br><span class="line">                      specifying --auto-generate-sql.</span><br><span class="line">  -y, --number-int-cols=name 自动生成的测试表中包含多少个数字类型的列，默认1</span><br><span class="line">                      Number of INT columns to create in table if specifying</span><br><span class="line">                      --auto-generate-sql.</span><br><span class="line">  --number-of-queries=# 总的测试查询次数(并发客户数×每客户查询次数)</span><br><span class="line">                      Limit each client to this number of queries (this is not</span><br><span class="line">                      exact).</span><br><span class="line">  --only-print        只输出模拟执行的结果，不实际执行Do not connect to the databases, but instead print out</span><br><span class="line">                      what would have been done.</span><br><span class="line">  -p, --password[=name] </span><br><span class="line">                      Password to use when connecting to server. If password is</span><br><span class="line">                      not given it&apos;s asked from the tty.</span><br><span class="line">  --plugin-dir=name   Directory for client-side plugins.</span><br><span class="line">  -P, --port=#        Port number to use for connection.</span><br><span class="line">  --post-query=name   测试完成以后执行的SQL语句的文件或者字符串 这个过程不影响时间计算Query to run or file containing query to execute after</span><br><span class="line">                      tests have completed.</span><br><span class="line">  --post-system=name  测试完成以后执行的系统语句 这个过程不影响时间计算system() string to execute after tests have completed.</span><br><span class="line">  --pre-query=name    测试执行之前执行的SQL语句的文件或者字符串 这个过程不影响时间计算Query to run or file containing query to execute before</span><br><span class="line">                      running tests.</span><br><span class="line">  --pre-system=name   测试执行之前执行的系统语句 这个过程不影响时间计算system() string to execute before running tests.</span><br><span class="line">  --protocol=name     The protocol to use for connection (tcp, socket, pipe,</span><br><span class="line">                      memory).</span><br><span class="line">  -q, --query=name    指定自定义.sql脚本执行测试。例如可以调用自定义的一个存储过程或者sql语句来执行测试Query to run or file containing query to run.</span><br><span class="line">  --secure-auth       Refuse client connecting to server if it uses old</span><br><span class="line">                      (pre-4.1.1) protocol. Deprecated. Always TRUE</span><br><span class="line">  -s, --silent        不输出Run program in silent mode - no output.</span><br><span class="line">  -S, --socket=name   The socket file to use for connection.</span><br><span class="line">  --sql-mode=name     Specify sql-mode to run mysqlslap tool.</span><br><span class="line">  --ssl-mode=name     SSL connection mode.</span><br><span class="line">  --ssl               Deprecated. Use --ssl-mode instead.</span><br><span class="line">                      (Defaults to on; use --skip-ssl to disable.)</span><br><span class="line">  --ssl-verify-server-cert </span><br><span class="line">                      Deprecated. Use --ssl-mode=VERIFY_IDENTITY instead.</span><br><span class="line">  --ssl-ca=name       CA file in PEM format.</span><br><span class="line">  --ssl-capath=name   CA directory.</span><br><span class="line">  --ssl-cert=name     X509 cert in PEM format.</span><br><span class="line">  --ssl-cipher=name   SSL cipher to use.</span><br><span class="line">  --ssl-key=name      X509 key in PEM format.</span><br><span class="line">  --ssl-crl=name      Certificate revocation list.</span><br><span class="line">  --ssl-crlpath=name  Certificate revocation list path.</span><br><span class="line">  --tls-version=name  TLS version to use, permitted values are: TLSv1, TLSv1.1</span><br><span class="line">  -u, --user=name     User for login if not current user.</span><br><span class="line">  -v, --verbose       输出更多的信息More verbose output; you can use this multiple times to</span><br><span class="line">                      get even more verbose output.</span><br><span class="line">  -V, --version       Output version information and exit.</span><br></pre></td></tr></table></figure><p>2、以自动生成测试表和数据的形式，分别模拟 50 和 100 个客户端并发连接处理 1000 个 query 的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@object1 local]# mysqlslap -uroot -p&apos;CAOcao123~!@&apos; -a --concurrency=50,100 --number-of-queries=1000 </span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">Average number of seconds to run all queries: 0.605 seconds</span><br><span class="line">Minimum number of seconds to run all queries: 0.605 seconds</span><br><span class="line">Maximum number of seconds to run all queries: 0.605 seconds</span><br><span class="line">Number of clients running queries: 50</span><br><span class="line">Average number of queries per client: 20</span><br><span class="line"></span><br><span class="line">Benchmark</span><br><span class="line">Average number of seconds to run all queries: 0.534 seconds</span><br><span class="line">Minimum number of seconds to run all queries: 0.534 seconds</span><br><span class="line">Maximum number of seconds to run all queries: 0.534 seconds</span><br><span class="line">Number of clients running queries: 100</span><br><span class="line">Average number of queries per client: 10</span><br></pre></td></tr></table></figure><p>3、增加 –debug-info 选项，可以输出内存和CPU信息。 </p>]]></content>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS7通过yum安装最新版本MySQL</title>
      <link href="/2017/04/26/CentOS7-yum-install-MySQL.html"/>
      <url>/2017/04/26/CentOS7-yum-install-MySQL.html</url>
      <content type="html"><![CDATA[<p>CentOS 7之后的版本yum的默认源中使用MariaDB替代原先MySQL，因此安装方式较为以往有一些改变：</p><p>卸载原来的MariaDB</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove -y mariadb-config-3:10.1.17-1.el7.x86_64</span><br></pre></td></tr></table></figure><a id="more"></a><p>下载mysql的源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装yum库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall -y mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure><p>安装MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mysql-community-server</span><br></pre></td></tr></table></figure><p>启动MySQL服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p>MySQL5.7加强了root用户的安全性，因此在第一次安装后会初始化一个随机密码，以下为查看初始随机密码的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &apos;temporary password&apos; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>使用初始随机密码登录后MySQL会强制要求修改密码，否则无法正常使用，（密码必须包含小写、大写字母及特殊字符，当然也有其他方法不受此限制，再次不多做描述），修改方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(&apos;your new password&apos;);</span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; PASSWORD EXPIRE NEVER;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>然后退出后即可用新密码登录。</p><p>远程连接授权：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;your password&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo+github+next搭建的blog</title>
      <link href="/2017/01/13/Hexo-github-next-blog.html"/>
      <url>/2017/01/13/Hexo-github-next-blog.html</url>
      <content type="html"><![CDATA[<hr><ol><li>搭建环境：Windows 10</li><li>软件工具：git、node.js、hexo、Markdownpad2</li></ol><a id="more"></a><hr><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a><strong>一、环境搭建</strong></h1><ul><li>安装git</li></ul><blockquote><p>git官网(<a href="http://git-scm.com" target="_blank" rel="noopener">http://git-scm.com</a>)</p></blockquote><ul><li>安装Node.js</li></ul><blockquote><p>node.js官网(<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a>)</p></blockquote><h1 id="二、安装和配置Hexo"><a href="#二、安装和配置Hexo" class="headerlink" title="二、安装和配置Hexo"></a><strong>二、安装和配置Hexo</strong></h1><ul><li><p>执行cmd命令</p><blockquote><p>npm install -g hexo-cli</p></blockquote></li><li><p>本地创建Hexo文件夹，本目录下执行cmd命令</p><blockquote><p>hexo init</p><p>npm install</p></blockquote></li><li><p>启动Hexo</p><blockquote><p>hexo server</p></blockquote></li><li><p>更改hexo主题，在Hexo目录下载next主题</p><blockquote><p>git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p></blockquote></li><li><p>修改Hexo配置文件_config.yml</p><blockquote><p>theme: next</p></blockquote></li><li><p>重启Hexo，基本更改过来了，其他修改具体查看<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">GITBUB</a></p></li><li><p>创建文章，执行cmd命令</p></li></ul><blockquote><p>hexo new 文章主题</p></blockquote><ul><li><p>执行命令后，在文件下的source_posts，自动生成以后缀为md的文件，修改md内容</p></li><li><p>生成html文件，执行cmd命令</p></li></ul><blockquote><p>hexo d -g</p></blockquote><ul><li>自动会生存静态文件在public文件夹下，把里面的文件全部上传至自己的github下即可</li></ul>]]></content>
      
      
    </entry>
    
  
  
</search>
