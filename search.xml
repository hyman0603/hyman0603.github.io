<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[CentOS7 LDAP统一认证部署]]></title>
      <url>%2F2017%2F05%2F02%2FCentOS7-LDAP%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81%E9%83%A8%E7%BD%B2%2F</url>
      <content type="text"><![CDATA[##LDAP介绍LDAP是轻量目录访问协议，英文全称是Lightweight Directory Access Protocol，简称为LDAP。它是基于X.500标准的，但是简单多了并且可以根据需要定制。与X.500不同，LDAP支持TCP/IP。LDAP的核心规范在RFC中都有定义，所有与LDAP相关的RFC都可以在LDAPman RFC网页中找到。 ##使用目的使用LDAP对运维相关用户名密码做统一管理。可以实现一个帐号登录多个不同系统。 ##LDAP部署 ###LDAP Server端安装1[root@object1 ~]# yum install -y openldap openldap-clients openldap-servers migrationtools ###LDAP 配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#配置 OpenLDAP Server[root@object1 ~]# vim /etc/openldap/slapd.d/cn\=config/olcDatabase\=\&#123;2\&#125;hdb.ldif dn: olcDatabase=&#123;2&#125;hdb修改两行olcSuffix: dc=hyman,dc=comolcRootDN: cn=Manager,dc=hyman,dc=com新增一行olcRootPW: 123456#配置 Monitoring Database[root@object1 ~]# vim /etc/openldap/slapd.d/cn\=config/olcDatabase\=\&#123;1\&#125;monitor.ldifdn: olcDatabase=&#123;1&#125;monitor修改一行olcAccess: &#123;0&#125;to * by dn.base=&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=extern al,cn=auth&quot; read by dn.base=&quot;cn=Manager,dc=hyman,dc=com&quot; read by * none#初始化 LDAP database[root@object1 ~]# cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG[root@object1 ~]# chown -R ldap.ldap /var/lib/ldap/#测试 configuration[root@object1 ~]# slaptest -u#启动服务并开机自启[root@object1 ~]# systemctl start slapd[root@object1 ~]# systemctl enable slapd#查看状态[root@object1 ~]# netstat -lt | grep ldap#将所有的配置LDAP server, 添加到LDAP schemas中[root@object1 ~]# cd /etc/openldap/schema/ ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f cosine.ldif[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f nis.ldif[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f collective.ldif[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f corba.ldif[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f core.ldif[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f duaconf.ldif[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f dyngroup.ldif[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f inetorgperson.ldif[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f java.ldif[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f ppolicy.ldif[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f pmi.ldif[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f openldap.ldif[root@object1 schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f misc.ldif#使用Migration Tools 创建 LDAP DIT[root@object1 schema]# cd /usr/share/migrationtools/[root@object1 migrationtools]# vim migrate_common.ph修改61行$NAMINGCONTEXT&#123;&apos;group&apos;&#125; = &quot;ou=Groups&quot;;修改71行$DEFAULT_MAIL_DOMAIN = &quot;hyman.com&quot;;修改74行$DEFAULT_BASE = &quot;dc=hyman,dc=com&quot;;修改90行$EXTENDED_SCHEMA = 1;#创建 base.ldif[root@object1 migrationtools]# ./migrate_base.pl &gt; /root/base.ldif#导入LDAP database[root@object1 migrationtools]# ldapadd -x -W -D &quot;cn=Manager,dc=hyman,dc=com&quot; -f /root/base.ldif#创建用户和用户组，并将其从本地数据库迁移到LDAP数据库[root@object1 migrationtools]# mkdir /home/guests[root@object1 migrationtools]# useradd -d /home/guests/ldapuser1 ldapuser1[root@object1 migrationtools]# useradd -d /home/guests/ldapuser2 ldapuser2[root@object1 migrationtools]# echo &quot;password&quot; | passwd --stdin ldapuser1[root@object1 migrationtools]# echo &quot;password&quot; | passwd --stdin ldapuser2#过滤掉这些用户和组和密码从/etc/shadow到不同的文件[root@object1 ~]# getent passwd | tail -n 5 &gt; /root/users[root@object1 ~]# getent shadow | tail -n 5 &gt; /root/shadow[root@object1 ~]# getent group | tail -n 5 &gt; /root/groups#创建这些用户使用migrationtools[root@object1 ~]# cd /usr/share/migrationtools/[root@object1 migrationtools]# vim migrate_passwd.pl 修改188行把 /etc/shadow 替换为 /root/shadow[root@object1 migrationtools]# ./migrate_passwd.pl /root/users &gt; users.ldif[root@object1 migrationtools]# ./migrate_passwd.pl /root/groups &gt; groups.ldif#上传这些用户和组LDAP数据库[root@object1 ~]# ldapadd -x -W -D &quot;cn=Manager,dc=hyman,dc=com&quot; -f users.ldif[root@object1 ~]# ldapadd -x -W -D &quot;cn=Manager,dc=hyman,dc=com&quot; -f groups.ldif#所有记录搜索LDAP DIT[root@object1 ~]# ldapsearch -x -b &quot;dc=hyman,dc=com&quot; -H ldap://127.0.0.1 ##LDAP 客户端验证 1234[root@block1 ~]# yum install -y nss-pam*[root@block1 ~]# authconfig-tui 选择第二个Use LDAP[root@block1 ~]# su ldaduser1]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CentOS 7通过yum安装ansible]]></title>
      <url>%2F2017%2F04%2F27%2FCentOS-7%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85ansible%2F</url>
      <content type="text"><![CDATA[一、ansible介绍1、ansible 简介Ansible官方的 title 是“Ansible is Simple IT Automation”——简单的自动化IT工具。Ansible是一款为类Unix系统开发的自由开源的配置和自动化工具。它用Python写成，类似于Chef和Puppet，但是有一个不同的优点是我们不需要在节点中安装任何客户端。它使用SSH来和节点进行通信。 2、ansible 特点（1） No agents：不需要在被管控主机上安装任意客户端；（2） No server：无服务器端，使用时直接运行命令即可；（3） Modules in any languages：基于模块工作，可使用任意语言开发模块（4） YAML，not code：使用yaml语言定制剧本playbook；（5） SSH by default：基于SSH工作；（6） Strong multi-tier solution：可实现多级指挥； 二、Ansible安装使用1、 设置EPEL仓库1[root@object1 ~]# rpm -iUvh http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-9.noarch.rpm 2、使用yum安装Ansible1[root@object1 ~]# yum install -y ansible 3、设置用于节点鉴权的SSH密钥1234#在Ansible服务端生成密钥[root@object1 ~]# ssh-keygen #使用ssh-copy-id命令来复制Ansible公钥到节点中[root@object1 ~]# ssh-copy-id -i root@192.168.1.215 4、为Ansible定义节点的清单1234[root@object1 ~]# cat /etc/ansible/hosts[test]192.168.1.226192.168.1.215 5、尝试在Ansible服务端运行命令123456789101112131415161718192021222324252627282930313233343536#使用ping检查ansible节点的连通性[root@object1 ~]# ansible -m ping &apos;test&apos;192.168.1.226 | UNREACHABLE! =&gt; &#123; &quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n&quot;, &quot;unreachable&quot;: true&#125;192.168.1.215 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125;#检查Ansible节点的运行时间（uptime）[root@object1 ~]# ansible -m command -a &quot;uptime&quot; &quot;test&quot;192.168.1.226 | UNREACHABLE! =&gt; &#123; &quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n&quot;, &quot;unreachable&quot;: true&#125;192.168.1.215 | SUCCESS | rc=0 &gt;&gt; 07:11:16 up 42 days, 13:43, 1 user, load average: 0.00, 0.00, 0.00#检查节点的内核版本[root@object1 ~]# ansible -m command -a &quot;uname -r&quot; &quot;test&quot;192.168.1.226 | UNREACHABLE! =&gt; &#123; &quot;changed&quot;: false, &quot;msg&quot;: &quot;Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n&quot;, &quot;unreachable&quot;: true&#125;192.168.1.215 | SUCCESS | rc=0 &gt;&gt;2.6.32-573.3.1.el6.x86_64#给节点增加用户[root@object1 ~]# ansible -m command -a &quot;useradd test&quot; &quot;test&quot;192.168.1.226 | SUCCESS | rc=0 &gt;&gt;192.168.1.215 | SUCCESS | rc=0 &gt;&gt; 6、模块的使用查看各模块的使用方法12345ansible-doc [options] [modules] ：Show Ansible module documentation -l 列出所有的ansible模块 -s 列出该模块的相关指令可以直接使用 ansible-doc 模块名 来查看模块的使用，如# ansible-doc htpasswd 三、playbook的使用YAML Ain’t Markup Language，即YAML不是XML。不过，在开发的这种语言时，YAML的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）。 YAML的语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。其结构（Structure）通过空格来展示，序列（Sequence）里的项用”-“来代表，Map里的键值对用”:”分隔。 1、playbook使用1ansible-playbook test.yaml 下面就是一个只包含了一个play的playbook，在写playbook的时候，一定要记住在 hosts，yum（模块儿名）等后带空格，否则会报错。 12345678910111213141516171819202122#这个是你选择的主机- hosts: webservers#这个是变量 vars: http_port: 80 max_clients: 200#远端的执行权限 remote_user: root tasks:#利用yum模块来操作 - name: ensure apache is at the latest version yum: pkg=httpd state=latest - name: write the apache config file template: src=/srv/httpd.j2 dest=/etc/httpd.conf #触发重启服务器 notify: - restart apache - name: ensure apache is running service: name=httpd state=started #这里的restart apache 和上面的触发是配对的。这就是handlers的作用。相当于tag handlers: - name: restart apache service: name=httpd state=restarted 2、playbook案例corosync.yaml 12345678910111213141516171819202122232425262728293031323334353637- hosts: hanodes #指定要执行任务的主机，可由冒号分隔主机组 remote_user: root #指定远程主机上执行任务的用户 vars: #定义如下2个变量 crmsh: crmsh-1.2.6.4.el6.x86_64.rpm pssh: pssh-2.3.1-2.el6.x86_64.rpm tasks: #指定需执行的任务列表，每个task都有其name和使用的模块及参数 - name: test connection ping: #ping模块无需执行参数 remote_user: jason #在task中指定远程主机上执行任务的用户 sudo: yes #使用sudo在远程主机上执行任务 - name: corosync installing yum: name=corosync state=present - name: pacemaker installing #定义一个软件安装任务 yum: name=pacemaker state=present #使用yum安装，并配置需安装的软件名（name），及状态（state） - name: crmsh rpm packages copy: src=/ansible/corosync/packages/&#123;&#123; crmsh &#125;&#125; dest=/tmp/&#123;&#123; crmsh &#125;&#125; - name: pssh rpm packages copy: src=/ansible/corosync/packages/&#123;&#123; pssh &#125;&#125; dest=/tmp/&#123;&#123; pssh &#125;&#125; - name: crmsh installing command: yum -y reinstall /tmp/&#123;&#123; crmsh &#125;&#125; /tmp/&#123;&#123; pssh &#125;&#125; - name: authkey configure file copy: src=/ansible/corosync/conf/authkey dest=/etc/corosync/authkey - name: authkey mode 400 #定义一个文件权限设置任务 file: path=/etc/corosync/authkey mode=400 notify: #定义一个通知，当此任务执行时，可以激发响应的handler - restart corosync - name: corosync.conf configure file copy: src=/ansible/corosync/conf/corosync.conf dest=/etc/corosync/corosync.conf tags: - conf notify: - restart corosync - name: ensure the corosync service startup on boot service: name=corosync state=started enabled=yes handlers: #定义当关注的资源发生变化时，需采取的操作 - name: restart corosync #定义一个服务重启任务 service: name=corosync state=restarted heartbeat.yaml 123456789101112131415161718- hosts: hbhosts remote_user: root tasks: - name: ensure heartbeat latest version yum: name=heartbeat state=present - name: authkeys configure file copy: src=/root/hb_conf/authkeys dest=/etc/ha.d/authkeys - name: authkeys mode 600 file: path=/etc/ha.d/authkeys mode=600 notify: - restart heartbeat - name: ha.cf configure file copy: src=/root/hb_conf/ha.cf dest=/etc/ha.d/ha.cf notify: - restart heartbeat handlers: - name: restart heartbeat service: name=heartbeat state=restarted]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Zookeeper、Dubbo-Admin管理平台的搭建]]></title>
      <url>%2F2017%2F04%2F26%2FZookeeper%E3%80%81Dubbo-Admin%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%90%AD%E5%BB%BA%2F</url>
      <content type="text"><![CDATA[ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。 ZooKeeper官网为：http://zookeeper.apache.org/ Dubbo是Alibaba开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。关于注册中心、协议支持、服务监控等内容。 Dubbo官网为：http://dubbo.io/ 一、zookeeper安装与启动首先需要安装JdK，从Oracle的Java网站下载，安装很简单，就不再详述。zookeeper的下载地址 1http://www.apache.org/dyn/closer.cgi/zookeeper/ 下载后直接解压，不用安装 1[root@object1 home]# tar zxvf zookeeper-3.4.10.tar.gz 修改默认配置 1[root@object1 conf]# cp zoo_sample.cfg zoo.cfg 参数说明: tickTime：zookeeper中使用的基本时间单位, 毫秒值这个时间是作为Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。 dataDir：数据目录. 可以是任意目录，默认情况下，Zookeeper 将写数据 的日志文件也保存在这个目录里。 clientPort：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。 至此, zookeeper的单机模式已经配置好了，启动ZooKeeper 1[root@object1 zookeeper-3.4.10]# sh bin/zkServer.sh start 二、Dubbo-admin管理平台的安装因为zookeeper只是一个黑框，我们无法看到是否存在了什么提供者或消费者，这时就要借助Dubbo-Admin管理平台来实时的查看，也可以通过这个平台来管理提者和消费者。制作了基于jdk1.8打包的dubbo-admin.war 下载地址 1http://download.csdn.net/detail/qq_30567735/9826361 dubbo源码 1https://github.com/alibaba/dubbo 下载好dubbo-admin.war后，我们就可以按常用的web部署方式进行部署即可，把war包放到tomcat的webapps目录下，启动tomcat，后再部署下相应的参数。 启动tomcat 1[root@object1 apache-tomcat-7.0.62]# sh bin/startup.sh 访问项目地址即可 1http: //ip地址:端口号/dubbo-admin-2.5.4/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL自带压力测试工具mysqlslap的使用方法]]></title>
      <url>%2F2017%2F04%2F26%2FMySQL%E8%87%AA%E5%B8%A6%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7mysqlslap%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
      <content type="text"><![CDATA[mysqlslap是从5.1.4版开始的一个MySQL官方提供的压力测试工具。通过模拟多个并发客户端访问MySQL来执行压力测试，并输出计时信息。并且能很好的对比多个存储引擎在相同环境下的并发压力性能差别。可以指定SQL语句。如果没有指定SQL语句，mysqlslap会自动生成查询schema的SELECT语句。 1、查看帮助信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126[root@object1 local]# mysqlslap --helpmysqlslap Ver 1.0 Distrib 5.7.18, for Linux (x86_64)Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Run a query multiple times against the server.Usage: mysqlslap [OPTIONS]Default options are read from the following files in the given order:/etc/my.cnf /etc/mysql/my.cnf /usr/etc/my.cnf ~/.my.cnf The following groups are read: mysqlslap clientThe following options may be given as the first argument:--print-defaults Print the program argument list and exit.--no-defaults Don&apos;t read default options from any option file, except for login file.--defaults-file=# Only read default options from the given file #.--defaults-extra-file=# Read this file after the global files are read.--defaults-group-suffix=# Also read groups with concat(group, suffix)--login-path=# Read this path from the login file. -?, --help Display this help and exit. -a, --auto-generate-sql 自动生成测试表和数据 Generate SQL where not supplied by file or command line. --auto-generate-sql-add-autoincrement 增加auto_increment一列 Add an AUTO_INCREMENT column to auto-generated tables. --auto-generate-sql-execute-number=# 自动生成的查询的个数 Set this number to generate a set number of queries to run. --auto-generate-sql-guid-primary 增加基于GUID的主键 Add GUID based primary keys to auto-generated tables. --auto-generate-sql-load-type=name 测试语句的类型。取值包括：read，key，write，update和mixed(默认) Specify test load type: mixed, update, write, key, or read; default is mixed. --auto-generate-sql-secondary-indexes=# 增加二级索引的个数，默认是0 Number of secondary indexes to add to auto-generated tables. --auto-generate-sql-unique-query-number=# 不同查询的数量，默认值是10 Number of unique queries to generate for automatic tests. --auto-generate-sql-unique-write-number=# 不同插入的数量，默认是100 Number of unique queries to generate for auto-generate-sql-write-number. --auto-generate-sql-write-number=# Number of row inserts to perform for each thread (default is 100). --commit=# 多少条DML后提交一次 Commit records every X number of statements. -C, --compress 如果服务器和客户端支持都压缩，则压缩信息传递 Use compression in server/client protocol. -c, --concurrency=name 模拟N个客户端并发执行select。可指定多个值，以逗号或者 --delimiter 参数指定的值做为分隔符 Number of clients to simulate for query to run. --create=name 指定用于创建表的.sql文件或者字串 File or string to use create tables. --create-schema=name 指定待测试的数据库名，MySQL中schema也就是database，默认是mysqlslap Schema to run tests in. --csv[=name] Generate CSV output to named file or to stdout if no file is named. -#, --debug[=#] This is a non-debug version. Catch this and exit. --debug-check This is a non-debug version. Catch this and exit. -T, --debug-info 打印内存和CPU的信息 This is a non-debug version. Catch this and exit. --default-auth=name Default authentication client-side plugin to use. -F, --delimiter=name 文件中的SQL语句使用分割符号 Delimiter to use in SQL statements supplied in file or command line. --detach=# 每执行完N个语句，先断开再重新打开连接 Detach (close and reopen) connections after X number of requests. --enable-cleartext-plugin Enable/disable the clear text authentication plugin. -e, --engine=name 创建测试表所使用的存储引擎，可指定多个 Storage engine to use for creating the table. -h, --host=name Connect to host. -i, --iterations=# 迭代执行的次数 Number of times to run the tests. --no-drop Do not drop the schema after the test. -x, --number-char-cols=name 自动生成的测试表中包含多少个字符类型的列，默认1 Number of VARCHAR columns to create in table if specifying --auto-generate-sql. -y, --number-int-cols=name 自动生成的测试表中包含多少个数字类型的列，默认1 Number of INT columns to create in table if specifying --auto-generate-sql. --number-of-queries=# 总的测试查询次数(并发客户数×每客户查询次数) Limit each client to this number of queries (this is not exact). --only-print 只输出模拟执行的结果，不实际执行Do not connect to the databases, but instead print out what would have been done. -p, --password[=name] Password to use when connecting to server. If password is not given it&apos;s asked from the tty. --plugin-dir=name Directory for client-side plugins. -P, --port=# Port number to use for connection. --post-query=name 测试完成以后执行的SQL语句的文件或者字符串 这个过程不影响时间计算Query to run or file containing query to execute after tests have completed. --post-system=name 测试完成以后执行的系统语句 这个过程不影响时间计算system() string to execute after tests have completed. --pre-query=name 测试执行之前执行的SQL语句的文件或者字符串 这个过程不影响时间计算Query to run or file containing query to execute before running tests. --pre-system=name 测试执行之前执行的系统语句 这个过程不影响时间计算system() string to execute before running tests. --protocol=name The protocol to use for connection (tcp, socket, pipe, memory). -q, --query=name 指定自定义.sql脚本执行测试。例如可以调用自定义的一个存储过程或者sql语句来执行测试Query to run or file containing query to run. --secure-auth Refuse client connecting to server if it uses old (pre-4.1.1) protocol. Deprecated. Always TRUE -s, --silent 不输出Run program in silent mode - no output. -S, --socket=name The socket file to use for connection. --sql-mode=name Specify sql-mode to run mysqlslap tool. --ssl-mode=name SSL connection mode. --ssl Deprecated. Use --ssl-mode instead. (Defaults to on; use --skip-ssl to disable.) --ssl-verify-server-cert Deprecated. Use --ssl-mode=VERIFY_IDENTITY instead. --ssl-ca=name CA file in PEM format. --ssl-capath=name CA directory. --ssl-cert=name X509 cert in PEM format. --ssl-cipher=name SSL cipher to use. --ssl-key=name X509 key in PEM format. --ssl-crl=name Certificate revocation list. --ssl-crlpath=name Certificate revocation list path. --tls-version=name TLS version to use, permitted values are: TLSv1, TLSv1.1 -u, --user=name User for login if not current user. -v, --verbose 输出更多的信息More verbose output; you can use this multiple times to get even more verbose output. -V, --version Output version information and exit. 2、以自动生成测试表和数据的形式，分别模拟 50 和 100 个客户端并发连接处理 1000 个 query 的情况。 123456789101112131415[root@object1 local]# mysqlslap -uroot -p&apos;CAOcao123~!@&apos; -a --concurrency=50,100 --number-of-queries=1000 mysqlslap: [Warning] Using a password on the command line interface can be insecure.Benchmark Average number of seconds to run all queries: 0.605 seconds Minimum number of seconds to run all queries: 0.605 seconds Maximum number of seconds to run all queries: 0.605 seconds Number of clients running queries: 50 Average number of queries per client: 20Benchmark Average number of seconds to run all queries: 0.534 seconds Minimum number of seconds to run all queries: 0.534 seconds Maximum number of seconds to run all queries: 0.534 seconds Number of clients running queries: 100 Average number of queries per client: 10 3、增加 –debug-info 选项，可以输出内存和CPU信息。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CentOS7通过yum安装最新版本MySQL]]></title>
      <url>%2F2017%2F04%2F26%2FCentOS7%20yum%E5%AE%89%E8%A3%85MySQL%2F</url>
      <content type="text"><![CDATA[CentOS 7之后的版本yum的默认源中使用MariaDB替代原先MySQL，因此安装方式较为以往有一些改变： 卸载原来的MariaDB 1yum remove -y mariadb-config-3:10.1.17-1.el7.x86_64 下载mysql的源 1wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm 安装yum库 1yum localinstall -y mysql57-community-release-el7-7.noarch.rpm 安装MySQL 1yum install -y mysql-community-server 启动MySQL服务 1systemctl start mysqld.service MySQL5.7加强了root用户的安全性，因此在第一次安装后会初始化一个随机密码，以下为查看初始随机密码的方式 1grep &apos;temporary password&apos; /var/log/mysqld.log 使用初始随机密码登录后MySQL会强制要求修改密码，否则无法正常使用，（密码必须包含小写、大写字母及特殊字符，当然也有其他方法不受此限制，再次不多做描述），修改方法如下： 123SET PASSWORD = PASSWORD(&apos;your new password&apos;);ALTER USER &apos;root&apos;@&apos;localhost&apos; PASSWORD EXPIRE NEVER;flush privileges; 然后退出后即可用新密码登录。 远程连接授权： 1GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;your password&apos; WITH GRANT OPTION;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo+github+next搭建的blog]]></title>
      <url>%2F2017%2F01%2F13%2FHexo-github-next%E6%90%AD%E5%BB%BA%E7%9A%84blog%2F</url>
      <content type="text"><![CDATA[搭建环境：Windows 10 软件工具：git、node.js、hexo、Markdownpad2 一、环境搭建 安装git git官网(http://git-scm.com) 安装Node.js node.js官网(https://nodejs.org/en/) 二、安装和配置Hexo 执行cmd命令 npm install -g hexo-cli 本地创建Hexo文件夹，本目录下执行cmd命令 hexo init npm install 启动Hexo hexo server 更改hexo主题，在Hexo目录下载next主题 git clone https://github.com/iissnan/hexo-theme-next themes/next 修改Hexo配置文件_config.yml theme: next 重启Hexo，基本更改过来了，其他修改具体查看GITBUB 创建文章，执行cmd命令 hexo new 文章主题 执行命令后，在文件下的source_posts，自动生成以后缀为md的文件，修改md内容 生成html文件，执行cmd命令 hexo d -g 自动会生存静态文件在public文件夹下，把里面的文件全部上传至自己的github下即可]]></content>
    </entry>

    
  
  
</search>
